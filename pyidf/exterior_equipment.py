from collections import OrderedDict

class ExteriorLights(object):
    """ Corresponds to IDD object `Exterior:Lights`
        only used for Meter type reporting, does not affect building loads
    
    """
    internal_name = "Exterior:Lights"
    field_count = 5
    required_fields = ["Name", "Schedule Name", "Design Level"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Exterior:Lights`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Name"] = None
        self._data["Design Level"] = None
        self._data["Control Option"] = None
        self._data["End-Use Subcategory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_level = None
        else:
            self.design_level = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_option = None
        else:
            self.control_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`
        units in schedule should be fraction applied to capacity of the exterior lights equipment, generally (0.0 - 1.0)

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @property
    def design_level(self):
        """Get design_level

        Returns:
            float: the value of `design_level` or None if not set
        """
        return self._data["Design Level"]

    @design_level.setter
    def design_level(self, value=None):
        """  Corresponds to IDD Field `design_level`

        Args:
            value (float): value for IDD Field `design_level`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_level`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_level`')

        self._data["Design Level"] = value

    @property
    def control_option(self):
        """Get control_option

        Returns:
            str: the value of `control_option` or None if not set
        """
        return self._data["Control Option"]

    @control_option.setter
    def control_option(self, value=None):
        """  Corresponds to IDD Field `control_option`
        Astronomical Clock option overrides schedule to turn lights off when sun is up

        Args:
            value (str): value for IDD Field `control_option`
                Accepted values are:
                      - ScheduleNameOnly
                      - AstronomicalClock
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_option`')
            vals = set()
            vals.add("ScheduleNameOnly")
            vals.add("AstronomicalClock")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_option`'.format(value))

        self._data["Control Option"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_name))
        out.append(self._to_str(self.design_level))
        out.append(self._to_str(self.control_option))
        out.append(self._to_str(self.enduse_subcategory))
        return ",".join(out)

class ExteriorFuelEquipment(object):
    """ Corresponds to IDD object `Exterior:FuelEquipment`
        only used for Meter type reporting, does not affect building loads
    
    """
    internal_name = "Exterior:FuelEquipment"
    field_count = 5
    required_fields = ["Name", "Fuel Use Type", "Schedule Name", "Design Level"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Exterior:FuelEquipment`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Use Type"] = None
        self._data["Schedule Name"] = None
        self._data["Design Level"] = None
        self._data["End-Use Subcategory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_use_type = None
        else:
            self.fuel_use_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_level = None
        else:
            self.design_level = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_use_type(self):
        """Get fuel_use_type

        Returns:
            str: the value of `fuel_use_type` or None if not set
        """
        return self._data["Fuel Use Type"]

    @fuel_use_type.setter
    def fuel_use_type(self, value=None):
        """  Corresponds to IDD Field `fuel_use_type`

        Args:
            value (str): value for IDD Field `fuel_use_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Diesel
                      - Gasoline
                      - Coal
                      - OtherFuel1
                      - OtherFuel2
                      - Steam
                      - DistrictHeating
                      - DistrictCooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_use_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_use_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("Coal")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            vals.add("Steam")
            vals.add("DistrictHeating")
            vals.add("DistrictCooling")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_use_type`'.format(value))

        self._data["Fuel Use Type"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`
        units in schedule should be fraction applied to capacity of the exterior fuel equipment, generally (0.0 - 1.0)

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @property
    def design_level(self):
        """Get design_level

        Returns:
            float: the value of `design_level` or None if not set
        """
        return self._data["Design Level"]

    @design_level.setter
    def design_level(self, value=None):
        """  Corresponds to IDD Field `design_level`

        Args:
            value (float): value for IDD Field `design_level`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_level`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_level`')

        self._data["Design Level"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_use_type))
        out.append(self._to_str(self.schedule_name))
        out.append(self._to_str(self.design_level))
        out.append(self._to_str(self.enduse_subcategory))
        return ",".join(out)

class ExteriorWaterEquipment(object):
    """ Corresponds to IDD object `Exterior:WaterEquipment`
        only used for Meter type reporting, does not affect building loads
    
    """
    internal_name = "Exterior:WaterEquipment"
    field_count = 5
    required_fields = ["Name", "Schedule Name", "Design Level"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Exterior:WaterEquipment`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Use Type"] = None
        self._data["Schedule Name"] = None
        self._data["Design Level"] = None
        self._data["End-Use Subcategory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_use_type = None
        else:
            self.fuel_use_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_level = None
        else:
            self.design_level = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_use_type(self):
        """Get fuel_use_type

        Returns:
            str: the value of `fuel_use_type` or None if not set
        """
        return self._data["Fuel Use Type"]

    @fuel_use_type.setter
    def fuel_use_type(self, value="Water"):
        """  Corresponds to IDD Field `fuel_use_type`

        Args:
            value (str): value for IDD Field `fuel_use_type`
                Accepted values are:
                      - Water
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_use_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_use_type`')
            vals = set()
            vals.add("Water")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_use_type`'.format(value))

        self._data["Fuel Use Type"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`
        units in Schedule should be fraction applied to capacity of the exterior water equipment, generally (0.0 - 1.0)

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @property
    def design_level(self):
        """Get design_level

        Returns:
            float: the value of `design_level` or None if not set
        """
        return self._data["Design Level"]

    @design_level.setter
    def design_level(self, value=None):
        """  Corresponds to IDD Field `design_level`

        Args:
            value (float): value for IDD Field `design_level`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_level`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_level`')

        self._data["Design Level"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_use_type))
        out.append(self._to_str(self.schedule_name))
        out.append(self._to_str(self.design_level))
        out.append(self._to_str(self.enduse_subcategory))
        return ",".join(out)

class HvactemplateThermostat(object):
    """ Corresponds to IDD object `HVACTemplate:Thermostat`
        Zone thermostat control.  Referenced schedules must be
        defined elsewhere in the idf.  Thermostat control type is
        dual setpoint with deadband.  It is not necessary to create
        a thermostat object for every zone, only for each unique
        set of setpoint schedules.  For example, an office building
        may have two thermostat objects, one for "Office" and one
        for "Storage".
    
    """
    internal_name = "HVACTemplate:Thermostat"
    field_count = 5
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Thermostat`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heating Setpoint Schedule Name"] = None
        self._data["Constant Heating Setpoint"] = None
        self._data["Cooling Setpoint Schedule Name"] = None
        self._data["Constant Cooling Setpoint"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_setpoint_schedule_name = None
        else:
            self.heating_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_heating_setpoint = None
        else:
            self.constant_heating_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_setpoint_schedule_name = None
        else:
            self.cooling_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_cooling_setpoint = None
        else:
            self.constant_cooling_setpoint = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        This name is referenced by HVACTemplate:Zone:* objects

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heating_setpoint_schedule_name(self):
        """Get heating_setpoint_schedule_name

        Returns:
            str: the value of `heating_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Setpoint Schedule Name"]

    @heating_setpoint_schedule_name.setter
    def heating_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_setpoint_schedule_name`
        Leave blank if constant setpoint specified below, must enter schedule or constant setpoint

        Args:
            value (str): value for IDD Field `heating_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_setpoint_schedule_name`')

        self._data["Heating Setpoint Schedule Name"] = value

    @property
    def constant_heating_setpoint(self):
        """Get constant_heating_setpoint

        Returns:
            float: the value of `constant_heating_setpoint` or None if not set
        """
        return self._data["Constant Heating Setpoint"]

    @constant_heating_setpoint.setter
    def constant_heating_setpoint(self, value=None):
        """  Corresponds to IDD Field `constant_heating_setpoint`
        Ignored if schedule specified above, must enter schedule or constant setpoint

        Args:
            value (float): value for IDD Field `constant_heating_setpoint`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_heating_setpoint`'.format(value))

        self._data["Constant Heating Setpoint"] = value

    @property
    def cooling_setpoint_schedule_name(self):
        """Get cooling_setpoint_schedule_name

        Returns:
            str: the value of `cooling_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Setpoint Schedule Name"]

    @cooling_setpoint_schedule_name.setter
    def cooling_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_setpoint_schedule_name`
        Leave blank if constant setpoint specified below, must enter schedule or constant setpoint

        Args:
            value (str): value for IDD Field `cooling_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_setpoint_schedule_name`')

        self._data["Cooling Setpoint Schedule Name"] = value

    @property
    def constant_cooling_setpoint(self):
        """Get constant_cooling_setpoint

        Returns:
            float: the value of `constant_cooling_setpoint` or None if not set
        """
        return self._data["Constant Cooling Setpoint"]

    @constant_cooling_setpoint.setter
    def constant_cooling_setpoint(self, value=None):
        """  Corresponds to IDD Field `constant_cooling_setpoint`
        Ignored if schedule specified above, must enter schedule or constant setpoint

        Args:
            value (float): value for IDD Field `constant_cooling_setpoint`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_cooling_setpoint`'.format(value))

        self._data["Constant Cooling Setpoint"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heating_setpoint_schedule_name))
        out.append(self._to_str(self.constant_heating_setpoint))
        out.append(self._to_str(self.cooling_setpoint_schedule_name))
        out.append(self._to_str(self.constant_cooling_setpoint))
        return ",".join(out)

class HvactemplateZoneIdealLoadsAirSystem(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:IdealLoadsAirSystem`
        Zone with ideal air system that meets heating or cooling loads
    
    """
    internal_name = "HVACTemplate:Zone:IdealLoadsAirSystem"
    field_count = 30
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:IdealLoadsAirSystem`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Maximum Heating Supply Air Temperature"] = None
        self._data["Minimum Cooling Supply Air Temperature"] = None
        self._data["Maximum Heating Supply Air Humidity Ratio"] = None
        self._data["Minimum Cooling Supply Air Humidity Ratio"] = None
        self._data["Heating Limit"] = None
        self._data["Maximum Heating Air Flow Rate"] = None
        self._data["Maximum Sensible Heating Capacity"] = None
        self._data["Cooling Limit"] = None
        self._data["Maximum Cooling Air Flow Rate"] = None
        self._data["Maximum Total Cooling Capacity"] = None
        self._data["Heating Availability Schedule Name"] = None
        self._data["Cooling Availability Schedule Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Cooling Sensible Heat Ratio"] = None
        self._data["Dehumidification Setpoint"] = None
        self._data["Humidification Control Type"] = None
        self._data["Humidification Setpoint"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Demand Controlled Ventilation Type"] = None
        self._data["Outdoor Air Economizer Type"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_supply_air_temperature = None
        else:
            self.maximum_heating_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_supply_air_temperature = None
        else:
            self.minimum_cooling_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_supply_air_humidity_ratio = None
        else:
            self.maximum_heating_supply_air_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_supply_air_humidity_ratio = None
        else:
            self.minimum_cooling_supply_air_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_limit = None
        else:
            self.heating_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_air_flow_rate = None
        else:
            self.maximum_heating_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_sensible_heating_capacity = None
        else:
            self.maximum_sensible_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_limit = None
        else:
            self.cooling_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cooling_air_flow_rate = None
        else:
            self.maximum_cooling_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_total_cooling_capacity = None
        else:
            self.maximum_total_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_availability_schedule_name = None
        else:
            self.heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_availability_schedule_name = None
        else:
            self.cooling_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_sensible_heat_ratio = None
        else:
            self.cooling_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint = None
        else:
            self.dehumidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidification_control_type = None
        else:
            self.humidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidification_setpoint = None
        else:
            self.humidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_controlled_ventilation_type = None
        else:
            self.demand_controlled_ventilation_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_economizer_type = None
        else:
            self.outdoor_air_economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def maximum_heating_supply_air_temperature(self):
        """Get maximum_heating_supply_air_temperature

        Returns:
            float: the value of `maximum_heating_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Heating Supply Air Temperature"]

    @maximum_heating_supply_air_temperature.setter
    def maximum_heating_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `maximum_heating_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_heating_supply_air_temperature`
                Units: C
                Default value: 50.0
                value > 0.0
                value < 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_supply_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_heating_supply_air_temperature`')
            if value >= 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_heating_supply_air_temperature`')

        self._data["Maximum Heating Supply Air Temperature"] = value

    @property
    def minimum_cooling_supply_air_temperature(self):
        """Get minimum_cooling_supply_air_temperature

        Returns:
            float: the value of `minimum_cooling_supply_air_temperature` or None if not set
        """
        return self._data["Minimum Cooling Supply Air Temperature"]

    @minimum_cooling_supply_air_temperature.setter
    def minimum_cooling_supply_air_temperature(self, value=13.0 ):
        """  Corresponds to IDD Field `minimum_cooling_supply_air_temperature`

        Args:
            value (float): value for IDD Field `minimum_cooling_supply_air_temperature`
                Units: C
                Default value: 13.0
                value > -100.0
                value < 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_supply_air_temperature`'.format(value))
            if value <= -100.0:
                raise ValueError('value need to be greater -100.0 '
                                 'for field `minimum_cooling_supply_air_temperature`')
            if value >= 50.0:
                raise ValueError('value need to be smaller 50.0 '
                                 'for field `minimum_cooling_supply_air_temperature`')

        self._data["Minimum Cooling Supply Air Temperature"] = value

    @property
    def maximum_heating_supply_air_humidity_ratio(self):
        """Get maximum_heating_supply_air_humidity_ratio

        Returns:
            float: the value of `maximum_heating_supply_air_humidity_ratio` or None if not set
        """
        return self._data["Maximum Heating Supply Air Humidity Ratio"]

    @maximum_heating_supply_air_humidity_ratio.setter
    def maximum_heating_supply_air_humidity_ratio(self, value=0.0156 ):
        """  Corresponds to IDD Field `maximum_heating_supply_air_humidity_ratio`

        Args:
            value (float): value for IDD Field `maximum_heating_supply_air_humidity_ratio`
                Units: kgWater/kgDryAir
                Default value: 0.0156
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_supply_air_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_heating_supply_air_humidity_ratio`')

        self._data["Maximum Heating Supply Air Humidity Ratio"] = value

    @property
    def minimum_cooling_supply_air_humidity_ratio(self):
        """Get minimum_cooling_supply_air_humidity_ratio

        Returns:
            float: the value of `minimum_cooling_supply_air_humidity_ratio` or None if not set
        """
        return self._data["Minimum Cooling Supply Air Humidity Ratio"]

    @minimum_cooling_supply_air_humidity_ratio.setter
    def minimum_cooling_supply_air_humidity_ratio(self, value=0.0077 ):
        """  Corresponds to IDD Field `minimum_cooling_supply_air_humidity_ratio`

        Args:
            value (float): value for IDD Field `minimum_cooling_supply_air_humidity_ratio`
                Units: kgWater/kgDryAir
                Default value: 0.0077
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_supply_air_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_cooling_supply_air_humidity_ratio`')

        self._data["Minimum Cooling Supply Air Humidity Ratio"] = value

    @property
    def heating_limit(self):
        """Get heating_limit

        Returns:
            str: the value of `heating_limit` or None if not set
        """
        return self._data["Heating Limit"]

    @heating_limit.setter
    def heating_limit(self, value="NoLimit"):
        """  Corresponds to IDD Field `heating_limit`

        Args:
            value (str): value for IDD Field `heating_limit`
                Accepted values are:
                      - NoLimit
                      - LimitFlowRate
                      - LimitCapacity
                      - LimitFlowRateAndCapacity
                Default value: NoLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_limit`')
            vals = set()
            vals.add("NoLimit")
            vals.add("LimitFlowRate")
            vals.add("LimitCapacity")
            vals.add("LimitFlowRateAndCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_limit`'.format(value))

        self._data["Heating Limit"] = value

    @property
    def maximum_heating_air_flow_rate(self):
        """Get maximum_heating_air_flow_rate

        Returns:
            float: the value of `maximum_heating_air_flow_rate` or None if not set
        """
        return self._data["Maximum Heating Air Flow Rate"]

    @maximum_heating_air_flow_rate.setter
    def maximum_heating_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_air_flow_rate`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float): value for IDD Field `maximum_heating_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_heating_air_flow_rate`')

        self._data["Maximum Heating Air Flow Rate"] = value

    @property
    def maximum_sensible_heating_capacity(self):
        """Get maximum_sensible_heating_capacity

        Returns:
            float: the value of `maximum_sensible_heating_capacity` or None if not set
        """
        return self._data["Maximum Sensible Heating Capacity"]

    @maximum_sensible_heating_capacity.setter
    def maximum_sensible_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_sensible_heating_capacity`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float): value for IDD Field `maximum_sensible_heating_capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_sensible_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_sensible_heating_capacity`')

        self._data["Maximum Sensible Heating Capacity"] = value

    @property
    def cooling_limit(self):
        """Get cooling_limit

        Returns:
            str: the value of `cooling_limit` or None if not set
        """
        return self._data["Cooling Limit"]

    @cooling_limit.setter
    def cooling_limit(self, value="NoLimit"):
        """  Corresponds to IDD Field `cooling_limit`

        Args:
            value (str): value for IDD Field `cooling_limit`
                Accepted values are:
                      - NoLimit
                      - LimitFlowRate
                      - LimitCapacity
                      - LimitFlowRateAndCapacity
                Default value: NoLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_limit`')
            vals = set()
            vals.add("NoLimit")
            vals.add("LimitFlowRate")
            vals.add("LimitCapacity")
            vals.add("LimitFlowRateAndCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_limit`'.format(value))

        self._data["Cooling Limit"] = value

    @property
    def maximum_cooling_air_flow_rate(self):
        """Get maximum_cooling_air_flow_rate

        Returns:
            float: the value of `maximum_cooling_air_flow_rate` or None if not set
        """
        return self._data["Maximum Cooling Air Flow Rate"]

    @maximum_cooling_air_flow_rate.setter
    def maximum_cooling_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_cooling_air_flow_rate`
        This field is ignored if Cooling Limit = NoLimit
        This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.

        Args:
            value (float): value for IDD Field `maximum_cooling_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cooling_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cooling_air_flow_rate`')

        self._data["Maximum Cooling Air Flow Rate"] = value

    @property
    def maximum_total_cooling_capacity(self):
        """Get maximum_total_cooling_capacity

        Returns:
            float: the value of `maximum_total_cooling_capacity` or None if not set
        """
        return self._data["Maximum Total Cooling Capacity"]

    @maximum_total_cooling_capacity.setter
    def maximum_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_total_cooling_capacity`
        This field is ignored if Cooling Limit = NoLimit

        Args:
            value (float): value for IDD Field `maximum_total_cooling_capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_total_cooling_capacity`')

        self._data["Maximum Total Cooling Capacity"] = value

    @property
    def heating_availability_schedule_name(self):
        """Get heating_availability_schedule_name

        Returns:
            str: the value of `heating_availability_schedule_name` or None if not set
        """
        return self._data["Heating Availability Schedule Name"]

    @heating_availability_schedule_name.setter
    def heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_availability_schedule_name`
        If blank, heating is always available.

        Args:
            value (str): value for IDD Field `heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_availability_schedule_name`')

        self._data["Heating Availability Schedule Name"] = value

    @property
    def cooling_availability_schedule_name(self):
        """Get cooling_availability_schedule_name

        Returns:
            str: the value of `cooling_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Availability Schedule Name"]

    @cooling_availability_schedule_name.setter
    def cooling_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_availability_schedule_name`
        If blank, cooling is always available.

        Args:
            value (str): value for IDD Field `cooling_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_availability_schedule_name`')

        self._data["Cooling Availability Schedule Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="ConstantSensibleHeatRatio"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        ConstantSensibleHeatRatio means that the ideal loads system
        will be controlled to meet the sensible cooling load, and the
        latent cooling rate will be computed using a constant
        sensible heat ratio (SHR)
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        None means that there is no dehumidification.
        ConstantSupplyHumidityRatio means that during cooling the supply air
        will always be at the Minimum Cooling Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - ConstantSensibleHeatRatio
                      - Humidistat
                      - None
                      - ConstantSupplyHumidityRatio
                Default value: ConstantSensibleHeatRatio
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("ConstantSensibleHeatRatio")
            vals.add("Humidistat")
            vals.add("None")
            vals.add("ConstantSupplyHumidityRatio")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def cooling_sensible_heat_ratio(self):
        """Get cooling_sensible_heat_ratio

        Returns:
            float: the value of `cooling_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Sensible Heat Ratio"]

    @cooling_sensible_heat_ratio.setter
    def cooling_sensible_heat_ratio(self, value=0.7 ):
        """  Corresponds to IDD Field `cooling_sensible_heat_ratio`
        This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio

        Args:
            value (float): value for IDD Field `cooling_sensible_heat_ratio`
                Units: dimensionless
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_sensible_heat_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_sensible_heat_ratio`')

        self._data["Cooling Sensible Heat Ratio"] = value

    @property
    def dehumidification_setpoint(self):
        """Get dehumidification_setpoint

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self._data["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `dehumidification_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_setpoint`')

        self._data["Dehumidification Setpoint"] = value

    @property
    def humidification_control_type(self):
        """Get humidification_control_type

        Returns:
            str: the value of `humidification_control_type` or None if not set
        """
        return self._data["Humidification Control Type"]

    @humidification_control_type.setter
    def humidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `humidification_control_type`
        None means that there is no humidification.
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        ConstantSupplyHumidityRatio means that during heating the supply air
        will always be at the Maximum Heating Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `humidification_control_type`
                Accepted values are:
                      - None
                      - Humidistat
                      - ConstantSupplyHumidityRatio
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Humidistat")
            vals.add("ConstantSupplyHumidityRatio")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidification_control_type`'.format(value))

        self._data["Humidification Control Type"] = value

    @property
    def humidification_setpoint(self):
        """Get humidification_setpoint

        Returns:
            float: the value of `humidification_setpoint` or None if not set
        """
        return self._data["Humidification Setpoint"]

    @humidification_setpoint.setter
    def humidification_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidification_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `humidification_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidification_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidification_setpoint`')

        self._data["Humidification Setpoint"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="None"):
        """  Corresponds to IDD Field `outdoor_air_method`
        None means there is no outdoor air and all related fields will be ignored
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - None
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("None")
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        When the name of a DesignSpecification:OutdoorAir object is entered, the minimum
        outdoor air flow rate will be computed using these specifications. The outdoor air
        flow rate will also be affected by the next two fields.
        If this field is blank, there will be no outdoor air and the remaining fields will
        be ignored.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def demand_controlled_ventilation_type(self):
        """Get demand_controlled_ventilation_type

        Returns:
            str: the value of `demand_controlled_ventilation_type` or None if not set
        """
        return self._data["Demand Controlled Ventilation Type"]

    @demand_controlled_ventilation_type.setter
    def demand_controlled_ventilation_type(self, value="None"):
        """  Corresponds to IDD Field `demand_controlled_ventilation_type`
        This field controls how the minimum outdoor air flow rate is calculated.
        None means that design occupancy will be uased to compute the minimum outdoor air flow rate
        OccupancySchedule means that current occupancy level will be used.
        CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow
        reate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon
        dioxide setpoint defined in a ZoneControl:ContaminantController object.

        Args:
            value (str): value for IDD Field `demand_controlled_ventilation_type`
                Accepted values are:
                      - None
                      - OccupancySchedule
                      - CO2Setpoint
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_controlled_ventilation_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_controlled_ventilation_type`')
            vals = set()
            vals.add("None")
            vals.add("OccupancySchedule")
            vals.add("CO2Setpoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_controlled_ventilation_type`'.format(value))

        self._data["Demand Controlled Ventilation Type"] = value

    @property
    def outdoor_air_economizer_type(self):
        """Get outdoor_air_economizer_type

        Returns:
            str: the value of `outdoor_air_economizer_type` or None if not set
        """
        return self._data["Outdoor Air Economizer Type"]

    @outdoor_air_economizer_type.setter
    def outdoor_air_economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `outdoor_air_economizer_type`
        DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate
        when there is a cooling load and the outdoor air temperature or enthalpy
        is below the zone exhaust air temperature or enthalpy.

        Args:
            value (str): value for IDD Field `outdoor_air_economizer_type`
                Accepted values are:
                      - NoEconomizer
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_economizer_type`')
            vals = set()
            vals.add("NoEconomizer")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_economizer_type`'.format(value))

        self._data["Outdoor Air Economizer Type"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Units: dimensionless
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`
        Applicable only if Heat Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Units: dimensionless
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.maximum_heating_supply_air_temperature))
        out.append(self._to_str(self.minimum_cooling_supply_air_temperature))
        out.append(self._to_str(self.maximum_heating_supply_air_humidity_ratio))
        out.append(self._to_str(self.minimum_cooling_supply_air_humidity_ratio))
        out.append(self._to_str(self.heating_limit))
        out.append(self._to_str(self.maximum_heating_air_flow_rate))
        out.append(self._to_str(self.maximum_sensible_heating_capacity))
        out.append(self._to_str(self.cooling_limit))
        out.append(self._to_str(self.maximum_cooling_air_flow_rate))
        out.append(self._to_str(self.maximum_total_cooling_capacity))
        out.append(self._to_str(self.heating_availability_schedule_name))
        out.append(self._to_str(self.cooling_availability_schedule_name))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.cooling_sensible_heat_ratio))
        out.append(self._to_str(self.dehumidification_setpoint))
        out.append(self._to_str(self.humidification_control_type))
        out.append(self._to_str(self.humidification_setpoint))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.demand_controlled_ventilation_type))
        out.append(self._to_str(self.outdoor_air_economizer_type))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        return ",".join(out)

class HvactemplateZoneBaseboardHeat(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:BaseboardHeat`
        Zone baseboard heating system.
    
    """
    internal_name = "HVACTemplate:Zone:BaseboardHeat"
    field_count = 13
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:BaseboardHeat`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="HotWater"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                Default value: HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        return ",".join(out)

class HvactemplateZoneFanCoil(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:FanCoil`
        4 pipe fan coil unit with optional outdoor air.
    
    """
    internal_name = "HVACTemplate:Zone:FanCoil"
    field_count = 34
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:FanCoil`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Design Setpoint"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Capacity Control Method"] = None
        self._data["Low Speed Supply Air Flow Ratio"] = None
        self._data["Medium Speed Supply Air Flow Ratio"] = None
        self._data["Outdoor Air Schedule Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint = None
        else:
            self.cooling_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_control_method = None
        else:
            self.capacity_control_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_speed_supply_air_flow_ratio = None
        else:
            self.low_speed_supply_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.medium_speed_supply_air_flow_ratio = None
        else:
            self.medium_speed_supply_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_schedule_name = None
        else:
            self.outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                Default value: ChilledWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """Get cooling_coil_design_setpoint

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=14.0 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint`
        Used for sizing when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint`
                Units: C
                Default value: 14.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint`'.format(value))

        self._data["Cooling Coil Design Setpoint"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                Default value: HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above)
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above)
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def capacity_control_method(self):
        """Get capacity_control_method

        Returns:
            str: the value of `capacity_control_method` or None if not set
        """
        return self._data["Capacity Control Method"]

    @capacity_control_method.setter
    def capacity_control_method(self, value=None):
        """  Corresponds to IDD Field `capacity_control_method`
        If this field is left blank, it will default to CyclingFan if a Dedicated Outdoor Air
        System is specified (see above), otherwise it will default to ConstantFanVariableFlow.

        Args:
            value (str): value for IDD Field `capacity_control_method`
                Accepted values are:
                      - ConstantFanVariableFlow
                      - CyclingFan
                      - VariableFanVariableFlow
                      - VariableFanConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_control_method`')
            vals = set()
            vals.add("ConstantFanVariableFlow")
            vals.add("CyclingFan")
            vals.add("VariableFanVariableFlow")
            vals.add("VariableFanConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `capacity_control_method`'.format(value))

        self._data["Capacity Control Method"] = value

    @property
    def low_speed_supply_air_flow_ratio(self):
        """Get low_speed_supply_air_flow_ratio

        Returns:
            float: the value of `low_speed_supply_air_flow_ratio` or None if not set
        """
        return self._data["Low Speed Supply Air Flow Ratio"]

    @low_speed_supply_air_flow_ratio.setter
    def low_speed_supply_air_flow_ratio(self, value=0.33 ):
        """  Corresponds to IDD Field `low_speed_supply_air_flow_ratio`

        Args:
            value (float): value for IDD Field `low_speed_supply_air_flow_ratio`
                Default value: 0.33
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_supply_air_flow_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_supply_air_flow_ratio`')

        self._data["Low Speed Supply Air Flow Ratio"] = value

    @property
    def medium_speed_supply_air_flow_ratio(self):
        """Get medium_speed_supply_air_flow_ratio

        Returns:
            float: the value of `medium_speed_supply_air_flow_ratio` or None if not set
        """
        return self._data["Medium Speed Supply Air Flow Ratio"]

    @medium_speed_supply_air_flow_ratio.setter
    def medium_speed_supply_air_flow_ratio(self, value=0.66 ):
        """  Corresponds to IDD Field `medium_speed_supply_air_flow_ratio`
        Medium Speed Supply Air Flow Ratio should be greater
        than Low Speed Supply Air Flow Ratio

        Args:
            value (float): value for IDD Field `medium_speed_supply_air_flow_ratio`
                Default value: 0.66
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `medium_speed_supply_air_flow_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `medium_speed_supply_air_flow_ratio`')

        self._data["Medium Speed Supply Air Flow Ratio"] = value

    @property
    def outdoor_air_schedule_name(self):
        """Get outdoor_air_schedule_name

        Returns:
            str: the value of `outdoor_air_schedule_name` or None if not set
        """
        return self._data["Outdoor Air Schedule Name"]

    @outdoor_air_schedule_name.setter
    def outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_schedule_name`
        Value of schedule multiplies maximum outdoor air flow rate
        This schedule is ignored if this zone is served by an HVACTemplate dedicated outdoor
        air system.

        Args:
            value (str): value for IDD Field `outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_schedule_name`')

        self._data["Outdoor Air Schedule Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.capacity_control_method))
        out.append(self._to_str(self.low_speed_supply_air_flow_ratio))
        out.append(self._to_str(self.medium_speed_supply_air_flow_ratio))
        out.append(self._to_str(self.outdoor_air_schedule_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        return ",".join(out)

class HvactemplateZonePtac(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:PTAC`
        Packaged Terminal Air Conditioner
    
    """
    internal_name = "HVACTemplate:Zone:PTAC"
    field_count = 39
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:PTAC`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Cooling Supply Air Flow Rate"] = None
        self._data["Heating Supply Air Flow Rate"] = None
        self._data["No Load Supply Air Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated Cooling COP"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_supply_air_flow_rate = None
        else:
            self.cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_supply_air_flow_rate = None
        else:
            self.heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.no_load_supply_air_flow_rate = None
        else:
            self.no_load_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cooling_cop = None
        else:
            self.cooling_coil_gross_rated_cooling_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_capacity = None
        else:
            self.heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """Get cooling_supply_air_flow_rate

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cooling_supply_air_flow_rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `cooling_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_supply_air_flow_rate`')

        self._data["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """Get heating_supply_air_flow_rate

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heating_supply_air_flow_rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `heating_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_supply_air_flow_rate`')

        self._data["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """Get no_load_supply_air_flow_rate

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self._data["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `no_load_supply_air_flow_rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float): value for IDD Field `no_load_supply_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `no_load_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `no_load_supply_air_flow_rate`')

        self._data["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule Name values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - SingleSpeedDX
                Default value: SingleSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("SingleSpeedDX")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_total_capacity`')

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cooling_cop(self):
        """Get cooling_coil_gross_rated_cooling_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Cooling COP"]

    @cooling_coil_gross_rated_cooling_cop.setter
    def cooling_coil_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cooling_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cooling_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cooling_cop`')

        self._data["Cooling Coil Gross Rated Cooling COP"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="Electric"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - Electric
                      - HotWater
                      - Gas
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("HotWater")
            vals.add("Gas")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_capacity(self):
        """Get heating_coil_capacity

        Returns:
            float: the value of `heating_coil_capacity` or None if not set
        """
        return self._data["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_capacity`

        Args:
            value (float): value for IDD Field `heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_capacity`'.format(value))

        self._data["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`
        Applies only if Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`
        Applies only if Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 14.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.cooling_supply_air_flow_rate))
        out.append(self._to_str(self.heating_supply_air_flow_rate))
        out.append(self._to_str(self.no_load_supply_air_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cooling_cop))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        return ",".join(out)

class HvactemplateZonePthp(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:PTHP`
        Packaged Terminal Heat Pump
    
    """
    internal_name = "HVACTemplate:Zone:PTHP"
    field_count = 49
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:PTHP`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Cooling Supply Air Flow Rate"] = None
        self._data["Heating Supply Air Flow Rate"] = None
        self._data["No Load Supply Air Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated COP"] = None
        self._data["Heat Pump Heating Coil Type"] = None
        self._data["Heat Pump Heating Coil Availability Schedule Name"] = None
        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = None
        self._data["Heat Pump Heating Coil Gross Rated COP"] = None
        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Strategy"] = None
        self._data["Heat Pump Defrost Control"] = None
        self._data["Heat Pump Defrost Time Period Fraction"] = None
        self._data["Supplemental Heating Coil Type"] = None
        self._data["Supplemental Heating Coil Availability Schedule Name"] = None
        self._data["Supplemental Heating Coil Capacity"] = None
        self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Supplemental Gas Heating Coil Efficiency"] = None
        self._data["Supplemental Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_supply_air_flow_rate = None
        else:
            self.cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_supply_air_flow_rate = None
        else:
            self.heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.no_load_supply_air_flow_rate = None
        else:
            self.no_load_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cop = None
        else:
            self.cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_type = None
        else:
            self.heat_pump_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_availability_schedule_name = None
        else:
            self.heat_pump_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_capacity = None
        else:
            self.heat_pump_heating_coil_gross_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_cop = None
        else:
            self.heat_pump_heating_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_strategy = None
        else:
            self.heat_pump_defrost_strategy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_control = None
        else:
            self.heat_pump_defrost_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_time_period_fraction = None
        else:
            self.heat_pump_defrost_time_period_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_type = None
        else:
            self.supplemental_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_availability_schedule_name = None
        else:
            self.supplemental_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_capacity = None
        else:
            self.supplemental_heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature = None
        else:
            self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_coil_efficiency = None
        else:
            self.supplemental_gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_coil_parasitic_electric_load = None
        else:
            self.supplemental_gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """Get cooling_supply_air_flow_rate

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cooling_supply_air_flow_rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `cooling_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_supply_air_flow_rate`')

        self._data["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """Get heating_supply_air_flow_rate

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heating_supply_air_flow_rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `heating_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_supply_air_flow_rate`')

        self._data["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """Get no_load_supply_air_flow_rate

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self._data["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `no_load_supply_air_flow_rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float): value for IDD Field `no_load_supply_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `no_load_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `no_load_supply_air_flow_rate`')

        self._data["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - SingleSpeedDX
                Default value: SingleSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("SingleSpeedDX")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_total_capacity`')

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """Get cooling_coil_gross_rated_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cop`')

        self._data["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """Get heat_pump_heating_coil_type

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set
        """
        return self._data["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="SingleSpeedDXHeatPump"):
        """  Corresponds to IDD Field `heat_pump_heating_coil_type`

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_type`
                Accepted values are:
                      - SingleSpeedDXHeatPump
                Default value: SingleSpeedDXHeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_type`')
            vals = set()
            vals.add("SingleSpeedDXHeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_heating_coil_type`'.format(value))

        self._data["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """Get heat_pump_heating_coil_availability_schedule_name

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`')

        self._data["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """Get heat_pump_heating_coil_gross_rated_capacity

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_capacity`
        Capacity excluding supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`')

        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """Get heat_pump_heating_coil_gross_rated_cop

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=2.75 ):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_cop`
        Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        Does not include supply air fan heat or supply air fan electrical energy
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_cop`
                Units: W/W
                Default value: 2.75
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`')

        self._data["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """Get heat_pump_heating_minimum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self, value=-8.0 ):
        """  Corresponds to IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`
                Units: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """Get heat_pump_defrost_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0 ):
        """  Corresponds to IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """Get heat_pump_defrost_strategy

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set
        """
        return self._data["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `heat_pump_defrost_strategy`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_strategy`')
            vals = set()
            vals.add("ReverseCycle")
            vals.add("Resistive")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_strategy`'.format(value))

        self._data["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """Get heat_pump_defrost_control

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set
        """
        return self._data["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `heat_pump_defrost_control`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_control`')
            vals = set()
            vals.add("Timed")
            vals.add("OnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_control`'.format(value))

        self._data["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """Get heat_pump_defrost_time_period_fraction

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set
        """
        return self._data["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `heat_pump_defrost_time_period_fraction`
        Fraction of time in defrost mode
        only applicable if Timed defrost control is specified

        Args:
            value (float): value for IDD Field `heat_pump_defrost_time_period_fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_time_period_fraction`')

        self._data["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_coil_type(self):
        """Get supplemental_heating_coil_type

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """  Corresponds to IDD Field `supplemental_heating_coil_type`

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - HotWater
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_type`'.format(value))

        self._data["Supplemental Heating Coil Type"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """Get supplemental_heating_coil_availability_schedule_name

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_availability_schedule_name`')

        self._data["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """Get supplemental_heating_coil_capacity

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set
        """
        return self._data["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_capacity`

        Args:
            value (float): value for IDD Field `supplemental_heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_coil_capacity`'.format(value))

        self._data["Supplemental Heating Coil Capacity"] = value

    @property
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self):
        """Get supplemental_heating_coil_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `supplemental_heating_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self, value=21.0 ):
        """  Corresponds to IDD Field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`')

        self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_coil_efficiency(self):
        """Get supplemental_gas_heating_coil_efficiency

        Returns:
            float: the value of `supplemental_gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Supplemental Gas Heating Coil Efficiency"]

    @supplemental_gas_heating_coil_efficiency.setter
    def supplemental_gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_coil_efficiency`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supplemental_gas_heating_coil_efficiency`')

        self._data["Supplemental Gas Heating Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_coil_parasitic_electric_load(self):
        """Get supplemental_gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `supplemental_gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Supplemental Gas Heating Coil Parasitic Electric Load"]

    @supplemental_gas_heating_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_coil_parasitic_electric_load`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_coil_parasitic_electric_load`')

        self._data["Supplemental Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 14.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.cooling_supply_air_flow_rate))
        out.append(self._to_str(self.heating_supply_air_flow_rate))
        out.append(self._to_str(self.no_load_supply_air_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_coil_type))
        out.append(self._to_str(self.heat_pump_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_capacity))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_minimum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_strategy))
        out.append(self._to_str(self.heat_pump_defrost_control))
        out.append(self._to_str(self.heat_pump_defrost_time_period_fraction))
        out.append(self._to_str(self.supplemental_heating_coil_type))
        out.append(self._to_str(self.supplemental_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.supplemental_heating_coil_capacity))
        out.append(self._to_str(self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.supplemental_gas_heating_coil_efficiency))
        out.append(self._to_str(self.supplemental_gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        return ",".join(out)

class HvactemplateZoneWaterToAirHeatPump(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:WaterToAirHeatPump`
        Water to Air Heat Pump to be used with HVACTemplate:Plant:MixedWaterLoop
    
    """
    internal_name = "HVACTemplate:Zone:WaterToAirHeatPump"
    field_count = 44
    required_fields = ["Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:WaterToAirHeatPump`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Cooling Supply Air Flow Rate"] = None
        self._data["Heating Supply Air Flow Rate"] = None
        self._data["No Load Supply Air Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated COP"] = None
        self._data["Heat Pump Heating Coil Type"] = None
        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = None
        self._data["Heat Pump Heating Coil Gross Rated COP"] = None
        self._data["Supplemental Heating Coil Availability Schedule Name"] = None
        self._data["Supplemental Heating Coil Capacity"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Heat Pump Time Constant"] = None
        self._data["Fraction of On-Cycle Power Use"] = None
        self._data["Heat Pump Fan Delay Time"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Supplemental Heating Coil Type"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Heat Pump Coil Water Flow Mode"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_supply_air_flow_rate = None
        else:
            self.cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_supply_air_flow_rate = None
        else:
            self.heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.no_load_supply_air_flow_rate = None
        else:
            self.no_load_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cop = None
        else:
            self.cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_type = None
        else:
            self.heat_pump_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_capacity = None
        else:
            self.heat_pump_heating_coil_gross_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_cop = None
        else:
            self.heat_pump_heating_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_availability_schedule_name = None
        else:
            self.supplemental_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_capacity = None
        else:
            self.supplemental_heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_time_constant = None
        else:
            self.heat_pump_time_constant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_oncycle_power_use = None
        else:
            self.fraction_of_oncycle_power_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_fan_delay_time = None
        else:
            self.heat_pump_fan_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_type = None
        else:
            self.supplemental_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_coil_water_flow_mode = None
        else:
            self.heat_pump_coil_water_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """Get cooling_supply_air_flow_rate

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cooling_supply_air_flow_rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `cooling_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_supply_air_flow_rate`')

        self._data["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """Get heating_supply_air_flow_rate

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heating_supply_air_flow_rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `heating_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_supply_air_flow_rate`')

        self._data["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """Get no_load_supply_air_flow_rate

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self._data["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `no_load_supply_air_flow_rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float): value for IDD Field `no_load_supply_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `no_load_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `no_load_supply_air_flow_rate`')

        self._data["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="Coil:Cooling:WaterToAirHeatPump:EquationFit"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - Coil:Cooling:WaterToAirHeatPump:EquationFit
                Default value: Coil:Cooling:WaterToAirHeatPump:EquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("Coil:Cooling:WaterToAirHeatPump:EquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_total_capacity`')

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """Get cooling_coil_gross_rated_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.5 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electric power input

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.5
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cop`')

        self._data["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """Get heat_pump_heating_coil_type

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set
        """
        return self._data["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="Coil:Heating:WaterToAirHeatPump:EquationFit"):
        """  Corresponds to IDD Field `heat_pump_heating_coil_type`

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_type`
                Accepted values are:
                      - Coil:Heating:WaterToAirHeatPump:EquationFit
                Default value: Coil:Heating:WaterToAirHeatPump:EquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_type`')
            vals = set()
            vals.add("Coil:Heating:WaterToAirHeatPump:EquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_heating_coil_type`'.format(value))

        self._data["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """Get heat_pump_heating_coil_gross_rated_capacity

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_capacity`
        Capacity excluding supply air fan heat

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`')

        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """Get heat_pump_heating_coil_gross_rated_cop

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=4.2 ):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_cop`
        Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electric power input

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_cop`
                Units: W/W
                Default value: 4.2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`')

        self._data["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """Get supplemental_heating_coil_availability_schedule_name

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_availability_schedule_name`')

        self._data["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """Get supplemental_heating_coil_capacity

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set
        """
        return self._data["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_capacity`

        Args:
            value (float): value for IDD Field `supplemental_heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_coil_capacity`'.format(value))

        self._data["Supplemental Heating Coil Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=2.5 ):
        """  Corresponds to IDD Field `maximum_cycling_rate`
        The maximum on-off cycling rate for the compressor
        Suggested value is 2.5 for a typical heat pump

        Args:
            value (float): value for IDD Field `maximum_cycling_rate`
                Units: cycles/hr
                Default value: 2.5
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')

        self._data["Maximum Cycling Rate"] = value

    @property
    def heat_pump_time_constant(self):
        """Get heat_pump_time_constant

        Returns:
            float: the value of `heat_pump_time_constant` or None if not set
        """
        return self._data["Heat Pump Time Constant"]

    @heat_pump_time_constant.setter
    def heat_pump_time_constant(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_time_constant`
        Time constant for the cooling coil's capacity to reach steady state after startup
        Suggested value is 60 for a typical heat pump

        Args:
            value (float): value for IDD Field `heat_pump_time_constant`
                Units: s
                Default value: 60.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `heat_pump_time_constant`')

        self._data["Heat Pump Time Constant"] = value

    @property
    def fraction_of_oncycle_power_use(self):
        """Get fraction_of_oncycle_power_use

        Returns:
            float: the value of `fraction_of_oncycle_power_use` or None if not set
        """
        return self._data["Fraction of On-Cycle Power Use"]

    @fraction_of_oncycle_power_use.setter
    def fraction_of_oncycle_power_use(self, value=0.01 ):
        """  Corresponds to IDD Field `fraction_of_oncycle_power_use`
        The fraction of on-cycle power use to adjust the part load fraction based on
        the off-cycle power consumption due to crankcase heaters, controls, fans, and etc.
        Suggested value is 0.01 for a typical heat pump

        Args:
            value (float): value for IDD Field `fraction_of_oncycle_power_use`
                Default value: 0.01
                value >= 0.0
                value <= 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_oncycle_power_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_oncycle_power_use`')
            if value > 0.05:
                raise ValueError('value need to be smaller 0.05 '
                                 'for field `fraction_of_oncycle_power_use`')

        self._data["Fraction of On-Cycle Power Use"] = value

    @property
    def heat_pump_fan_delay_time(self):
        """Get heat_pump_fan_delay_time

        Returns:
            float: the value of `heat_pump_fan_delay_time` or None if not set
        """
        return self._data["Heat Pump Fan Delay Time"]

    @heat_pump_fan_delay_time.setter
    def heat_pump_fan_delay_time(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_fan_delay_time`
        Programmed time delay for heat pump fan to shut off after compressor cycle off.
        Only required when fan operating mode is cycling
        Enter 0 when fan operating mode is continuous

        Args:
            value (float): value for IDD Field `heat_pump_fan_delay_time`
                Units: s
                Default value: 60.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_fan_delay_time`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_fan_delay_time`')

        self._data["Heat Pump Fan Delay Time"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def supplemental_heating_coil_type(self):
        """Get supplemental_heating_coil_type

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """  Corresponds to IDD Field `supplemental_heating_coil_type`

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_type`
                Accepted values are:
                      - Electric
                      - HotWater
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_type`'.format(value))

        self._data["Supplemental Heating Coil Type"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 14.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def heat_pump_coil_water_flow_mode(self):
        """Get heat_pump_coil_water_flow_mode

        Returns:
            str: the value of `heat_pump_coil_water_flow_mode` or None if not set
        """
        return self._data["Heat Pump Coil Water Flow Mode"]

    @heat_pump_coil_water_flow_mode.setter
    def heat_pump_coil_water_flow_mode(self, value="Cycling"):
        """  Corresponds to IDD Field `heat_pump_coil_water_flow_mode`
        used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit
        Constant results in 100% water flow regardless of compressor PLR
        Cycling results in water flow that matches compressor PLR
        ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load

        Args:
            value (str): value for IDD Field `heat_pump_coil_water_flow_mode`
                Accepted values are:
                      - Constant
                      - Cycling
                      - ConstantOnDemand
                Default value: Cycling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_coil_water_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_coil_water_flow_mode`')
            vals = set()
            vals.add("Constant")
            vals.add("Cycling")
            vals.add("ConstantOnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_coil_water_flow_mode`'.format(value))

        self._data["Heat Pump Coil Water Flow Mode"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.cooling_supply_air_flow_rate))
        out.append(self._to_str(self.heating_supply_air_flow_rate))
        out.append(self._to_str(self.no_load_supply_air_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_coil_type))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_capacity))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_cop))
        out.append(self._to_str(self.supplemental_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.supplemental_heating_coil_capacity))
        out.append(self._to_str(self.maximum_cycling_rate))
        out.append(self._to_str(self.heat_pump_time_constant))
        out.append(self._to_str(self.fraction_of_oncycle_power_use))
        out.append(self._to_str(self.heat_pump_fan_delay_time))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.supplemental_heating_coil_type))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.heat_pump_coil_water_flow_mode))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        return ",".join(out)

class HvactemplateZoneVrf(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:VRF`
        Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils
        (air-to-air or water-to-air heat pump). The VRF terminal units are served by an
        HVACTemplate:System:VRF system.
    
    """
    internal_name = "HVACTemplate:Zone:VRF"
    field_count = 44
    required_fields = ["Zone Name", "Template VRF System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:VRF`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template VRF System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Rated Total Heating Capacity Sizing Ratio"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling is Needed"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Air Fan placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Heat Pump Heating Coil Type"] = None
        self._data["Heat Pump Heating Coil Availability Schedule Name"] = None
        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = None
        self._data["Zone Terminal Unit On Parasitic Electric Energy Use"] = None
        self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"] = None
        self._data["Dedicated Outdoor Air System Name"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_vrf_system_name = None
        else:
            self.template_vrf_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_heating_capacity_sizing_ratio = None
        else:
            self.rated_total_heating_capacity_sizing_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_placement = None
        else:
            self.supply_air_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_type = None
        else:
            self.heat_pump_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_availability_schedule_name = None
        else:
            self.heat_pump_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_capacity = None
        else:
            self.heat_pump_heating_coil_gross_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_terminal_unit_on_parasitic_electric_energy_use = None
        else:
            self.zone_terminal_unit_on_parasitic_electric_energy_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_terminal_unit_off_parasitic_electric_energy_use = None
        else:
            self.zone_terminal_unit_off_parasitic_electric_energy_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dedicated_outdoor_air_system_name = None
        else:
            self.dedicated_outdoor_air_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_vrf_system_name(self):
        """Get template_vrf_system_name

        Returns:
            str: the value of `template_vrf_system_name` or None if not set
        """
        return self._data["Template VRF System Name"]

    @template_vrf_system_name.setter
    def template_vrf_system_name(self, value=None):
        """  Corresponds to IDD Field `template_vrf_system_name`
        Name of a HVACTemplate:System:VRF object serving this zone

        Args:
            value (str): value for IDD Field `template_vrf_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_vrf_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_vrf_system_name`')

        self._data["Template VRF System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def rated_total_heating_capacity_sizing_ratio(self):
        """Get rated_total_heating_capacity_sizing_ratio

        Returns:
            float: the value of `rated_total_heating_capacity_sizing_ratio` or None if not set
        """
        return self._data["Rated Total Heating Capacity Sizing Ratio"]

    @rated_total_heating_capacity_sizing_ratio.setter
    def rated_total_heating_capacity_sizing_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `rated_total_heating_capacity_sizing_ratio`
        If this terminal unit's heating coil is autosized, the heating capacity is sized
        to be equal to the cooling capacity multiplied by this sizing ratio.
        This input applies to the terminal unit heating coil and overrides the sizing
        ratio entered in the HVACTemplate:System:VRF object.

        Args:
            value (float): value for IDD Field `rated_total_heating_capacity_sizing_ratio`
                Units: W/W
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_total_heating_capacity_sizing_ratio`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `rated_total_heating_capacity_sizing_ratio`')

        self._data["Rated Total Heating Capacity Sizing Ratio"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling is Needed"]

    @supply_air_flow_rate_when_no_cooling_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_is_needed`
        This flow rate is used when the terminal is not cooling and the previous mode was cooling.
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_is_needed`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling is Needed"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Heating is Needed"]

    @supply_air_flow_rate_when_no_heating_is_needed.setter
    def supply_air_flow_rate_when_no_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_heating_is_needed`
        This flow rate is used when the terminal is not heating and the previous mode was heating.
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_heating_is_needed`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`
        If this field is set to autosize it will be sized based on the outdoor air inputs below,
        unless a dedicated outdoor air system is specified for this zone and then it will be
        set to zero.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`
        If this field is set to autosize it will be sized based on the outdoor air inputs below,
        unless a dedicated outdoor air system is specified for this zone and then it will be
        set to zero.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
        If this field is set to autosize it will be sized based on the outdoor air inputs below,
        unless a dedicated outdoor air system is specified for this zone and then it will be
        set to zero.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_air_fan_placement(self):
        """Get supply_air_fan_placement

        Returns:
            str: the value of `supply_air_fan_placement` or None if not set
        """
        return self._data["Supply Air Fan placement"]

    @supply_air_fan_placement.setter
    def supply_air_fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `supply_air_fan_placement`
        Select fan placement as either blow through or draw through.

        Args:
            value (str): value for IDD Field `supply_air_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_placement`'.format(value))

        self._data["Supply Air Fan placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="VariableRefrigerantFlowDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - VariableRefrigerantFlowDX
                      - None
                Default value: VariableRefrigerantFlowDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("VariableRefrigerantFlowDX")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_total_capacity`')

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """Get heat_pump_heating_coil_type

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set
        """
        return self._data["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="VariableRefrigerantFlowDX"):
        """  Corresponds to IDD Field `heat_pump_heating_coil_type`

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_type`
                Accepted values are:
                      - VariableRefrigerantFlowDX
                      - None
                Default value: VariableRefrigerantFlowDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_type`')
            vals = set()
            vals.add("VariableRefrigerantFlowDX")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_heating_coil_type`'.format(value))

        self._data["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """Get heat_pump_heating_coil_availability_schedule_name

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`')

        self._data["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """Get heat_pump_heating_coil_gross_rated_capacity

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_capacity`
        Capacity excluding supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`')

        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def zone_terminal_unit_on_parasitic_electric_energy_use(self):
        """Get zone_terminal_unit_on_parasitic_electric_energy_use

        Returns:
            float: the value of `zone_terminal_unit_on_parasitic_electric_energy_use` or None if not set
        """
        return self._data["Zone Terminal Unit On Parasitic Electric Energy Use"]

    @zone_terminal_unit_on_parasitic_electric_energy_use.setter
    def zone_terminal_unit_on_parasitic_electric_energy_use(self, value=0.0 ):
        """  Corresponds to IDD Field `zone_terminal_unit_on_parasitic_electric_energy_use`

        Args:
            value (float): value for IDD Field `zone_terminal_unit_on_parasitic_electric_energy_use`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_terminal_unit_on_parasitic_electric_energy_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_terminal_unit_on_parasitic_electric_energy_use`')

        self._data["Zone Terminal Unit On Parasitic Electric Energy Use"] = value

    @property
    def zone_terminal_unit_off_parasitic_electric_energy_use(self):
        """Get zone_terminal_unit_off_parasitic_electric_energy_use

        Returns:
            float: the value of `zone_terminal_unit_off_parasitic_electric_energy_use` or None if not set
        """
        return self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"]

    @zone_terminal_unit_off_parasitic_electric_energy_use.setter
    def zone_terminal_unit_off_parasitic_electric_energy_use(self, value=0.0 ):
        """  Corresponds to IDD Field `zone_terminal_unit_off_parasitic_electric_energy_use`

        Args:
            value (float): value for IDD Field `zone_terminal_unit_off_parasitic_electric_energy_use`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_terminal_unit_off_parasitic_electric_energy_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_terminal_unit_off_parasitic_electric_energy_use`')

        self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """Get dedicated_outdoor_air_system_name

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self._data["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """  Corresponds to IDD Field `dedicated_outdoor_air_system_name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `dedicated_outdoor_air_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dedicated_outdoor_air_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dedicated_outdoor_air_system_name`')

        self._data["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 14.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_vrf_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.rated_total_heating_capacity_sizing_ratio))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_is_needed))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_air_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.heat_pump_heating_coil_type))
        out.append(self._to_str(self.heat_pump_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_capacity))
        out.append(self._to_str(self.zone_terminal_unit_on_parasitic_electric_energy_use))
        out.append(self._to_str(self.zone_terminal_unit_off_parasitic_electric_energy_use))
        out.append(self._to_str(self.dedicated_outdoor_air_system_name))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        return ",".join(out)

class HvactemplateZoneUnitary(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:Unitary`
        Zone terminal unit, constant volume, no controls.
    
    """
    internal_name = "HVACTemplate:Zone:Unitary"
    field_count = 23
    required_fields = ["Zone Name", "Template Unitary System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:Unitary`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Unitary System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_unitary_system_name = None
        else:
            self.template_unitary_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_unitary_system_name(self):
        """Get template_unitary_system_name

        Returns:
            str: the value of `template_unitary_system_name` or None if not set
        """
        return self._data["Template Unitary System Name"]

    @template_unitary_system_name.setter
    def template_unitary_system_name(self, value=None):
        """  Corresponds to IDD Field `template_unitary_system_name`
        Enter the name of an HVACTemplate:System:Unitary, HVACTemplate:System:UnitaryHeatPump:AirTtoAir,
        or HVACTemplate:System:UnitarySystem object serving this zone.

        Args:
            value (str): value for IDD Field `template_unitary_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_unitary_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_unitary_system_name`')

        self._data["Template Unitary System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir
        Cooling Design Supply Air Temperature

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir
        Heating Design Supply Air Temperature

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_unitary_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        return ",".join(out)

class HvactemplateZoneVav(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:VAV`
        Zone terminal unit, variable volume, reheat optional.
        For heating, this unit activates reheat coil first, then increases airflow (if reverse
        action specified).
    
    """
    internal_name = "HVACTemplate:Zone:VAV"
    field_count = 34
    required_fields = ["Zone Name", "Template VAV System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:VAV`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template VAV System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Zone Minimum Air Flow Input Method"] = None
        self._data["Constant Minimum Air Flow Fraction"] = None
        self._data["Fixed Minimum Air Flow Rate"] = None
        self._data["Minimum Air Flow Fraction Schedule Name"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Reheat Coil Type"] = None
        self._data["Reheat Coil Availability Schedule Name"] = None
        self._data["Damper Heating Action"] = None
        self._data["Maximum Flow per Zone Floor Area During Reheat"] = None
        self._data["Maximum Flow Fraction During Reheat"] = None
        self._data["Maximum Reheat Air Temperature"] = None
        self._data["Design Specification Outdoor Air Object Name for Control"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Design Specification Outdoor Air Object Name for Sizing"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_vav_system_name = None
        else:
            self.template_vav_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_minimum_air_flow_input_method = None
        else:
            self.zone_minimum_air_flow_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_minimum_air_flow_fraction = None
        else:
            self.constant_minimum_air_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fixed_minimum_air_flow_rate = None
        else:
            self.fixed_minimum_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_air_flow_fraction_schedule_name = None
        else:
            self.minimum_air_flow_fraction_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_type = None
        else:
            self.reheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_availability_schedule_name = None
        else:
            self.reheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.damper_heating_action = None
        else:
            self.damper_heating_action = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_flow_per_zone_floor_area_during_reheat = None
        else:
            self.maximum_flow_per_zone_floor_area_during_reheat = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_flow_fraction_during_reheat = None
        else:
            self.maximum_flow_fraction_during_reheat = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_reheat_air_temperature = None
        else:
            self.maximum_reheat_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name_for_control = None
        else:
            self.design_specification_outdoor_air_object_name_for_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name_for_sizing = None
        else:
            self.design_specification_outdoor_air_object_name_for_sizing = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """Get template_vav_system_name

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self._data["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """  Corresponds to IDD Field `template_vav_system_name`
        Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone

        Args:
            value (str): value for IDD Field `template_vav_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_vav_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_vav_system_name`')

        self._data["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def zone_minimum_air_flow_input_method(self):
        """Get zone_minimum_air_flow_input_method

        Returns:
            str: the value of `zone_minimum_air_flow_input_method` or None if not set
        """
        return self._data["Zone Minimum Air Flow Input Method"]

    @zone_minimum_air_flow_input_method.setter
    def zone_minimum_air_flow_input_method(self, value="Constant"):
        """  Corresponds to IDD Field `zone_minimum_air_flow_input_method`
        Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate)
        FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate)
        Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow

        Args:
            value (str): value for IDD Field `zone_minimum_air_flow_input_method`
                Accepted values are:
                      - Constant
                      - FixedFlowRate
                      - Scheduled
                Default value: Constant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_minimum_air_flow_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_minimum_air_flow_input_method`')
            vals = set()
            vals.add("Constant")
            vals.add("FixedFlowRate")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_minimum_air_flow_input_method`'.format(value))

        self._data["Zone Minimum Air Flow Input Method"] = value

    @property
    def constant_minimum_air_flow_fraction(self):
        """Get constant_minimum_air_flow_fraction

        Returns:
            float: the value of `constant_minimum_air_flow_fraction` or None if not set
        """
        return self._data["Constant Minimum Air Flow Fraction"]

    @constant_minimum_air_flow_fraction.setter
    def constant_minimum_air_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `constant_minimum_air_flow_fraction`
        This field is used if the field Zone Minimum Air Flow Input Method is Constant
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the following field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `constant_minimum_air_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_minimum_air_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constant_minimum_air_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constant_minimum_air_flow_fraction`')

        self._data["Constant Minimum Air Flow Fraction"] = value

    @property
    def fixed_minimum_air_flow_rate(self):
        """Get fixed_minimum_air_flow_rate

        Returns:
            float: the value of `fixed_minimum_air_flow_rate` or None if not set
        """
        return self._data["Fixed Minimum Air Flow Rate"]

    @fixed_minimum_air_flow_rate.setter
    def fixed_minimum_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `fixed_minimum_air_flow_rate`
        This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate.
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the previous field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `fixed_minimum_air_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fixed_minimum_air_flow_rate`'.format(value))

        self._data["Fixed Minimum Air Flow Rate"] = value

    @property
    def minimum_air_flow_fraction_schedule_name(self):
        """Get minimum_air_flow_fraction_schedule_name

        Returns:
            str: the value of `minimum_air_flow_fraction_schedule_name` or None if not set
        """
        return self._data["Minimum Air Flow Fraction Schedule Name"]

    @minimum_air_flow_fraction_schedule_name.setter
    def minimum_air_flow_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_air_flow_fraction_schedule_name`
        This field is used if the field Zone Minimum Air Flow Input Method is Scheduled
        Schedule values are fractions, 0.0 to 1.0.
        If the field Constant Minimum Air Flow Fraction is blank, then the average of the
        minimum and maximum schedule values is used for sizing normal-action reheat coils.

        Args:
            value (str): value for IDD Field `minimum_air_flow_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_air_flow_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_air_flow_fraction_schedule_name`')

        self._data["Minimum Air Flow Fraction Schedule Name"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def reheat_coil_type(self):
        """Get reheat_coil_type

        Returns:
            str: the value of `reheat_coil_type` or None if not set
        """
        return self._data["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `reheat_coil_type`

        Args:
            value (str): value for IDD Field `reheat_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_type`'.format(value))

        self._data["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """Get reheat_coil_availability_schedule_name

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `reheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_availability_schedule_name`')

        self._data["Reheat Coil Availability Schedule Name"] = value

    @property
    def damper_heating_action(self):
        """Get damper_heating_action

        Returns:
            str: the value of `damper_heating_action` or None if not set
        """
        return self._data["Damper Heating Action"]

    @damper_heating_action.setter
    def damper_heating_action(self, value="Reverse"):
        """  Corresponds to IDD Field `damper_heating_action`

        Args:
            value (str): value for IDD Field `damper_heating_action`
                Accepted values are:
                      - Normal
                      - Reverse
                Default value: Reverse
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `damper_heating_action`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `damper_heating_action`')
            vals = set()
            vals.add("Normal")
            vals.add("Reverse")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `damper_heating_action`'.format(value))

        self._data["Damper Heating Action"] = value

    @property
    def maximum_flow_per_zone_floor_area_during_reheat(self):
        """Get maximum_flow_per_zone_floor_area_during_reheat

        Returns:
            float: the value of `maximum_flow_per_zone_floor_area_during_reheat` or None if not set
        """
        return self._data["Maximum Flow per Zone Floor Area During Reheat"]

    @maximum_flow_per_zone_floor_area_during_reheat.setter
    def maximum_flow_per_zone_floor_area_during_reheat(self, value=None):
        """  Corresponds to IDD Field `maximum_flow_per_zone_floor_area_during_reheat`
        Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse
        When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft)
        This optional field limits the maximum flow allowed in reheat mode.
        If this field and the following field are left blank, the maximum flow will not be limited.
        At no time will the maximum flow rate calculated here exceed the value of
        Maximum Air Flow Rate.

        Args:
            value (float): value for IDD Field `maximum_flow_per_zone_floor_area_during_reheat`
                Units: m3/s-m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_per_zone_floor_area_during_reheat`'.format(value))

        self._data["Maximum Flow per Zone Floor Area During Reheat"] = value

    @property
    def maximum_flow_fraction_during_reheat(self):
        """Get maximum_flow_fraction_during_reheat

        Returns:
            float: the value of `maximum_flow_fraction_during_reheat` or None if not set
        """
        return self._data["Maximum Flow Fraction During Reheat"]

    @maximum_flow_fraction_during_reheat.setter
    def maximum_flow_fraction_during_reheat(self, value=None):
        """  Corresponds to IDD Field `maximum_flow_fraction_during_reheat`
        Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse
        When autocalculating, the maximum flow fraction is set to the ratio of
        0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the
        Maximum Air Flow Rate.
        This optional field limits the maximum flow allowed in reheat mode.
        If this field and the previous field are left blank, the maximum flow will not be limited.
        At no time will the maximum flow rate calculated here exceed the value of
        Maximum Air Flow Rate.

        Args:
            value (float): value for IDD Field `maximum_flow_fraction_during_reheat`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_fraction_during_reheat`'.format(value))

        self._data["Maximum Flow Fraction During Reheat"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """Get maximum_reheat_air_temperature

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set
        """
        return self._data["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_reheat_air_temperature`
        Specifies the maximum allowable supply air temperature leaving the reheat coil.
        If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.

        Args:
            value (float): value for IDD Field `maximum_reheat_air_temperature`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_reheat_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_reheat_air_temperature`')

        self._data["Maximum Reheat Air Temperature"] = value

    @property
    def design_specification_outdoor_air_object_name_for_control(self):
        """Get design_specification_outdoor_air_object_name_for_control

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_control` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name for Control"]

    @design_specification_outdoor_air_object_name_for_control.setter
    def design_specification_outdoor_air_object_name_for_control(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name_for_control`
        When the name of a DesignSpecification:OutdoorAir object is entered, the terminal
        unit will increase flow as needed to meet this outdoor air requirement.
        If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will
        be computed based on the current number of occupants in the zone.
        At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.
        If this field is blank, then the terminal unit will not be controlled for outdoor air flow.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for control. The field Design Specification Outdoor Air Object Name for Sizing
        (see below) is used to specify the design outdoor air flow rate.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name_for_control`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name_for_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name_for_control`')

        self._data["Design Specification Outdoor Air Object Name for Control"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """Get design_specification_outdoor_air_object_name_for_sizing

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name_for_sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name_for_sizing`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`')

        self._data["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_vav_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.zone_minimum_air_flow_input_method))
        out.append(self._to_str(self.constant_minimum_air_flow_fraction))
        out.append(self._to_str(self.fixed_minimum_air_flow_rate))
        out.append(self._to_str(self.minimum_air_flow_fraction_schedule_name))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.reheat_coil_type))
        out.append(self._to_str(self.reheat_coil_availability_schedule_name))
        out.append(self._to_str(self.damper_heating_action))
        out.append(self._to_str(self.maximum_flow_per_zone_floor_area_during_reheat))
        out.append(self._to_str(self.maximum_flow_fraction_during_reheat))
        out.append(self._to_str(self.maximum_reheat_air_temperature))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name_for_control))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name_for_sizing))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        return ",".join(out)

class HvactemplateZoneVavFanPowered(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:VAV:FanPowered`
        Zone terminal unit, fan powered variable volume, reheat optional.
        Referenced schedules must be defined elsewhere in the idf.
    
    """
    internal_name = "HVACTemplate:Zone:VAV:FanPowered"
    field_count = 33
    required_fields = ["Zone Name", "Template VAV System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:VAV:FanPowered`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template VAV System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Primary Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Primary Supply Air Minimum Flow Fraction"] = None
        self._data["Secondary Supply Air Maximum Flow Rate"] = None
        self._data["Flow Type"] = None
        self._data["Parallel Fan On Flow Fraction"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Reheat Coil Type"] = None
        self._data["Reheat Coil Availability Schedule Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Fan Delta Pressure"] = None
        self._data["Fan Motor Efficiency"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None
        self._data["Zone PIU Fan Schedule Name"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_vav_system_name = None
        else:
            self.template_vav_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.primary_supply_air_maximum_flow_rate = None
        else:
            self.primary_supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.primary_supply_air_minimum_flow_fraction = None
        else:
            self.primary_supply_air_minimum_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.secondary_supply_air_maximum_flow_rate = None
        else:
            self.secondary_supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_type = None
        else:
            self.flow_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parallel_fan_on_flow_fraction = None
        else:
            self.parallel_fan_on_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_type = None
        else:
            self.reheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_availability_schedule_name = None
        else:
            self.reheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_delta_pressure = None
        else:
            self.fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_motor_efficiency = None
        else:
            self.fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_piu_fan_schedule_name = None
        else:
            self.zone_piu_fan_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone Name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """Get template_vav_system_name

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self._data["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """  Corresponds to IDD Field `template_vav_system_name`
        Enter the name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone.

        Args:
            value (str): value for IDD Field `template_vav_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_vav_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_vav_system_name`')

        self._data["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def primary_supply_air_maximum_flow_rate(self):
        """Get primary_supply_air_maximum_flow_rate

        Returns:
            float: the value of `primary_supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Primary Supply Air Maximum Flow Rate"]

    @primary_supply_air_maximum_flow_rate.setter
    def primary_supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `primary_supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `primary_supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `primary_supply_air_maximum_flow_rate`'.format(value))

        self._data["Primary Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def primary_supply_air_minimum_flow_fraction(self):
        """Get primary_supply_air_minimum_flow_fraction

        Returns:
            float: the value of `primary_supply_air_minimum_flow_fraction` or None if not set
        """
        return self._data["Primary Supply Air Minimum Flow Fraction"]

    @primary_supply_air_minimum_flow_fraction.setter
    def primary_supply_air_minimum_flow_fraction(self, value=None):
        """  Corresponds to IDD Field `primary_supply_air_minimum_flow_fraction`

        Args:
            value (float): value for IDD Field `primary_supply_air_minimum_flow_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `primary_supply_air_minimum_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `primary_supply_air_minimum_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `primary_supply_air_minimum_flow_fraction`')

        self._data["Primary Supply Air Minimum Flow Fraction"] = value

    @property
    def secondary_supply_air_maximum_flow_rate(self):
        """Get secondary_supply_air_maximum_flow_rate

        Returns:
            float: the value of `secondary_supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Secondary Supply Air Maximum Flow Rate"]

    @secondary_supply_air_maximum_flow_rate.setter
    def secondary_supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `secondary_supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `secondary_supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `secondary_supply_air_maximum_flow_rate`'.format(value))

        self._data["Secondary Supply Air Maximum Flow Rate"] = value

    @property
    def flow_type(self):
        """Get flow_type

        Returns:
            str: the value of `flow_type` or None if not set
        """
        return self._data["Flow Type"]

    @flow_type.setter
    def flow_type(self, value="Parallel"):
        """  Corresponds to IDD Field `flow_type`

        Args:
            value (str): value for IDD Field `flow_type`
                Accepted values are:
                      - Series
                      - Parallel
                      - SeriesFromPlenum
                      - ParallelFromPlenum
                Default value: Parallel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `flow_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `flow_type`')
            vals = set()
            vals.add("Series")
            vals.add("Parallel")
            vals.add("SeriesFromPlenum")
            vals.add("ParallelFromPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `flow_type`'.format(value))

        self._data["Flow Type"] = value

    @property
    def parallel_fan_on_flow_fraction(self):
        """Get parallel_fan_on_flow_fraction

        Returns:
            float: the value of `parallel_fan_on_flow_fraction` or None if not set
        """
        return self._data["Parallel Fan On Flow Fraction"]

    @parallel_fan_on_flow_fraction.setter
    def parallel_fan_on_flow_fraction(self, value=None):
        """  Corresponds to IDD Field `parallel_fan_on_flow_fraction`
        The fraction of the primary air flow at which fan turns on
        Applicable only to Parallel Flow Type

        Args:
            value (float): value for IDD Field `parallel_fan_on_flow_fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `parallel_fan_on_flow_fraction`'.format(value))

        self._data["Parallel Fan On Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def reheat_coil_type(self):
        """Get reheat_coil_type

        Returns:
            str: the value of `reheat_coil_type` or None if not set
        """
        return self._data["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="Electric"):
        """  Corresponds to IDD Field `reheat_coil_type`

        Args:
            value (str): value for IDD Field `reheat_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_type`'.format(value))

        self._data["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """Get reheat_coil_availability_schedule_name

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `reheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_availability_schedule_name`')

        self._data["Reheat Coil Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `fan_total_efficiency`

        Args:
            value (float): value for IDD Field `fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')

        self._data["Fan Total Efficiency"] = value

    @property
    def fan_delta_pressure(self):
        """Get fan_delta_pressure

        Returns:
            float: the value of `fan_delta_pressure` or None if not set
        """
        return self._data["Fan Delta Pressure"]

    @fan_delta_pressure.setter
    def fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `fan_delta_pressure`

        Args:
            value (float): value for IDD Field `fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fan_delta_pressure`')

        self._data["Fan Delta Pressure"] = value

    @property
    def fan_motor_efficiency(self):
        """Get fan_motor_efficiency

        Returns:
            float: the value of `fan_motor_efficiency` or None if not set
        """
        return self._data["Fan Motor Efficiency"]

    @fan_motor_efficiency.setter
    def fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_motor_efficiency`')

        self._data["Fan Motor Efficiency"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def zone_piu_fan_schedule_name(self):
        """Get zone_piu_fan_schedule_name

        Returns:
            str: the value of `zone_piu_fan_schedule_name` or None if not set
        """
        return self._data["Zone PIU Fan Schedule Name"]

    @zone_piu_fan_schedule_name.setter
    def zone_piu_fan_schedule_name(self, value=None):
        """  Corresponds to IDD Field `zone_piu_fan_schedule_name`
        This is the operating schedule for the zone PIU fan.
        For a parallel PIU, the fan operates only when the primary air flow is below the
        Parallel Fan On Flow Fraction and the Zone PIU Fan Schedule is on, or it is
        activated by an availability manager.
        For a series PIU, the zone fan operates whenever the Zone PIU Fan Schedule is on, or it
        is activated by an availability manager.
        If this field is left blank, the System Availability Schedule for the
        HVACTemplate:System serving this zone will be used.

        Args:
            value (str): value for IDD Field `zone_piu_fan_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_piu_fan_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_piu_fan_schedule_name`')

        self._data["Zone PIU Fan Schedule Name"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_vav_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.primary_supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.primary_supply_air_minimum_flow_fraction))
        out.append(self._to_str(self.secondary_supply_air_maximum_flow_rate))
        out.append(self._to_str(self.flow_type))
        out.append(self._to_str(self.parallel_fan_on_flow_fraction))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.reheat_coil_type))
        out.append(self._to_str(self.reheat_coil_availability_schedule_name))
        out.append(self._to_str(self.fan_total_efficiency))
        out.append(self._to_str(self.fan_delta_pressure))
        out.append(self._to_str(self.fan_motor_efficiency))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_piu_fan_schedule_name))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        return ",".join(out)

class HvactemplateZoneVavHeatAndCool(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:VAV:HeatAndCool`
        VAV system with VAV for both heating and cooling and optional rehaert coil.
        For heating, this unit increases airflow first, then activates reheat coil.
    
    """
    internal_name = "HVACTemplate:Zone:VAV:HeatAndCool"
    field_count = 27
    required_fields = ["Zone Name", "Template VAV System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:VAV:HeatAndCool`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template VAV System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Constant Minimum Air Flow Fraction"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object Name for Sizing"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Reheat Coil Type"] = None
        self._data["Reheat Coil Availability Schedule Name"] = None
        self._data["Maximum Reheat Air Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_vav_system_name = None
        else:
            self.template_vav_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_minimum_air_flow_fraction = None
        else:
            self.constant_minimum_air_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name_for_sizing = None
        else:
            self.design_specification_outdoor_air_object_name_for_sizing = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_type = None
        else:
            self.reheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_availability_schedule_name = None
        else:
            self.reheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_reheat_air_temperature = None
        else:
            self.maximum_reheat_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """Get template_vav_system_name

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self._data["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """  Corresponds to IDD Field `template_vav_system_name`
        Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone

        Args:
            value (str): value for IDD Field `template_vav_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_vav_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_vav_system_name`')

        self._data["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def constant_minimum_air_flow_fraction(self):
        """Get constant_minimum_air_flow_fraction

        Returns:
            float: the value of `constant_minimum_air_flow_fraction` or None if not set
        """
        return self._data["Constant Minimum Air Flow Fraction"]

    @constant_minimum_air_flow_fraction.setter
    def constant_minimum_air_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `constant_minimum_air_flow_fraction`
        This field is used if the field Zone Minimum Air Flow Input Method is Constant
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the following field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `constant_minimum_air_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_minimum_air_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constant_minimum_air_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constant_minimum_air_flow_fraction`')

        self._data["Constant Minimum Air Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """Get design_specification_outdoor_air_object_name_for_sizing

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name_for_sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name_for_sizing`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`')

        self._data["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def reheat_coil_type(self):
        """Get reheat_coil_type

        Returns:
            str: the value of `reheat_coil_type` or None if not set
        """
        return self._data["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `reheat_coil_type`

        Args:
            value (str): value for IDD Field `reheat_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_type`'.format(value))

        self._data["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """Get reheat_coil_availability_schedule_name

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `reheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_availability_schedule_name`')

        self._data["Reheat Coil Availability Schedule Name"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """Get maximum_reheat_air_temperature

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set
        """
        return self._data["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_reheat_air_temperature`
        Specifies the maximum allowable supply air temperature leaving the reheat coil.
        If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.

        Args:
            value (float): value for IDD Field `maximum_reheat_air_temperature`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_reheat_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_reheat_air_temperature`')

        self._data["Maximum Reheat Air Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_vav_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.constant_minimum_air_flow_fraction))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name_for_sizing))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.reheat_coil_type))
        out.append(self._to_str(self.reheat_coil_availability_schedule_name))
        out.append(self._to_str(self.maximum_reheat_air_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        return ",".join(out)

class HvactemplateZoneConstantVolume(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:ConstantVolume`
        Zone terminal unit, constant volume, reheat optional.
        Referenced schedules must be defined elsewhere in the idf.
    
    """
    internal_name = "HVACTemplate:Zone:ConstantVolume"
    field_count = 26
    required_fields = ["Zone Name", "Template Constant Volume System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:ConstantVolume`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Constant Volume System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object name"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Reheat Coil Type"] = None
        self._data["Reheat Coil Availability Schedule Name"] = None
        self._data["Maximum Reheat Air Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_constant_volume_system_name = None
        else:
            self.template_constant_volume_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_type = None
        else:
            self.reheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_availability_schedule_name = None
        else:
            self.reheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_reheat_air_temperature = None
        else:
            self.maximum_reheat_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_constant_volume_system_name(self):
        """Get template_constant_volume_system_name

        Returns:
            str: the value of `template_constant_volume_system_name` or None if not set
        """
        return self._data["Template Constant Volume System Name"]

    @template_constant_volume_system_name.setter
    def template_constant_volume_system_name(self, value=None):
        """  Corresponds to IDD Field `template_constant_volume_system_name`
        Name of a HVACTemplate:System:ConstantVolume object serving this zone

        Args:
            value (str): value for IDD Field `template_constant_volume_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_constant_volume_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_constant_volume_system_name`')

        self._data["Template Constant Volume System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def reheat_coil_type(self):
        """Get reheat_coil_type

        Returns:
            str: the value of `reheat_coil_type` or None if not set
        """
        return self._data["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `reheat_coil_type`

        Args:
            value (str): value for IDD Field `reheat_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_type`'.format(value))

        self._data["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """Get reheat_coil_availability_schedule_name

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `reheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_availability_schedule_name`')

        self._data["Reheat Coil Availability Schedule Name"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """Get maximum_reheat_air_temperature

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set
        """
        return self._data["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_reheat_air_temperature`
        Specifies the maximum allowable supply air temperature leaving the reheat coil.
        If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.

        Args:
            value (float): value for IDD Field `maximum_reheat_air_temperature`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_reheat_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_reheat_air_temperature`')

        self._data["Maximum Reheat Air Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum runs through only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                Default value: SupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_constant_volume_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.reheat_coil_type))
        out.append(self._to_str(self.reheat_coil_availability_schedule_name))
        out.append(self._to_str(self.maximum_reheat_air_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        return ",".join(out)

class HvactemplateZoneDualDuct(object):
    """ Corresponds to IDD object `HVACTemplate:Zone:DualDuct`
        Zone terminal unit, dual-duct, constant or variable volume.
    
    """
    internal_name = "HVACTemplate:Zone:DualDuct"
    field_count = 26
    required_fields = ["Zone Name", "Template Dual Duct System Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Zone:DualDuct`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Template Dual Duct System Name"] = None
        self._data["Template Thermostat Name"] = None
        self._data["Supply Air Maximum Flow Rate"] = None
        self._data["Zone Heating Sizing Factor"] = None
        self._data["Zone Cooling Sizing Factor"] = None
        self._data["Zone Minimum Air Flow Fraction"] = None
        self._data["Outdoor Air Method"] = None
        self._data["Outdoor Air Flow Rate per Person"] = None
        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = None
        self._data["Outdoor Air Flow Rate per Zone"] = None
        self._data["Design Specification Outdoor Air Object Name for Sizing"] = None
        self._data["Design Specification Zone Air Distribution Object Name"] = None
        self._data["Design Specification Outdoor Air Object Name for Control"] = None
        self._data["Cold Supply Plenum Name"] = None
        self._data["Hot Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Baseboard Heating Type"] = None
        self._data["Baseboard Heating Availability Schedule Name"] = None
        self._data["Baseboard Heating Capacity"] = None
        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = None
        self._data["Zone Cooling Design Supply Air Temperature"] = None
        self._data["Zone Cooling Design Supply Air Temperature Difference"] = None
        self._data["Zone Heating Design Supply Air Temperature Input Method"] = None
        self._data["Zone Heating Design Supply Air Temperature"] = None
        self._data["Zone Heating Design Supply Air Temperature Difference"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_dual_duct_system_name = None
        else:
            self.template_dual_duct_system_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_thermostat_name = None
        else:
            self.template_thermostat_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_maximum_flow_rate = None
        else:
            self.supply_air_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_sizing_factor = None
        else:
            self.zone_heating_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_sizing_factor = None
        else:
            self.zone_cooling_sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_minimum_air_flow_fraction = None
        else:
            self.zone_minimum_air_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_method = None
        else:
            self.outdoor_air_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_person = None
        else:
            self.outdoor_air_flow_rate_per_person = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone_floor_area = None
        else:
            self.outdoor_air_flow_rate_per_zone_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_per_zone = None
        else:
            self.outdoor_air_flow_rate_per_zone = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name_for_sizing = None
        else:
            self.design_specification_outdoor_air_object_name_for_sizing = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zone_air_distribution_object_name = None
        else:
            self.design_specification_zone_air_distribution_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name_for_control = None
        else:
            self.design_specification_outdoor_air_object_name_for_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_supply_plenum_name = None
        else:
            self.cold_supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_supply_plenum_name = None
        else:
            self.hot_supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_type = None
        else:
            self.baseboard_heating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_availability_schedule_name = None
        else:
            self.baseboard_heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseboard_heating_capacity = None
        else:
            self.baseboard_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_input_method = None
        else:
            self.zone_cooling_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature = None
        else:
            self.zone_cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_cooling_design_supply_air_temperature_difference = None
        else:
            self.zone_cooling_design_supply_air_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_input_method = None
        else:
            self.zone_heating_design_supply_air_temperature_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature = None
        else:
            self.zone_heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_heating_design_supply_air_temperature_difference = None
        else:
            self.zone_heating_design_supply_air_temperature_difference = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Zone name must match a building zone name

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def template_dual_duct_system_name(self):
        """Get template_dual_duct_system_name

        Returns:
            str: the value of `template_dual_duct_system_name` or None if not set
        """
        return self._data["Template Dual Duct System Name"]

    @template_dual_duct_system_name.setter
    def template_dual_duct_system_name(self, value=None):
        """  Corresponds to IDD Field `template_dual_duct_system_name`
        Name of a HVACTemplate:System:DualDuct object serving this zone

        Args:
            value (str): value for IDD Field `template_dual_duct_system_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_dual_duct_system_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_dual_duct_system_name`')

        self._data["Template Dual Duct System Name"] = value

    @property
    def template_thermostat_name(self):
        """Get template_thermostat_name

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self._data["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """  Corresponds to IDD Field `template_thermostat_name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `template_thermostat_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_thermostat_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_thermostat_name`')

        self._data["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """Get supply_air_maximum_flow_rate

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will be
        multiplied by the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float): value for IDD Field `supply_air_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_maximum_flow_rate`'.format(value))

        self._data["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """Get zone_heating_sizing_factor

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self._data["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_heating_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_heating_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_heating_sizing_factor`')

        self._data["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """Get zone_cooling_sizing_factor

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self._data["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `zone_cooling_sizing_factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `zone_cooling_sizing_factor`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_sizing_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_cooling_sizing_factor`')

        self._data["Zone Cooling Sizing Factor"] = value

    @property
    def zone_minimum_air_flow_fraction(self):
        """Get zone_minimum_air_flow_fraction

        Returns:
            float: the value of `zone_minimum_air_flow_fraction` or None if not set
        """
        return self._data["Zone Minimum Air Flow Fraction"]

    @zone_minimum_air_flow_fraction.setter
    def zone_minimum_air_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `zone_minimum_air_flow_fraction`
        This field is the Zone Minimum Air Flow Fraction specified as a fraction of the
        maximum air flow rate. This field is ignored if the system serving this zone is
        constant volume.

        Args:
            value (float): value for IDD Field `zone_minimum_air_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_minimum_air_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_minimum_air_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `zone_minimum_air_flow_fraction`')

        self._data["Zone Minimum Air Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """Get outdoor_air_method

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self._data["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """  Corresponds to IDD Field `outdoor_air_method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `outdoor_air_method`
                Accepted values are:
                      - Flow/Person
                      - Flow/Zone
                      - Flow/Area
                      - Sum
                      - Maximum
                      - DetailedSpecification
                Default value: Flow/Person
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_method`')
            vals = set()
            vals.add("Flow/Person")
            vals.add("Flow/Zone")
            vals.add("Flow/Area")
            vals.add("Sum")
            vals.add("Maximum")
            vals.add("DetailedSpecification")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_method`'.format(value))

        self._data["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """Get outdoor_air_flow_rate_per_person

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_person`
                Units: m3/s
                Default value: 0.00944
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_person`'.format(value))

        self._data["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """Get outdoor_air_flow_rate_per_zone_floor_area

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
        This input is used if the field Outdoor Air Method is
        Flow/Area, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone_floor_area`
                Units: m3/s-m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone_floor_area`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """Get outdoor_air_flow_rate_per_zone

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set
        """
        return self._data["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=0.0 ):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_per_zone`
        This input is used if the field Outdoor Air Method is
        Flow/Zone, Sum, or Maximum

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_per_zone`
                Units: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_per_zone`'.format(value))

        self._data["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """Get design_specification_outdoor_air_object_name_for_sizing

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name_for_sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name_for_sizing`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name_for_sizing`')

        self._data["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """Get design_specification_zone_air_distribution_object_name

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self._data["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zone_air_distribution_object_name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `design_specification_zone_air_distribution_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zone_air_distribution_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zone_air_distribution_object_name`')

        self._data["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def design_specification_outdoor_air_object_name_for_control(self):
        """Get design_specification_outdoor_air_object_name_for_control

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_control` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name for Control"]

    @design_specification_outdoor_air_object_name_for_control.setter
    def design_specification_outdoor_air_object_name_for_control(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name_for_control`
        When the name of a DesignSpecification:OutdoorAir object is entered, the terminal
        unit will increase flow as needed to meet this outdoor air requirement.
        If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will
        be computed based on the current number of occupants in the zone.
        At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.
        If this field is blank, then the terminal unit will not be controlled for outdoor air flow.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for control. The field Design Specification Outdoor Air Object Name for Sizing
        (see below) is used to specify the design outdoor air flow rate.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name_for_control`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name_for_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name_for_control`')

        self._data["Design Specification Outdoor Air Object Name for Control"] = value

    @property
    def cold_supply_plenum_name(self):
        """Get cold_supply_plenum_name

        Returns:
            str: the value of `cold_supply_plenum_name` or None if not set
        """
        return self._data["Cold Supply Plenum Name"]

    @cold_supply_plenum_name.setter
    def cold_supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `cold_supply_plenum_name`
        Plenum zone name.  Cold supply plenum that serves only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `cold_supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_supply_plenum_name`')

        self._data["Cold Supply Plenum Name"] = value

    @property
    def hot_supply_plenum_name(self):
        """Get hot_supply_plenum_name

        Returns:
            str: the value of `hot_supply_plenum_name` or None if not set
        """
        return self._data["Hot Supply Plenum Name"]

    @hot_supply_plenum_name.setter
    def hot_supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `hot_supply_plenum_name`
        Plenum zone name.  Hot supply plenum that serves only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `hot_supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_supply_plenum_name`')

        self._data["Hot Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum that serves only this zone.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """Get baseboard_heating_type

        Returns:
            str: the value of `baseboard_heating_type` or None if not set
        """
        return self._data["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """  Corresponds to IDD Field `baseboard_heating_type`

        Args:
            value (str): value for IDD Field `baseboard_heating_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `baseboard_heating_type`'.format(value))

        self._data["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """Get baseboard_heating_availability_schedule_name

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set
        """
        return self._data["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `baseboard_heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseboard_heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseboard_heating_availability_schedule_name`')

        self._data["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """Get baseboard_heating_capacity

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set
        """
        return self._data["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `baseboard_heating_capacity`

        Args:
            value (float): value for IDD Field `baseboard_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `baseboard_heating_capacity`'.format(value))

        self._data["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """Get zone_cooling_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_cooling_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_cooling_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_cooling_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """Get zone_cooling_design_supply_air_temperature

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """Get zone_cooling_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(self, value=11.11 ):
        """  Corresponds to IDD Field `zone_cooling_design_supply_air_temperature_difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_cooling_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 11.11
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_cooling_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """Get zone_heating_design_supply_air_temperature_input_method

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(self, value="SystemSupplyAirTemperature"):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_input_method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint

        Args:
            value (str): value for IDD Field `zone_heating_design_supply_air_temperature_input_method`
                Accepted values are:
                      - SupplyAirTemperature
                      - TemperatureDifference
                      - SystemSupplyAirTemperature
                Default value: SystemSupplyAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_heating_design_supply_air_temperature_input_method`')
            vals = set()
            vals.add("SupplyAirTemperature")
            vals.add("TemperatureDifference")
            vals.add("SystemSupplyAirTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_heating_design_supply_air_temperature_input_method`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """Get zone_heating_design_supply_air_temperature

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """Get zone_heating_design_supply_air_temperature_difference

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self._data["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(self, value=30.0 ):
        """  Corresponds to IDD Field `zone_heating_design_supply_air_temperature_difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `zone_heating_design_supply_air_temperature_difference`
                Units: deltaC
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_heating_design_supply_air_temperature_difference`'.format(value))

        self._data["Zone Heating Design Supply Air Temperature Difference"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.template_dual_duct_system_name))
        out.append(self._to_str(self.template_thermostat_name))
        out.append(self._to_str(self.supply_air_maximum_flow_rate))
        out.append(self._to_str(self.zone_heating_sizing_factor))
        out.append(self._to_str(self.zone_cooling_sizing_factor))
        out.append(self._to_str(self.zone_minimum_air_flow_fraction))
        out.append(self._to_str(self.outdoor_air_method))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_person))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone_floor_area))
        out.append(self._to_str(self.outdoor_air_flow_rate_per_zone))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name_for_sizing))
        out.append(self._to_str(self.design_specification_zone_air_distribution_object_name))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name_for_control))
        out.append(self._to_str(self.cold_supply_plenum_name))
        out.append(self._to_str(self.hot_supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.baseboard_heating_type))
        out.append(self._to_str(self.baseboard_heating_availability_schedule_name))
        out.append(self._to_str(self.baseboard_heating_capacity))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature))
        out.append(self._to_str(self.zone_cooling_design_supply_air_temperature_difference))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_input_method))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature))
        out.append(self._to_str(self.zone_heating_design_supply_air_temperature_difference))
        return ",".join(out)

class HvactemplateSystemVrf(object):
    """ Corresponds to IDD object `HVACTemplate:System:VRF`
        Variable refrigerant flow (VRF) heat pump condensing unit. Serves one or more VRF zone
        terminal units (HVACTemplate:Zone:VRF).
    
    """
    internal_name = "HVACTemplate:System:VRF"
    field_count = 39
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:VRF`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Gross Rated Total Cooling Capacity"] = None
        self._data["Gross Rated Cooling COP"] = None
        self._data["Minimum Outdoor Temperature in Cooling Mode"] = None
        self._data["Maximum Outdoor Temperature in Cooling Mode"] = None
        self._data["Gross Rated Heating Capacity"] = None
        self._data["Rated Heating Capacity Sizing Ratio"] = None
        self._data["Gross Rated Heating COP"] = None
        self._data["Minimum Outdoor Temperature in Heating Mode"] = None
        self._data["Maximum Outdoor Temperature in Heating Mode"] = None
        self._data["Minimum Heat Pump Part-Load Ratio"] = None
        self._data["Zone Name for Master Thermostat Location"] = None
        self._data["Master Thermostat Priority Control Type"] = None
        self._data["Thermostat Priority Schedule Name"] = None
        self._data["Heat Pump Waste Heat Recovery"] = None
        self._data["Equivalent Piping Length used for Piping Correction Factor in Cooling Mode"] = None
        self._data["Vertical Height used for Piping Correction Factor"] = None
        self._data["Equivalent Piping Length used for Piping Correction Factor in Heating Mode"] = None
        self._data["Crankcase Heater Power per Compressor"] = None
        self._data["Number of Compressors"] = None
        self._data["Ratio of Compressor Size to Total Compressor Capacity"] = None
        self._data["Maximum Outdoor Dry-bulb Temperature for Crankcase Heater"] = None
        self._data["Defrost Strategy"] = None
        self._data["Defrost Control"] = None
        self._data["Defrost Time Period Fraction"] = None
        self._data["Resistive Defrost Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-bulb Temperature for Defrost Operation"] = None
        self._data["Condenser Type"] = None
        self._data["Water Condenser Volume Flow Rate"] = None
        self._data["Evaporative Condenser Effectiveness"] = None
        self._data["Evaporative Condenser Air Flow Rate"] = None
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Fuel Type"] = None
        self._data["Minimum Outdoor Temperature in Heat Recovery Mode"] = None
        self._data["Maximum Outdoor Temperature in Heat Recovery Mode"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity = None
        else:
            self.gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_rated_cooling_cop = None
        else:
            self.gross_rated_cooling_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_temperature_in_cooling_mode = None
        else:
            self.minimum_outdoor_temperature_in_cooling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_temperature_in_cooling_mode = None
        else:
            self.maximum_outdoor_temperature_in_cooling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_rated_heating_capacity = None
        else:
            self.gross_rated_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_heating_capacity_sizing_ratio = None
        else:
            self.rated_heating_capacity_sizing_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_rated_heating_cop = None
        else:
            self.gross_rated_heating_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_temperature_in_heating_mode = None
        else:
            self.minimum_outdoor_temperature_in_heating_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_temperature_in_heating_mode = None
        else:
            self.maximum_outdoor_temperature_in_heating_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heat_pump_partload_ratio = None
        else:
            self.minimum_heat_pump_partload_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name_for_master_thermostat_location = None
        else:
            self.zone_name_for_master_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.master_thermostat_priority_control_type = None
        else:
            self.master_thermostat_priority_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_priority_schedule_name = None
        else:
            self.thermostat_priority_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_waste_heat_recovery = None
        else:
            self.heat_pump_waste_heat_recovery = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode = None
        else:
            self.equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.vertical_height_used_for_piping_correction_factor = None
        else:
            self.vertical_height_used_for_piping_correction_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode = None
        else:
            self.equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.crankcase_heater_power_per_compressor = None
        else:
            self.crankcase_heater_power_per_compressor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_compressors = None
        else:
            self.number_of_compressors = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ratio_of_compressor_size_to_total_compressor_capacity = None
        else:
            self.ratio_of_compressor_size_to_total_compressor_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_strategy = None
        else:
            self.defrost_strategy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_control = None
        else:
            self.defrost_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_time_period_fraction = None
        else:
            self.defrost_time_period_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.resistive_defrost_heater_capacity = None
        else:
            self.resistive_defrost_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_condenser_volume_flow_rate = None
        else:
            self.water_condenser_volume_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_effectiveness = None
        else:
            self.evaporative_condenser_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_air_flow_rate = None
        else:
            self.evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_temperature_in_heat_recovery_mode = None
        else:
            self.minimum_outdoor_temperature_in_heat_recovery_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_temperature_in_heat_recovery_mode = None
        else:
            self.maximum_outdoor_temperature_in_heat_recovery_mode = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `gross_rated_total_cooling_capacity`
        Enter the total cooling capacity in watts at rated conditions or set to autosize.
        Total cooling capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `gross_rated_total_cooling_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_total_cooling_capacity`')

        self._data["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set
        """
        return self._data["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.3 ):
        """  Corresponds to IDD Field `gross_rated_cooling_cop`
        Enter the coefficient of performance at rated conditions or leave blank to use default.
        COP includes compressor and condenser fan electrical energy input
        COP does not include supply fan heat or supply fan electric power input

        Args:
            value (float): value for IDD Field `gross_rated_cooling_cop`
                Units: W/W
                Default value: 3.3
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_cooling_cop`')

        self._data["Gross Rated Cooling COP"] = value

    @property
    def minimum_outdoor_temperature_in_cooling_mode(self):
        """Get minimum_outdoor_temperature_in_cooling_mode

        Returns:
            float: the value of `minimum_outdoor_temperature_in_cooling_mode` or None if not set
        """
        return self._data["Minimum Outdoor Temperature in Cooling Mode"]

    @minimum_outdoor_temperature_in_cooling_mode.setter
    def minimum_outdoor_temperature_in_cooling_mode(self, value=-6.0 ):
        """  Corresponds to IDD Field `minimum_outdoor_temperature_in_cooling_mode`
        Enter the minimum outdoor temperature allowed for cooling operation.
        Cooling is disabled below this temperature.

        Args:
            value (float): value for IDD Field `minimum_outdoor_temperature_in_cooling_mode`
                Units: C
                Default value: -6.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_temperature_in_cooling_mode`'.format(value))

        self._data["Minimum Outdoor Temperature in Cooling Mode"] = value

    @property
    def maximum_outdoor_temperature_in_cooling_mode(self):
        """Get maximum_outdoor_temperature_in_cooling_mode

        Returns:
            float: the value of `maximum_outdoor_temperature_in_cooling_mode` or None if not set
        """
        return self._data["Maximum Outdoor Temperature in Cooling Mode"]

    @maximum_outdoor_temperature_in_cooling_mode.setter
    def maximum_outdoor_temperature_in_cooling_mode(self, value=43.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_temperature_in_cooling_mode`
        Enter the maximum outdoor temperature allowed for cooling operation.
        Cooling is disabled above this temperature.

        Args:
            value (float): value for IDD Field `maximum_outdoor_temperature_in_cooling_mode`
                Units: C
                Default value: 43.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_temperature_in_cooling_mode`'.format(value))

        self._data["Maximum Outdoor Temperature in Cooling Mode"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set
        """
        return self._data["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `gross_rated_heating_capacity`
        Enter the heating capacity in watts at rated conditions or set to autosize.
        Heating capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `gross_rated_heating_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_capacity`'.format(value))

        self._data["Gross Rated Heating Capacity"] = value

    @property
    def rated_heating_capacity_sizing_ratio(self):
        """Get rated_heating_capacity_sizing_ratio

        Returns:
            float: the value of `rated_heating_capacity_sizing_ratio` or None if not set
        """
        return self._data["Rated Heating Capacity Sizing Ratio"]

    @rated_heating_capacity_sizing_ratio.setter
    def rated_heating_capacity_sizing_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `rated_heating_capacity_sizing_ratio`
        If the Gross Rated Heating Capacity is autosized, the heating capacity is sized
        to be equal to the cooling capacity multiplied by this sizing ratio. The zone
        terminal unit heating coils are also sized using this ratio unless the sizing
        ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.

        Args:
            value (float): value for IDD Field `rated_heating_capacity_sizing_ratio`
                Units: W/W
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity_sizing_ratio`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `rated_heating_capacity_sizing_ratio`')

        self._data["Rated Heating Capacity Sizing Ratio"] = value

    @property
    def gross_rated_heating_cop(self):
        """Get gross_rated_heating_cop

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set
        """
        return self._data["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=3.4 ):
        """  Corresponds to IDD Field `gross_rated_heating_cop`
        COP includes compressor and condenser fan electrical energy input
        COP does not include supply fan heat or supply fan electrical energy input

        Args:
            value (float): value for IDD Field `gross_rated_heating_cop`
                Units: W/W
                Default value: 3.4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_cop`'.format(value))

        self._data["Gross Rated Heating COP"] = value

    @property
    def minimum_outdoor_temperature_in_heating_mode(self):
        """Get minimum_outdoor_temperature_in_heating_mode

        Returns:
            float: the value of `minimum_outdoor_temperature_in_heating_mode` or None if not set
        """
        return self._data["Minimum Outdoor Temperature in Heating Mode"]

    @minimum_outdoor_temperature_in_heating_mode.setter
    def minimum_outdoor_temperature_in_heating_mode(self, value=-20.0 ):
        """  Corresponds to IDD Field `minimum_outdoor_temperature_in_heating_mode`
        Enter the minimum outdoor temperature allowed for heating operation.

        Args:
            value (float): value for IDD Field `minimum_outdoor_temperature_in_heating_mode`
                Units: C
                Default value: -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_temperature_in_heating_mode`'.format(value))

        self._data["Minimum Outdoor Temperature in Heating Mode"] = value

    @property
    def maximum_outdoor_temperature_in_heating_mode(self):
        """Get maximum_outdoor_temperature_in_heating_mode

        Returns:
            float: the value of `maximum_outdoor_temperature_in_heating_mode` or None if not set
        """
        return self._data["Maximum Outdoor Temperature in Heating Mode"]

    @maximum_outdoor_temperature_in_heating_mode.setter
    def maximum_outdoor_temperature_in_heating_mode(self, value=16.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_temperature_in_heating_mode`
        Enter the maximum outdoor temperature allowed for heating operation.

        Args:
            value (float): value for IDD Field `maximum_outdoor_temperature_in_heating_mode`
                Units: C
                Default value: 16.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_temperature_in_heating_mode`'.format(value))

        self._data["Maximum Outdoor Temperature in Heating Mode"] = value

    @property
    def minimum_heat_pump_partload_ratio(self):
        """Get minimum_heat_pump_partload_ratio

        Returns:
            float: the value of `minimum_heat_pump_partload_ratio` or None if not set
        """
        return self._data["Minimum Heat Pump Part-Load Ratio"]

    @minimum_heat_pump_partload_ratio.setter
    def minimum_heat_pump_partload_ratio(self, value=0.15 ):
        """  Corresponds to IDD Field `minimum_heat_pump_partload_ratio`
        Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is
        below this value, the heat pump compressor will cycle to meet the cooling or heating
        demand.

        Args:
            value (float): value for IDD Field `minimum_heat_pump_partload_ratio`
                Units: dimensionless
                Default value: 0.15
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heat_pump_partload_ratio`'.format(value))

        self._data["Minimum Heat Pump Part-Load Ratio"] = value

    @property
    def zone_name_for_master_thermostat_location(self):
        """Get zone_name_for_master_thermostat_location

        Returns:
            str: the value of `zone_name_for_master_thermostat_location` or None if not set
        """
        return self._data["Zone Name for Master Thermostat Location"]

    @zone_name_for_master_thermostat_location.setter
    def zone_name_for_master_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `zone_name_for_master_thermostat_location`
        Enter the name of the zone where the master thermostat is located.

        Args:
            value (str): value for IDD Field `zone_name_for_master_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name_for_master_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name_for_master_thermostat_location`')

        self._data["Zone Name for Master Thermostat Location"] = value

    @property
    def master_thermostat_priority_control_type(self):
        """Get master_thermostat_priority_control_type

        Returns:
            str: the value of `master_thermostat_priority_control_type` or None if not set
        """
        return self._data["Master Thermostat Priority Control Type"]

    @master_thermostat_priority_control_type.setter
    def master_thermostat_priority_control_type(self, value="MasterThermostatPriority"):
        """  Corresponds to IDD Field `master_thermostat_priority_control_type`
        Choose a thermostat control logic scheme. If these control types fail to control zone
        temperature within a reasonable limit, consider using multiple VRF systems

        Args:
            value (str): value for IDD Field `master_thermostat_priority_control_type`
                Accepted values are:
                      - LoadPriority
                      - ZonePriority
                      - ThermostatOffsetPriority
                      - MasterThermostatPriority
                      - Scheduled
                Default value: MasterThermostatPriority
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `master_thermostat_priority_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `master_thermostat_priority_control_type`')
            vals = set()
            vals.add("LoadPriority")
            vals.add("ZonePriority")
            vals.add("ThermostatOffsetPriority")
            vals.add("MasterThermostatPriority")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `master_thermostat_priority_control_type`'.format(value))

        self._data["Master Thermostat Priority Control Type"] = value

    @property
    def thermostat_priority_schedule_name(self):
        """Get thermostat_priority_schedule_name

        Returns:
            str: the value of `thermostat_priority_schedule_name` or None if not set
        """
        return self._data["Thermostat Priority Schedule Name"]

    @thermostat_priority_schedule_name.setter
    def thermostat_priority_schedule_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_priority_schedule_name`
        this field is required if Master Thermostat Priority Control Type is Scheduled.
        Schedule values of 0 denote cooling, 1 for heating, and all other values disable the system.

        Args:
            value (str): value for IDD Field `thermostat_priority_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_priority_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_priority_schedule_name`')

        self._data["Thermostat Priority Schedule Name"] = value

    @property
    def heat_pump_waste_heat_recovery(self):
        """Get heat_pump_waste_heat_recovery

        Returns:
            str: the value of `heat_pump_waste_heat_recovery` or None if not set
        """
        return self._data["Heat Pump Waste Heat Recovery"]

    @heat_pump_waste_heat_recovery.setter
    def heat_pump_waste_heat_recovery(self, value="No"):
        """  Corresponds to IDD Field `heat_pump_waste_heat_recovery`
        This field is reserved for future use. The only valid choice is No.

        Args:
            value (str): value for IDD Field `heat_pump_waste_heat_recovery`
                Accepted values are:
                      - No
                      - Yes
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_waste_heat_recovery`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_waste_heat_recovery`')
            vals = set()
            vals.add("No")
            vals.add("Yes")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_waste_heat_recovery`'.format(value))

        self._data["Heat Pump Waste Heat Recovery"] = value

    @property
    def equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode(self):
        """Get equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode

        Returns:
            float: the value of `equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode` or None if not set
        """
        return self._data["Equivalent Piping Length used for Piping Correction Factor in Cooling Mode"]

    @equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode.setter
    def equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode(self, value=30.0 ):
        """  Corresponds to IDD Field `equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode`
        Enter the equivalent length of the farthest terminal unit from the condenser

        Args:
            value (float): value for IDD Field `equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode`
                Units: m
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode`'.format(value))

        self._data["Equivalent Piping Length used for Piping Correction Factor in Cooling Mode"] = value

    @property
    def vertical_height_used_for_piping_correction_factor(self):
        """Get vertical_height_used_for_piping_correction_factor

        Returns:
            float: the value of `vertical_height_used_for_piping_correction_factor` or None if not set
        """
        return self._data["Vertical Height used for Piping Correction Factor"]

    @vertical_height_used_for_piping_correction_factor.setter
    def vertical_height_used_for_piping_correction_factor(self, value=10.0 ):
        """  Corresponds to IDD Field `vertical_height_used_for_piping_correction_factor`
        Enter the height difference between the highest and lowest terminal unit

        Args:
            value (float): value for IDD Field `vertical_height_used_for_piping_correction_factor`
                Units: m
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertical_height_used_for_piping_correction_factor`'.format(value))

        self._data["Vertical Height used for Piping Correction Factor"] = value

    @property
    def equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode(self):
        """Get equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode

        Returns:
            float: the value of `equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode` or None if not set
        """
        return self._data["Equivalent Piping Length used for Piping Correction Factor in Heating Mode"]

    @equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode.setter
    def equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode(self, value=30.0 ):
        """  Corresponds to IDD Field `equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode`
        Enter the equivalent length of the farthest terminal unit from the condenser

        Args:
            value (float): value for IDD Field `equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode`
                Units: m
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode`'.format(value))

        self._data["Equivalent Piping Length used for Piping Correction Factor in Heating Mode"] = value

    @property
    def crankcase_heater_power_per_compressor(self):
        """Get crankcase_heater_power_per_compressor

        Returns:
            float: the value of `crankcase_heater_power_per_compressor` or None if not set
        """
        return self._data["Crankcase Heater Power per Compressor"]

    @crankcase_heater_power_per_compressor.setter
    def crankcase_heater_power_per_compressor(self, value=33.0 ):
        """  Corresponds to IDD Field `crankcase_heater_power_per_compressor`
        Enter the value of the resistive heater located in the compressor(s). This heater
        is used to warm the refrigerant and oil when the compressor is off.

        Args:
            value (float): value for IDD Field `crankcase_heater_power_per_compressor`
                Units: W
                Default value: 33.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_power_per_compressor`'.format(value))

        self._data["Crankcase Heater Power per Compressor"] = value

    @property
    def number_of_compressors(self):
        """Get number_of_compressors

        Returns:
            int: the value of `number_of_compressors` or None if not set
        """
        return self._data["Number of Compressors"]

    @number_of_compressors.setter
    def number_of_compressors(self, value=2 ):
        """  Corresponds to IDD Field `number_of_compressors`
        Enter the total number of compressor. This input is used only for crankcase
        heater calculations.

        Args:
            value (int): value for IDD Field `number_of_compressors`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_compressors`'.format(value))

        self._data["Number of Compressors"] = value

    @property
    def ratio_of_compressor_size_to_total_compressor_capacity(self):
        """Get ratio_of_compressor_size_to_total_compressor_capacity

        Returns:
            float: the value of `ratio_of_compressor_size_to_total_compressor_capacity` or None if not set
        """
        return self._data["Ratio of Compressor Size to Total Compressor Capacity"]

    @ratio_of_compressor_size_to_total_compressor_capacity.setter
    def ratio_of_compressor_size_to_total_compressor_capacity(self, value=0.5 ):
        """  Corresponds to IDD Field `ratio_of_compressor_size_to_total_compressor_capacity`
        Enter the ratio of the first stage compressor to total compressor capacity.
        All other compressors are assumed to be equally sized. This inputs is used
        only for crankcase heater calculations.

        Args:
            value (float): value for IDD Field `ratio_of_compressor_size_to_total_compressor_capacity`
                Units: W/W
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_compressor_size_to_total_compressor_capacity`'.format(value))

        self._data["Ratio of Compressor Size to Total Compressor Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater` or None if not set
        """
        return self._data["Maximum Outdoor Dry-bulb Temperature for Crankcase Heater"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater(self, value=5.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_crankcase_heater`
        Enter the maximum outdoor temperature above which the crankcase heaters are disabled.

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_crankcase_heater`
                Units: C
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater`'.format(value))

        self._data["Maximum Outdoor Dry-bulb Temperature for Crankcase Heater"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy

        Returns:
            str: the value of `defrost_strategy` or None if not set
        """
        return self._data["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="Resistive"):
        """  Corresponds to IDD Field `defrost_strategy`
        Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling
        to melt frost formation on the condenser coil. The resistive strategy uses a resitive heater
        to melt the frost.

        Args:
            value (str): value for IDD Field `defrost_strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: Resistive
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_strategy`')
            vals = set()
            vals.add("ReverseCycle")
            vals.add("Resistive")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_strategy`'.format(value))

        self._data["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control

        Returns:
            str: the value of `defrost_control` or None if not set
        """
        return self._data["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `defrost_control`
        Choose a defrost control type. Either use a fixed Timed defrost period or select
        OnDemand to defrost only when necessary.

        Args:
            value (str): value for IDD Field `defrost_control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control`')
            vals = set()
            vals.add("Timed")
            vals.add("OnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_control`'.format(value))

        self._data["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set
        """
        return self._data["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `defrost_time_period_fraction`
        Fraction of time in defrost mode.
        Only applicable if timed defrost control is specified.

        Args:
            value (float): value for IDD Field `defrost_time_period_fraction`
                Units: dimensionless
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_time_period_fraction`')

        self._data["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set
        """
        return self._data["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=None):
        """  Corresponds to IDD Field `resistive_defrost_heater_capacity`
        Enter the size of the resistive defrost heating element.
        Only applicable if resistive defrost strategy is specified

        Args:
            value (float): value for IDD Field `resistive_defrost_heater_capacity`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `resistive_defrost_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `resistive_defrost_heater_capacity`')

        self._data["Resistive Defrost Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self, value=5.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_defrost_operation`
        Enter the maximum outdoor temperature above which the crankcase heaters are disabled.

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_defrost_operation`
                Units: C
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`'.format(value))

        self._data["Maximum Outdoor Dry-bulb Temperature for Defrost Operation"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`
        Select either an air cooled or evaporatively cooled condenser.

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                      - WaterCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("EvaporativelyCooled")
            vals.add("WaterCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def water_condenser_volume_flow_rate(self):
        """Get water_condenser_volume_flow_rate

        Returns:
            float: the value of `water_condenser_volume_flow_rate` or None if not set
        """
        return self._data["Water Condenser Volume Flow Rate"]

    @water_condenser_volume_flow_rate.setter
    def water_condenser_volume_flow_rate(self, value=None):
        """  Corresponds to IDD Field `water_condenser_volume_flow_rate`
        Only used when Condenser Type = WaterCooled.

        Args:
            value (float): value for IDD Field `water_condenser_volume_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_condenser_volume_flow_rate`'.format(value))

        self._data["Water Condenser Volume Flow Rate"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `evaporative_condenser_effectiveness`
        Enter the effectiveness of the evaporatively cooled condenser.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float): value for IDD Field `evaporative_condenser_effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `evaporative_condenser_effectiveness`')

        self._data["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `evaporative_condenser_air_flow_rate`
        Used to calculate evaporative condenser water use.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float): value for IDD Field `evaporative_condenser_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `evaporative_condenser_air_flow_rate`')

        self._data["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=0.0 ):
        """  Corresponds to IDD Field `evaporative_condenser_pump_rated_power_consumption`
        Rated power consumed by the evaporative condenser's water pump.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float): value for IDD Field `evaporative_condenser_pump_rated_power_consumption`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`')

        self._data["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="Electricity"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: Electricity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def minimum_outdoor_temperature_in_heat_recovery_mode(self):
        """Get minimum_outdoor_temperature_in_heat_recovery_mode

        Returns:
            float: the value of `minimum_outdoor_temperature_in_heat_recovery_mode` or None if not set
        """
        return self._data["Minimum Outdoor Temperature in Heat Recovery Mode"]

    @minimum_outdoor_temperature_in_heat_recovery_mode.setter
    def minimum_outdoor_temperature_in_heat_recovery_mode(self, value=-15.0 ):
        """  Corresponds to IDD Field `minimum_outdoor_temperature_in_heat_recovery_mode`
        The minimum outdoor temperature below which heat
        recovery mode will not operate.

        Args:
            value (float): value for IDD Field `minimum_outdoor_temperature_in_heat_recovery_mode`
                Units: C
                Default value: -15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_temperature_in_heat_recovery_mode`'.format(value))

        self._data["Minimum Outdoor Temperature in Heat Recovery Mode"] = value

    @property
    def maximum_outdoor_temperature_in_heat_recovery_mode(self):
        """Get maximum_outdoor_temperature_in_heat_recovery_mode

        Returns:
            float: the value of `maximum_outdoor_temperature_in_heat_recovery_mode` or None if not set
        """
        return self._data["Maximum Outdoor Temperature in Heat Recovery Mode"]

    @maximum_outdoor_temperature_in_heat_recovery_mode.setter
    def maximum_outdoor_temperature_in_heat_recovery_mode(self, value=45.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_temperature_in_heat_recovery_mode`
        The maximum outdoor temperature above which heat
        recovery mode will not operate.

        Args:
            value (float): value for IDD Field `maximum_outdoor_temperature_in_heat_recovery_mode`
                Units: C
                Default value: 45.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_temperature_in_heat_recovery_mode`'.format(value))

        self._data["Maximum Outdoor Temperature in Heat Recovery Mode"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.gross_rated_total_cooling_capacity))
        out.append(self._to_str(self.gross_rated_cooling_cop))
        out.append(self._to_str(self.minimum_outdoor_temperature_in_cooling_mode))
        out.append(self._to_str(self.maximum_outdoor_temperature_in_cooling_mode))
        out.append(self._to_str(self.gross_rated_heating_capacity))
        out.append(self._to_str(self.rated_heating_capacity_sizing_ratio))
        out.append(self._to_str(self.gross_rated_heating_cop))
        out.append(self._to_str(self.minimum_outdoor_temperature_in_heating_mode))
        out.append(self._to_str(self.maximum_outdoor_temperature_in_heating_mode))
        out.append(self._to_str(self.minimum_heat_pump_partload_ratio))
        out.append(self._to_str(self.zone_name_for_master_thermostat_location))
        out.append(self._to_str(self.master_thermostat_priority_control_type))
        out.append(self._to_str(self.thermostat_priority_schedule_name))
        out.append(self._to_str(self.heat_pump_waste_heat_recovery))
        out.append(self._to_str(self.equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode))
        out.append(self._to_str(self.vertical_height_used_for_piping_correction_factor))
        out.append(self._to_str(self.equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode))
        out.append(self._to_str(self.crankcase_heater_power_per_compressor))
        out.append(self._to_str(self.number_of_compressors))
        out.append(self._to_str(self.ratio_of_compressor_size_to_total_compressor_capacity))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_crankcase_heater))
        out.append(self._to_str(self.defrost_strategy))
        out.append(self._to_str(self.defrost_control))
        out.append(self._to_str(self.defrost_time_period_fraction))
        out.append(self._to_str(self.resistive_defrost_heater_capacity))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_defrost_operation))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.water_condenser_volume_flow_rate))
        out.append(self._to_str(self.evaporative_condenser_effectiveness))
        out.append(self._to_str(self.evaporative_condenser_air_flow_rate))
        out.append(self._to_str(self.evaporative_condenser_pump_rated_power_consumption))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.minimum_outdoor_temperature_in_heat_recovery_mode))
        out.append(self._to_str(self.maximum_outdoor_temperature_in_heat_recovery_mode))
        return ",".join(out)

class HvactemplateSystemUnitary(object):
    """ Corresponds to IDD object `HVACTemplate:System:Unitary`
        Unitary furnace with air conditioner
    
    """
    internal_name = "HVACTemplate:System:Unitary"
    field_count = 52
    required_fields = ["Name", "Control Zone or Thermostat Location Name", "Heating Coil Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:Unitary`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Control Zone or Thermostat Location Name"] = None
        self._data["Supply Fan Maximum Flow Rate"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Design Supply Air Temperature"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated COP"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Design Supply Air Temperature"] = None
        self._data["Heating Coil Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Upper Temperature Limit"] = None
        self._data["Economizer Lower Temperature Limit"] = None
        self._data["Economizer Upper Enthalpy Limit"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Setpoint"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Setpoint"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_zone_or_thermostat_location_name = None
        else:
            self.control_zone_or_thermostat_location_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_maximum_flow_rate = None
        else:
            self.supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_supply_air_temperature = None
        else:
            self.cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cop = None
        else:
            self.cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_supply_air_temperature = None
        else:
            self.heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_capacity = None
        else:
            self.heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_temperature_limit = None
        else:
            self.economizer_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lower_temperature_limit = None
        else:
            self.economizer_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_enthalpy_limit = None
        else:
            self.economizer_upper_enthalpy_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint = None
        else:
            self.dehumidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_setpoint = None
        else:
            self.humidifier_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on; Unitary System always on.  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """Get control_zone_or_thermostat_location_name

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set
        """
        return self._data["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """  Corresponds to IDD Field `control_zone_or_thermostat_location_name`

        Args:
            value (str): value for IDD Field `control_zone_or_thermostat_location_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_zone_or_thermostat_location_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_zone_or_thermostat_location_name`')

        self._data["Control Zone or Thermostat Location Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """Get supply_fan_maximum_flow_rate

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_maximum_flow_rate`')

        self._data["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - SingleSpeedDX
                      - None
                Default value: SingleSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("SingleSpeedDX")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """Get cooling_design_supply_air_temperature

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_design_supply_air_temperature`'.format(value))

        self._data["Cooling Design Supply Air Temperature"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Gross SHR

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """Get cooling_coil_gross_rated_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electric power

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cop`')

        self._data["Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """Get heating_design_supply_air_temperature

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_supply_air_temperature`'.format(value))

        self._data["Heating Design Supply Air Temperature"] = value

    @property
    def heating_coil_capacity(self):
        """Get heating_coil_capacity

        Returns:
            float: the value of `heating_coil_capacity` or None if not set
        """
        return self._data["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_capacity`

        Args:
            value (float): value for IDD Field `heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_capacity`'.format(value))

        self._data["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the minimum outdoor air flow rate
        If blank, always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                      - LockoutWithHeating
                      - LockoutWithCompressor
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            vals.add("LockoutWithHeating")
            vals.add("LockoutWithCompressor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """Get economizer_upper_temperature_limit

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set
        """
        return self._data["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_temperature_limit`
        Outdoor temperature above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_temperature_limit`'.format(value))

        self._data["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """Get economizer_lower_temperature_limit

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set
        """
        return self._data["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_lower_temperature_limit`
        Outdoor temperature below which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_lower_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_lower_temperature_limit`'.format(value))

        self._data["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """Get economizer_upper_enthalpy_limit

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set
        """
        return self._data["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_enthalpy_limit`
        Outdoor enthalpy above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_enthalpy_limit`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_enthalpy_limit`'.format(value))

        self._data["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`
        Applicable only if Heat Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible cooling load only
        CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with main heating coil.
        CoolReheatDesuperheater = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with desuperheater coil.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheatHeatingCoil
                      - CoolReheatDesuperheater
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheatHeatingCoil")
            vals.add("CoolReheatDesuperheater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        This field is not currently used - the thermostat control zone is also the dehumidification control zone

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """Get dehumidification_setpoint

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self._data["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `dehumidification_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_setpoint`')

        self._data["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """Get humidifier_setpoint

        Returns:
            float: the value of `humidifier_setpoint` or None if not set
        """
        return self._data["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `humidifier_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_setpoint`')

        self._data["Humidifier Setpoint"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.control_zone_or_thermostat_location_name))
        out.append(self._to_str(self.supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_design_supply_air_temperature))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_design_supply_air_temperature))
        out.append(self._to_str(self.heating_coil_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_upper_temperature_limit))
        out.append(self._to_str(self.economizer_lower_temperature_limit))
        out.append(self._to_str(self.economizer_upper_enthalpy_limit))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_setpoint))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_setpoint))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        return ",".join(out)

class HvactemplateSystemUnitaryHeatPumpAirToAir(object):
    """ Corresponds to IDD object `HVACTemplate:System:UnitaryHeatPump:AirToAir`
        Unitary furnace with electric air-to-air heat pump
    
    """
    internal_name = "HVACTemplate:System:UnitaryHeatPump:AirToAir"
    field_count = 61
    required_fields = ["Name", "Control Zone or Thermostat Location Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:UnitaryHeatPump:AirToAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Control Zone or Thermostat Location Name"] = None
        self._data["Cooling Supply Air Flow Rate"] = None
        self._data["Heating Supply Air Flow Rate"] = None
        self._data["No Load Supply Air Flow Rate"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Design Supply Air Temperature"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated COP"] = None
        self._data["Heat Pump Heating Coil Type"] = None
        self._data["Heat Pump Heating Coil Availability Schedule Name"] = None
        self._data["Heating Design Supply Air Temperature"] = None
        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = None
        self._data["Heat Pump Heating Coil Rated COP"] = None
        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Strategy"] = None
        self._data["Heat Pump Defrost Control"] = None
        self._data["Heat Pump Defrost Time Period Fraction"] = None
        self._data["Supplemental Heating Coil Type"] = None
        self._data["Supplemental Heating Coil Availability Schedule Name"] = None
        self._data["Supplemental Heating Coil Capacity"] = None
        self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Supplemental Gas Heating Coil Efficiency"] = None
        self._data["Supplemental Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = None
        self._data["Economizer Maximum Limit Enthalpy"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Setpoint"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_zone_or_thermostat_location_name = None
        else:
            self.control_zone_or_thermostat_location_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_supply_air_flow_rate = None
        else:
            self.cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_supply_air_flow_rate = None
        else:
            self.heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.no_load_supply_air_flow_rate = None
        else:
            self.no_load_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_supply_air_temperature = None
        else:
            self.cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cop = None
        else:
            self.cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_type = None
        else:
            self.heat_pump_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_availability_schedule_name = None
        else:
            self.heat_pump_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_supply_air_temperature = None
        else:
            self.heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_capacity = None
        else:
            self.heat_pump_heating_coil_gross_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_rated_cop = None
        else:
            self.heat_pump_heating_coil_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_strategy = None
        else:
            self.heat_pump_defrost_strategy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_control = None
        else:
            self.heat_pump_defrost_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_time_period_fraction = None
        else:
            self.heat_pump_defrost_time_period_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_type = None
        else:
            self.supplemental_heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_availability_schedule_name = None
        else:
            self.supplemental_heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_capacity = None
        else:
            self.supplemental_heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature = None
        else:
            self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_coil_efficiency = None
        else:
            self.supplemental_gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_coil_parasitic_electric_load = None
        else:
            self.supplemental_gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_drybulb_temperature = None
        else:
            self.economizer_maximum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_enthalpy = None
        else:
            self.economizer_maximum_limit_enthalpy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_minimum_limit_drybulb_temperature = None
        else:
            self.economizer_minimum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_setpoint = None
        else:
            self.humidifier_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on; Unitary System always on.  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """Get control_zone_or_thermostat_location_name

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set
        """
        return self._data["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """  Corresponds to IDD Field `control_zone_or_thermostat_location_name`

        Args:
            value (str): value for IDD Field `control_zone_or_thermostat_location_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_zone_or_thermostat_location_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_zone_or_thermostat_location_name`')

        self._data["Control Zone or Thermostat Location Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """Get cooling_supply_air_flow_rate

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cooling_supply_air_flow_rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `cooling_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_supply_air_flow_rate`')

        self._data["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """Get heating_supply_air_flow_rate

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heating_supply_air_flow_rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `heating_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_supply_air_flow_rate`')

        self._data["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """Get no_load_supply_air_flow_rate

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self._data["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `no_load_supply_air_flow_rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is Continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `no_load_supply_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `no_load_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `no_load_supply_air_flow_rate`')

        self._data["No Load Supply Air Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - SingleSpeedDX
                Default value: SingleSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("SingleSpeedDX")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """Get cooling_design_supply_air_temperature

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_design_supply_air_temperature`'.format(value))

        self._data["Cooling Design Supply Air Temperature"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """Get cooling_coil_gross_rated_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electric power input

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cop`')

        self._data["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """Get heat_pump_heating_coil_type

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set
        """
        return self._data["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="SingleSpeedDXHeatPump"):
        """  Corresponds to IDD Field `heat_pump_heating_coil_type`

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_type`
                Accepted values are:
                      - SingleSpeedDXHeatPump
                Default value: SingleSpeedDXHeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_type`')
            vals = set()
            vals.add("SingleSpeedDXHeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_heating_coil_type`'.format(value))

        self._data["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """Get heat_pump_heating_coil_availability_schedule_name

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heat_pump_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_heating_coil_availability_schedule_name`')

        self._data["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """Get heating_design_supply_air_temperature

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_supply_air_temperature`'.format(value))

        self._data["Heating Design Supply Air Temperature"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """Get heat_pump_heating_coil_gross_rated_capacity

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value=None):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_capacity`
        Rated heating capacity excluding the effect of supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_capacity`')

        self._data["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_rated_cop(self):
        """Get heat_pump_heating_coil_rated_cop

        Returns:
            float: the value of `heat_pump_heating_coil_rated_cop` or None if not set
        """
        return self._data["Heat Pump Heating Coil Rated COP"]

    @heat_pump_heating_coil_rated_cop.setter
    def heat_pump_heating_coil_rated_cop(self, value=2.75 ):
        """  Corresponds to IDD Field `heat_pump_heating_coil_rated_cop`
        Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy.
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_rated_cop`
                Units: W/W
                Default value: 2.75
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_rated_cop`')

        self._data["Heat Pump Heating Coil Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """Get heat_pump_heating_minimum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self, value=-8.0 ):
        """  Corresponds to IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`
                Units: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """Get heat_pump_defrost_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0 ):
        """  Corresponds to IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """Get heat_pump_defrost_strategy

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set
        """
        return self._data["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `heat_pump_defrost_strategy`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_strategy`')
            vals = set()
            vals.add("ReverseCycle")
            vals.add("Resistive")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_strategy`'.format(value))

        self._data["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """Get heat_pump_defrost_control

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set
        """
        return self._data["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `heat_pump_defrost_control`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_control`')
            vals = set()
            vals.add("Timed")
            vals.add("OnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_control`'.format(value))

        self._data["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """Get heat_pump_defrost_time_period_fraction

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set
        """
        return self._data["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `heat_pump_defrost_time_period_fraction`
        Fraction of time in defrost mode
        only applicable if Timed defrost control is specified

        Args:
            value (float): value for IDD Field `heat_pump_defrost_time_period_fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_time_period_fraction`')

        self._data["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_coil_type(self):
        """Get supplemental_heating_coil_type

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """  Corresponds to IDD Field `supplemental_heating_coil_type`

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - HotWater
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_type`'.format(value))

        self._data["Supplemental Heating Coil Type"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """Get supplemental_heating_coil_availability_schedule_name

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_availability_schedule_name`')

        self._data["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """Get supplemental_heating_coil_capacity

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set
        """
        return self._data["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_capacity`

        Args:
            value (float): value for IDD Field `supplemental_heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_coil_capacity`'.format(value))

        self._data["Supplemental Heating Coil Capacity"] = value

    @property
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self):
        """Get supplemental_heating_coil_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `supplemental_heating_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self, value=21.0 ):
        """  Corresponds to IDD Field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `supplemental_heating_coil_maximum_outdoor_drybulb_temperature`')

        self._data["Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_coil_efficiency(self):
        """Get supplemental_gas_heating_coil_efficiency

        Returns:
            float: the value of `supplemental_gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Supplemental Gas Heating Coil Efficiency"]

    @supplemental_gas_heating_coil_efficiency.setter
    def supplemental_gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_coil_efficiency`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supplemental_gas_heating_coil_efficiency`')

        self._data["Supplemental Gas Heating Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_coil_parasitic_electric_load(self):
        """Get supplemental_gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `supplemental_gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Supplemental Gas Heating Coil Parasitic Electric Load"]

    @supplemental_gas_heating_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_coil_parasitic_electric_load`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_coil_parasitic_electric_load`')

        self._data["Supplemental Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the minimum outdoor air flow rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                      - LockoutWithHeating
                      - LockoutWithCompressor
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            vals.add("LockoutWithHeating")
            vals.add("LockoutWithCompressor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """Get economizer_maximum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_drybulb_temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """Get economizer_maximum_limit_enthalpy

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set
        """
        return self._data["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_enthalpy`
        Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_enthalpy`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_enthalpy`'.format(value))

        self._data["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """Get economizer_minimum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_minimum_limit_drybulb_temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_minimum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_minimum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`
        Applicable only if Heat Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """Get humidifier_setpoint

        Returns:
            float: the value of `humidifier_setpoint` or None if not set
        """
        return self._data["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `humidifier_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_setpoint`')

        self._data["Humidifier Setpoint"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.control_zone_or_thermostat_location_name))
        out.append(self._to_str(self.cooling_supply_air_flow_rate))
        out.append(self._to_str(self.heating_supply_air_flow_rate))
        out.append(self._to_str(self.no_load_supply_air_flow_rate))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_design_supply_air_temperature))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_coil_type))
        out.append(self._to_str(self.heat_pump_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_design_supply_air_temperature))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_capacity))
        out.append(self._to_str(self.heat_pump_heating_coil_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_minimum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_strategy))
        out.append(self._to_str(self.heat_pump_defrost_control))
        out.append(self._to_str(self.heat_pump_defrost_time_period_fraction))
        out.append(self._to_str(self.supplemental_heating_coil_type))
        out.append(self._to_str(self.supplemental_heating_coil_availability_schedule_name))
        out.append(self._to_str(self.supplemental_heating_coil_capacity))
        out.append(self._to_str(self.supplemental_heating_coil_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.supplemental_gas_heating_coil_efficiency))
        out.append(self._to_str(self.supplemental_gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_maximum_limit_drybulb_temperature))
        out.append(self._to_str(self.economizer_maximum_limit_enthalpy))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.economizer_minimum_limit_drybulb_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_setpoint))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        return ",".join(out)

class HvactemplateSystemUnitarySystem(object):
    """ Corresponds to IDD object `HVACTemplate:System:UnitarySystem`
        Unitary HVAC system with optional cooling and heating. Supports DX and chilled water,
        cooling, gas, electric, and hot water heating, air-to-air and water-to-air heat pumps.
    
    """
    internal_name = "HVACTemplate:System:UnitarySystem"
    field_count = 72
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:UnitarySystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Control Type"] = None
        self._data["Control Zone or Thermostat Location Name"] = None
        self._data["Cooling Supply Air Flow Rate"] = None
        self._data["Heating Supply Air Flow Rate"] = None
        self._data["No Load Supply Air Flow Rate"] = None
        self._data["Supply Fan Operating Mode Schedule Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Number of Speeds for Cooling"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Design Supply Air Temperature"] = None
        self._data["DX Cooling Coil Gross Rated Total Capacity"] = None
        self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["DX Cooling Coil Gross Rated COP"] = None
        self._data["Heating Coil Type"] = None
        self._data["Number of Speeds or Stages for Heating"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Design Supply Air Temperature"] = None
        self._data["Heating Coil Gross Rated Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Heat Pump Heating Coil Gross Rated COP"] = None
        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Heat Pump Defrost Strategy"] = None
        self._data["Heat Pump Defrost Control"] = None
        self._data["Heat Pump Defrost Time Period Fraction"] = None
        self._data["Supplemental Heating or Reheat Coil Type"] = None
        self._data["Supplemental Heating or Reheat Coil Availability Schedule Name"] = None
        self._data["Supplemental Heating or Reheat Coil Capacity"] = None
        self._data["Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature"] = None
        self._data["Supplemental Gas Heating or Reheat Coil Efficiency"] = None
        self._data["Supplemental Gas Heating or Reheat Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = None
        self._data["Economizer Maximum Limit Enthalpy"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Heat Recovery Heat Exchanger Type"] = None
        self._data["Heat Recovery Frost Control Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Relative Humidity Setpoint"] = None
        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Relative Humidity Setpoint"] = None
        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = None
        self._data["Sizing Option"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_type = None
        else:
            self.control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_zone_or_thermostat_location_name = None
        else:
            self.control_zone_or_thermostat_location_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_supply_air_flow_rate = None
        else:
            self.cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_supply_air_flow_rate = None
        else:
            self.heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.no_load_supply_air_flow_rate = None
        else:
            self.no_load_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_operating_mode_schedule_name = None
        else:
            self.supply_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_speeds_for_cooling = None
        else:
            self.number_of_speeds_for_cooling = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_supply_air_temperature = None
        else:
            self.cooling_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_total_capacity = None
        else:
            self.dx_cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.dx_cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_cop = None
        else:
            self.dx_cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_speeds_or_stages_for_heating = None
        else:
            self.number_of_speeds_or_stages_for_heating = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_supply_air_temperature = None
        else:
            self.heating_design_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_gross_rated_capacity = None
        else:
            self.heating_coil_gross_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_coil_gross_rated_cop = None
        else:
            self.heat_pump_heating_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_heating_minimum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = None
        else:
            self.heat_pump_defrost_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_strategy = None
        else:
            self.heat_pump_defrost_strategy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_control = None
        else:
            self.heat_pump_defrost_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_defrost_time_period_fraction = None
        else:
            self.heat_pump_defrost_time_period_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_or_reheat_coil_type = None
        else:
            self.supplemental_heating_or_reheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_or_reheat_coil_availability_schedule_name = None
        else:
            self.supplemental_heating_or_reheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_or_reheat_coil_capacity = None
        else:
            self.supplemental_heating_or_reheat_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature = None
        else:
            self.supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_or_reheat_coil_efficiency = None
        else:
            self.supplemental_gas_heating_or_reheat_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_gas_heating_or_reheat_coil_parasitic_electric_load = None
        else:
            self.supplemental_gas_heating_or_reheat_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_drybulb_temperature = None
        else:
            self.economizer_maximum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_enthalpy = None
        else:
            self.economizer_maximum_limit_enthalpy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_minimum_limit_drybulb_temperature = None
        else:
            self.economizer_minimum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_heat_exchanger_type = None
        else:
            self.heat_recovery_heat_exchanger_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_frost_control_type = None
        else:
            self.heat_recovery_frost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint = None
        else:
            self.dehumidification_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint_schedule_name = None
        else:
            self.dehumidification_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint = None
        else:
            self.humidifier_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint_schedule_name = None
        else:
            self.humidifier_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_option = None
        else:
            self.sizing_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always available. Also see Supply Fan Operating Mode Schedule Name field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def control_type(self):
        """Get control_type

        Returns:
            str: the value of `control_type` or None if not set
        """
        return self._data["Control Type"]

    @control_type.setter
    def control_type(self, value="Load"):
        """  Corresponds to IDD Field `control_type`
        Load control requires a Controlling Zone name.
        SetPoint control requires set points at coil outlet nodes. The user must add appropriate
        SetpointManager objects to the idf file.

        Args:
            value (str): value for IDD Field `control_type`
                Accepted values are:
                      - Load
                      - SetPoint
                Default value: Load
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_type`')
            vals = set()
            vals.add("Load")
            vals.add("SetPoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_type`'.format(value))

        self._data["Control Type"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """Get control_zone_or_thermostat_location_name

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set
        """
        return self._data["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """  Corresponds to IDD Field `control_zone_or_thermostat_location_name`
        This field is required if Control Type is Load.

        Args:
            value (str): value for IDD Field `control_zone_or_thermostat_location_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_zone_or_thermostat_location_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_zone_or_thermostat_location_name`')

        self._data["Control Zone or Thermostat Location Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """Get cooling_supply_air_flow_rate

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cooling_supply_air_flow_rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `cooling_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_supply_air_flow_rate`')

        self._data["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """Get heating_supply_air_flow_rate

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heating_supply_air_flow_rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `heating_supply_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_supply_air_flow_rate`')

        self._data["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """Get no_load_supply_air_flow_rate

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self._data["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `no_load_supply_air_flow_rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is Continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `no_load_supply_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `no_load_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `no_load_supply_air_flow_rate`')

        self._data["No Load Supply Air Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """Get supply_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_operating_mode_schedule_name`
        Refers to a schedule to specify unitary supply fan operating mode.
        Schedule values of 0 indicate cycling fan (auto)
        Schedule values of 1 indicate continuous fan (on)
        If this field is left blank, a schedule of always zero (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `supply_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_operating_mode_schedule_name`')

        self._data["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - SingleSpeedDX
                      - TwoSpeedDX
                      - MultiSpeedDX
                      - TwoStageDX
                      - TwoStageHumidityControlDX
                      - HeatExchangerAssistedDX
                      - SingleSpeedDXWaterCooled
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                      - HeatExchangerAssistedChilledWater
                      - None
                Default value: SingleSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("SingleSpeedDX")
            vals.add("TwoSpeedDX")
            vals.add("MultiSpeedDX")
            vals.add("TwoStageDX")
            vals.add("TwoStageHumidityControlDX")
            vals.add("HeatExchangerAssistedDX")
            vals.add("SingleSpeedDXWaterCooled")
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            vals.add("HeatExchangerAssistedChilledWater")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def number_of_speeds_for_cooling(self):
        """Get number_of_speeds_for_cooling

        Returns:
            int: the value of `number_of_speeds_for_cooling` or None if not set
        """
        return self._data["Number of Speeds for Cooling"]

    @number_of_speeds_for_cooling.setter
    def number_of_speeds_for_cooling(self, value=1 ):
        """  Corresponds to IDD Field `number_of_speeds_for_cooling`
        Used only for Cooling Coil Type = MultiSpeedDX.

        Args:
            value (int): value for IDD Field `number_of_speeds_for_cooling`
                Default value: 1
                value >= 0
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds_for_cooling`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_speeds_for_cooling`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds_for_cooling`')

        self._data["Number of Speeds for Cooling"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """Get cooling_design_supply_air_temperature

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set
        """
        return self._data["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `cooling_design_supply_air_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_design_supply_air_temperature`'.format(value))

        self._data["Cooling Design Supply Air Temperature"] = value

    @property
    def dx_cooling_coil_gross_rated_total_capacity(self):
        """Get dx_cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated Total Capacity"]

    @dx_cooling_coil_gross_rated_total_capacity.setter
    def dx_cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_total_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_total_capacity`'.format(value))

        self._data["DX Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get dx_cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"]

    @dx_cooling_coil_gross_rated_sensible_heat_ratio.setter
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_sensible_heat_ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def dx_cooling_coil_gross_rated_cop(self):
        """Get dx_cooling_coil_gross_rated_cop

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated COP"]

    @dx_cooling_coil_gross_rated_cop.setter
    def dx_cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electric power input

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `dx_cooling_coil_gross_rated_cop`')

        self._data["DX Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="Gas"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - HotWater
                      - SingleSpeedDXHeatPumpAirSource
                      - MultiSpeedDXHeatPumpAirSource
                      - SingleSpeedDXHeatPumpWaterSource
                      - MultiStageElectric
                      - MultiStageGas
                      - None
                Default value: Gas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("HotWater")
            vals.add("SingleSpeedDXHeatPumpAirSource")
            vals.add("MultiSpeedDXHeatPumpAirSource")
            vals.add("SingleSpeedDXHeatPumpWaterSource")
            vals.add("MultiStageElectric")
            vals.add("MultiStageGas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def number_of_speeds_or_stages_for_heating(self):
        """Get number_of_speeds_or_stages_for_heating

        Returns:
            int: the value of `number_of_speeds_or_stages_for_heating` or None if not set
        """
        return self._data["Number of Speeds or Stages for Heating"]

    @number_of_speeds_or_stages_for_heating.setter
    def number_of_speeds_or_stages_for_heating(self, value=1 ):
        """  Corresponds to IDD Field `number_of_speeds_or_stages_for_heating`
        Used only for Heating Coil Type = MultiSpeedDXHeatPumpAirSource),
        MultiStageElectric, or MultiStageGas.

        Args:
            value (int): value for IDD Field `number_of_speeds_or_stages_for_heating`
                Default value: 1
                value >= 0
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds_or_stages_for_heating`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_speeds_or_stages_for_heating`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds_or_stages_for_heating`')

        self._data["Number of Speeds or Stages for Heating"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """Get heating_design_supply_air_temperature

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set
        """
        return self._data["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_design_supply_air_temperature`
        Used for sizing.

        Args:
            value (float): value for IDD Field `heating_design_supply_air_temperature`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_supply_air_temperature`'.format(value))

        self._data["Heating Design Supply Air Temperature"] = value

    @property
    def heating_coil_gross_rated_capacity(self):
        """Get heating_coil_gross_rated_capacity

        Returns:
            float: the value of `heating_coil_gross_rated_capacity` or None if not set
        """
        return self._data["Heating Coil Gross Rated Capacity"]

    @heating_coil_gross_rated_capacity.setter
    def heating_coil_gross_rated_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_gross_rated_capacity`
        Rated heating capacity excluding the effect of supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `heating_coil_gross_rated_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_gross_rated_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_coil_gross_rated_capacity`')

        self._data["Heating Coil Gross Rated Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """Get heat_pump_heating_coil_gross_rated_cop

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set
        """
        return self._data["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=2.75 ):
        """  Corresponds to IDD Field `heat_pump_heating_coil_gross_rated_cop`
        Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy.
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C
        Applies only to DX coils

        Args:
            value (float): value for IDD Field `heat_pump_heating_coil_gross_rated_cop`
                Units: W/W
                Default value: 2.75
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heat_pump_heating_coil_gross_rated_cop`')

        self._data["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """Get heat_pump_heating_minimum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self, value=-8.0 ):
        """  Corresponds to IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_heating_minimum_outdoor_drybulb_temperature`
                Units: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `heat_pump_heating_minimum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """Get heat_pump_defrost_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0 ):
        """  Corresponds to IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`

        Args:
            value (float): value for IDD Field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `heat_pump_defrost_maximum_outdoor_drybulb_temperature`')

        self._data["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """Get heat_pump_defrost_strategy

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set
        """
        return self._data["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `heat_pump_defrost_strategy`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_strategy`')
            vals = set()
            vals.add("ReverseCycle")
            vals.add("Resistive")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_strategy`'.format(value))

        self._data["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """Get heat_pump_defrost_control

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set
        """
        return self._data["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `heat_pump_defrost_control`

        Args:
            value (str): value for IDD Field `heat_pump_defrost_control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_defrost_control`')
            vals = set()
            vals.add("Timed")
            vals.add("OnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_defrost_control`'.format(value))

        self._data["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """Get heat_pump_defrost_time_period_fraction

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set
        """
        return self._data["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `heat_pump_defrost_time_period_fraction`
        Fraction of time in defrost mode
        only applicable if Timed defrost control is specified

        Args:
            value (float): value for IDD Field `heat_pump_defrost_time_period_fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_defrost_time_period_fraction`')

        self._data["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_or_reheat_coil_type(self):
        """Get supplemental_heating_or_reheat_coil_type

        Returns:
            str: the value of `supplemental_heating_or_reheat_coil_type` or None if not set
        """
        return self._data["Supplemental Heating or Reheat Coil Type"]

    @supplemental_heating_or_reheat_coil_type.setter
    def supplemental_heating_or_reheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `supplemental_heating_or_reheat_coil_type`

        Args:
            value (str): value for IDD Field `supplemental_heating_or_reheat_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - HotWater
                      - DesuperHeater
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_or_reheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_or_reheat_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("HotWater")
            vals.add("DesuperHeater")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_or_reheat_coil_type`'.format(value))

        self._data["Supplemental Heating or Reheat Coil Type"] = value

    @property
    def supplemental_heating_or_reheat_coil_availability_schedule_name(self):
        """Get supplemental_heating_or_reheat_coil_availability_schedule_name

        Returns:
            str: the value of `supplemental_heating_or_reheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Supplemental Heating or Reheat Coil Availability Schedule Name"]

    @supplemental_heating_or_reheat_coil_availability_schedule_name.setter
    def supplemental_heating_or_reheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_or_reheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `supplemental_heating_or_reheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_or_reheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_or_reheat_coil_availability_schedule_name`')

        self._data["Supplemental Heating or Reheat Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_or_reheat_coil_capacity(self):
        """Get supplemental_heating_or_reheat_coil_capacity

        Returns:
            float: the value of `supplemental_heating_or_reheat_coil_capacity` or None if not set
        """
        return self._data["Supplemental Heating or Reheat Coil Capacity"]

    @supplemental_heating_or_reheat_coil_capacity.setter
    def supplemental_heating_or_reheat_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_or_reheat_coil_capacity`

        Args:
            value (float): value for IDD Field `supplemental_heating_or_reheat_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_or_reheat_coil_capacity`'.format(value))

        self._data["Supplemental Heating or Reheat Coil Capacity"] = value

    @property
    def supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature(self):
        """Get supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature

        Returns:
            float: the value of `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self._data["Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature(self, value=21.0 ):
        """  Corresponds to IDD Field `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature`
                Units: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature`')

        self._data["Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_or_reheat_coil_efficiency(self):
        """Get supplemental_gas_heating_or_reheat_coil_efficiency

        Returns:
            float: the value of `supplemental_gas_heating_or_reheat_coil_efficiency` or None if not set
        """
        return self._data["Supplemental Gas Heating or Reheat Coil Efficiency"]

    @supplemental_gas_heating_or_reheat_coil_efficiency.setter
    def supplemental_gas_heating_or_reheat_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_or_reheat_coil_efficiency`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_or_reheat_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_or_reheat_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_or_reheat_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supplemental_gas_heating_or_reheat_coil_efficiency`')

        self._data["Supplemental Gas Heating or Reheat Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_or_reheat_coil_parasitic_electric_load(self):
        """Get supplemental_gas_heating_or_reheat_coil_parasitic_electric_load

        Returns:
            float: the value of `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Supplemental Gas Heating or Reheat Coil Parasitic Electric Load"]

    @supplemental_gas_heating_or_reheat_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_or_reheat_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load`
        Applies only if Supplemental Heating Coil Type is Gas

        Args:
            value (float): value for IDD Field `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load`')

        self._data["Supplemental Gas Heating or Reheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the minimum outdoor air flow rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                      - LockoutWithHeating
                      - LockoutWithCompressor
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            vals.add("LockoutWithHeating")
            vals.add("LockoutWithCompressor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """Get economizer_maximum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_drybulb_temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """Get economizer_maximum_limit_enthalpy

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set
        """
        return self._data["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_enthalpy`
        Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_enthalpy`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_enthalpy`'.format(value))

        self._data["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """Get economizer_minimum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_minimum_limit_drybulb_temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_minimum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_minimum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Return plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`
        Applicable only if Heat Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """Get heat_recovery_heat_exchanger_type

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set
        """
        return self._data["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """  Corresponds to IDD Field `heat_recovery_heat_exchanger_type`

        Args:
            value (str): value for IDD Field `heat_recovery_heat_exchanger_type`
                Accepted values are:
                      - Plate
                      - Rotary
                Default value: Plate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_heat_exchanger_type`')
            vals = set()
            vals.add("Plate")
            vals.add("Rotary")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_heat_exchanger_type`'.format(value))

        self._data["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """Get heat_recovery_frost_control_type

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set
        """
        return self._data["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_frost_control_type`

        Args:
            value (str): value for IDD Field `heat_recovery_frost_control_type`
                Accepted values are:
                      - None
                      - ExhaustAirRecirculation
                      - ExhaustOnly
                      - MinimumExhaustTemperature
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_frost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_frost_control_type`')
            vals = set()
            vals.add("None")
            vals.add("ExhaustAirRecirculation")
            vals.add("ExhaustOnly")
            vals.add("MinimumExhaustTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_frost_control_type`'.format(value))

        self._data["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil
        If no reheat coil specified, cold supply temps may occur.
        Multimode = activate enhanced dehumidification mode as needed and meet sensible load.
        Valid only for Cooling Coil Type = TwoStageHumidityControlDX

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                      - Multimode
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            vals.add("Multimode")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """Get dehumidification_relative_humidity_setpoint

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)
        Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `dehumidification_relative_humidity_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')

        self._data["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """Get dehumidification_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Dehumidification Relative Humidity
        Setpoint above. Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`')

        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """Get humidifier_relative_humidity_setpoint

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100).
        Ignored if Humidifier Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `humidifier_relative_humidity_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')

        self._data["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """Get humidifier_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Humidifier Relative Humidity
        Setpoint above.Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`')

        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def sizing_option(self):
        """Get sizing_option

        Returns:
            str: the value of `sizing_option` or None if not set
        """
        return self._data["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """  Corresponds to IDD Field `sizing_option`
        Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident
        zone air flow rates.

        Args:
            value (str): value for IDD Field `sizing_option`
                Accepted values are:
                      - Coincident
                      - NonCoincident
                Default value: NonCoincident
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sizing_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sizing_option`')
            vals = set()
            vals.add("Coincident")
            vals.add("NonCoincident")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sizing_option`'.format(value))

        self._data["Sizing Option"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=300.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 300.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.control_type))
        out.append(self._to_str(self.control_zone_or_thermostat_location_name))
        out.append(self._to_str(self.cooling_supply_air_flow_rate))
        out.append(self._to_str(self.heating_supply_air_flow_rate))
        out.append(self._to_str(self.no_load_supply_air_flow_rate))
        out.append(self._to_str(self.supply_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.number_of_speeds_for_cooling))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_design_supply_air_temperature))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.number_of_speeds_or_stages_for_heating))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_design_supply_air_temperature))
        out.append(self._to_str(self.heating_coil_gross_rated_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.heat_pump_heating_coil_gross_rated_cop))
        out.append(self._to_str(self.heat_pump_heating_minimum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.heat_pump_defrost_strategy))
        out.append(self._to_str(self.heat_pump_defrost_control))
        out.append(self._to_str(self.heat_pump_defrost_time_period_fraction))
        out.append(self._to_str(self.supplemental_heating_or_reheat_coil_type))
        out.append(self._to_str(self.supplemental_heating_or_reheat_coil_availability_schedule_name))
        out.append(self._to_str(self.supplemental_heating_or_reheat_coil_capacity))
        out.append(self._to_str(self.supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature))
        out.append(self._to_str(self.supplemental_gas_heating_or_reheat_coil_efficiency))
        out.append(self._to_str(self.supplemental_gas_heating_or_reheat_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_maximum_limit_drybulb_temperature))
        out.append(self._to_str(self.economizer_maximum_limit_enthalpy))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.economizer_minimum_limit_drybulb_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.heat_recovery_heat_exchanger_type))
        out.append(self._to_str(self.heat_recovery_frost_control_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.sizing_option))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        return ",".join(out)

class HvactemplateSystemVav(object):
    """ Corresponds to IDD object `HVACTemplate:System:VAV`
        Variable Air Volume (VAV) air loop with optional heating coil
        and optional preheat.
    
    """
    internal_name = "HVACTemplate:System:VAV"
    field_count = 61
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:VAV`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Maximum Flow Rate"] = None
        self._data["Supply Fan Minimum Flow Rate"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Setpoint Schedule Name"] = None
        self._data["Cooling Coil Design Setpoint"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Setpoint Schedule Name"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Preheat Coil Type"] = None
        self._data["Preheat Coil Availability Schedule Name"] = None
        self._data["Preheat Coil Setpoint Schedule Name"] = None
        self._data["Preheat Coil Design Setpoint"] = None
        self._data["Gas Preheat Coil Efficiency"] = None
        self._data["Gas Preheat Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Upper Temperature Limit"] = None
        self._data["Economizer Lower Temperature Limit"] = None
        self._data["Economizer Upper Enthalpy Limit"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Part-Load Power Coefficients"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Cooling Coil Setpoint Reset Type"] = None
        self._data["Heating Coil Setpoint Reset Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Setpoint"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Setpoint"] = None
        self._data["Sizing Option"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None
        self._data["Return Fan Part-Load Power Coefficients"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_maximum_flow_rate = None
        else:
            self.supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_minimum_flow_rate = None
        else:
            self.supply_fan_minimum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_schedule_name = None
        else:
            self.cooling_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint = None
        else:
            self.cooling_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_schedule_name = None
        else:
            self.heating_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_type = None
        else:
            self.preheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_availability_schedule_name = None
        else:
            self.preheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_setpoint_schedule_name = None
        else:
            self.preheat_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_design_setpoint = None
        else:
            self.preheat_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_efficiency = None
        else:
            self.gas_preheat_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_parasitic_electric_load = None
        else:
            self.gas_preheat_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_control_type = None
        else:
            self.minimum_outdoor_air_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_temperature_limit = None
        else:
            self.economizer_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lower_temperature_limit = None
        else:
            self.economizer_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_enthalpy_limit = None
        else:
            self.economizer_upper_enthalpy_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_partload_power_coefficients = None
        else:
            self.supply_fan_partload_power_coefficients = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_reset_type = None
        else:
            self.cooling_coil_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_reset_type = None
        else:
            self.heating_coil_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint = None
        else:
            self.dehumidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_setpoint = None
        else:
            self.humidifier_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_option = None
        else:
            self.sizing_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_partload_power_coefficients = None
        else:
            self.return_fan_partload_power_coefficients = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on; VAV System always on.  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """Get supply_fan_maximum_flow_rate

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_maximum_flow_rate`')

        self._data["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_minimum_flow_rate(self):
        """Get supply_fan_minimum_flow_rate

        Returns:
            float: the value of `supply_fan_minimum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Minimum Flow Rate"]

    @supply_fan_minimum_flow_rate.setter
    def supply_fan_minimum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_minimum_flow_rate`
        This field is only used to set a minimum part load on the VAV fan power curve.
        Autosize or zero is recommended.

        Args:
            value (float): value for IDD Field `supply_fan_minimum_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_minimum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_minimum_flow_rate`')

        self._data["Supply Fan Minimum Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                Default value: ChilledWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """Get cooling_coil_setpoint_schedule_name

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_schedule_name`')

        self._data["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """Get cooling_coil_design_setpoint

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint`'.format(value))

        self._data["Cooling Coil Design Setpoint"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="None"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """Get heating_coil_setpoint_schedule_name

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_schedule_name`')

        self._data["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """Get preheat_coil_type

        Returns:
            str: the value of `preheat_coil_type` or None if not set
        """
        return self._data["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `preheat_coil_type`

        Args:
            value (str): value for IDD Field `preheat_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `preheat_coil_type`'.format(value))

        self._data["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """Get preheat_coil_availability_schedule_name

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `preheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_availability_schedule_name`')

        self._data["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """Get preheat_coil_setpoint_schedule_name

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `preheat_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_setpoint_schedule_name`')

        self._data["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """Get preheat_coil_design_setpoint

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set
        """
        return self._data["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2 ):
        """  Corresponds to IDD Field `preheat_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `preheat_coil_design_setpoint`
                Units: C
                Default value: 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `preheat_coil_design_setpoint`'.format(value))

        self._data["Preheat Coil Design Setpoint"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """Get gas_preheat_coil_efficiency

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set
        """
        return self._data["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_preheat_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_preheat_coil_efficiency`')

        self._data["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """Get gas_preheat_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_preheat_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_parasitic_electric_load`')

        self._data["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """Get minimum_outdoor_air_control_type

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set
        """
        return self._data["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """  Corresponds to IDD Field `minimum_outdoor_air_control_type`

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_control_type`
                Accepted values are:
                      - FixedMinimum
                      - ProportionalMinimum
                Default value: ProportionalMinimum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_control_type`')
            vals = set()
            vals.add("FixedMinimum")
            vals.add("ProportionalMinimum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `minimum_outdoor_air_control_type`'.format(value))

        self._data["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the Minimum Outdoor Air Flow Rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """Get economizer_upper_temperature_limit

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set
        """
        return self._data["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_temperature_limit`
        Outdoor temperature above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_temperature_limit`'.format(value))

        self._data["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """Get economizer_lower_temperature_limit

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set
        """
        return self._data["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_lower_temperature_limit`
        Outdoor temperature below which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_lower_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_lower_temperature_limit`'.format(value))

        self._data["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """Get economizer_upper_enthalpy_limit

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set
        """
        return self._data["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_enthalpy_limit`
        Outdoor enthalpy above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_enthalpy_limit`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_enthalpy_limit`'.format(value))

        self._data["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - DrawThrough
                      - BlowThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("DrawThrough")
            vals.add("BlowThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_partload_power_coefficients(self):
        """Get supply_fan_partload_power_coefficients

        Returns:
            str: the value of `supply_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Supply Fan Part-Load Power Coefficients"]

    @supply_fan_partload_power_coefficients.setter
    def supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `supply_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `supply_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_partload_power_coefficients`'.format(value))

        self._data["Supply Fan Part-Load Power Coefficients"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                      - CycleOnAnyZoneFansOnly
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            vals.add("CycleOnAnyZoneFansOnly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def cooling_coil_setpoint_reset_type(self):
        """Get cooling_coil_setpoint_reset_type

        Returns:
            str: the value of `cooling_coil_setpoint_reset_type` or None if not set
        """
        return self._data["Cooling Coil Setpoint Reset Type"]

    @cooling_coil_setpoint_reset_type.setter
    def cooling_coil_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `cooling_coil_setpoint_reset_type`
        Overrides Cooling Coil Setpoint Schedule Name
        None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule
        Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate
        OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB,
        to the Cooling Design Setpoint at 26.7C)
        WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at
        min supply air flow rate

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_reset_type`
                Accepted values are:
                      - None
                      - Warmest
                      - OutdoorAirTemperatureReset
                      - WarmestTemperatureFirst
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("Warmest")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("WarmestTemperatureFirst")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_setpoint_reset_type`'.format(value))

        self._data["Cooling Coil Setpoint Reset Type"] = value

    @property
    def heating_coil_setpoint_reset_type(self):
        """Get heating_coil_setpoint_reset_type

        Returns:
            str: the value of `heating_coil_setpoint_reset_type` or None if not set
        """
        return self._data["Heating Coil Setpoint Reset Type"]

    @heating_coil_setpoint_reset_type.setter
    def heating_coil_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `heating_coil_setpoint_reset_type`
        Overrides Heating Coil Setpoint Schedule Name
        None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule
        OutdoorAirTemperatureReset = reset based on outdoor air temperature
        (Heating Design Setpoint at -6.7C ODB to Heating Desing Setpoint minus 5.2C at 10C ODB)
        min supply air flow rate

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_reset_type`
                Accepted values are:
                      - None
                      - OutdoorAirTemperatureReset
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("OutdoorAirTemperatureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_setpoint_reset_type`'.format(value))

        self._data["Heating Coil Setpoint Reset Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """Get dehumidification_setpoint

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self._data["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `dehumidification_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_setpoint`')

        self._data["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """Get humidifier_setpoint

        Returns:
            float: the value of `humidifier_setpoint` or None if not set
        """
        return self._data["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `humidifier_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_setpoint`')

        self._data["Humidifier Setpoint"] = value

    @property
    def sizing_option(self):
        """Get sizing_option

        Returns:
            str: the value of `sizing_option` or None if not set
        """
        return self._data["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """  Corresponds to IDD Field `sizing_option`
        Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident
        zone air flow rates.

        Args:
            value (str): value for IDD Field `sizing_option`
                Accepted values are:
                      - Coincident
                      - NonCoincident
                Default value: NonCoincident
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sizing_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sizing_option`')
            vals = set()
            vals.add("Coincident")
            vals.add("NonCoincident")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sizing_option`'.format(value))

        self._data["Sizing Option"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """Get return_fan_partload_power_coefficients

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `return_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `return_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan_partload_power_coefficients`'.format(value))

        self._data["Return Fan Part-Load Power Coefficients"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.supply_fan_minimum_flow_rate))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_schedule_name))
        out.append(self._to_str(self.cooling_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_schedule_name))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.preheat_coil_type))
        out.append(self._to_str(self.preheat_coil_availability_schedule_name))
        out.append(self._to_str(self.preheat_coil_setpoint_schedule_name))
        out.append(self._to_str(self.preheat_coil_design_setpoint))
        out.append(self._to_str(self.gas_preheat_coil_efficiency))
        out.append(self._to_str(self.gas_preheat_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_control_type))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_upper_temperature_limit))
        out.append(self._to_str(self.economizer_lower_temperature_limit))
        out.append(self._to_str(self.economizer_upper_enthalpy_limit))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_partload_power_coefficients))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.cooling_coil_setpoint_reset_type))
        out.append(self._to_str(self.heating_coil_setpoint_reset_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_setpoint))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_setpoint))
        out.append(self._to_str(self.sizing_option))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.return_fan_partload_power_coefficients))
        return ",".join(out)

class HvactemplateSystemPackagedVav(object):
    """ Corresponds to IDD object `HVACTemplate:System:PackagedVAV`
        Packaged Variable Air Volume (PVAV) air loop with optional heating coil
        and optional preheat.
    
    """
    internal_name = "HVACTemplate:System:PackagedVAV"
    field_count = 59
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:PackagedVAV`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Maximum Flow Rate"] = None
        self._data["Supply Fan Minimum Flow Rate"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Setpoint Schedule Name"] = None
        self._data["Cooling Coil Design Setpoint"] = None
        self._data["Cooling Coil Gross Rated Total Capacity"] = None
        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["Cooling Coil Gross Rated COP"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Setpoint Schedule Name"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Heating Coil Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = None
        self._data["Economizer Maximum Limit Enthalpy"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Supply Fan Part-Load Power Coefficients"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Cooling Coil Setpoint Reset Type"] = None
        self._data["Heating Coil Setpoint Reset Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Setpoint"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Setpoint"] = None
        self._data["Sizing Option"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None
        self._data["Return Fan Part-Load Power Coefficients"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_maximum_flow_rate = None
        else:
            self.supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_minimum_flow_rate = None
        else:
            self.supply_fan_minimum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_schedule_name = None
        else:
            self.cooling_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint = None
        else:
            self.cooling_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_total_capacity = None
        else:
            self.cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_gross_rated_cop = None
        else:
            self.cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_schedule_name = None
        else:
            self.heating_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_capacity = None
        else:
            self.heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_control_type = None
        else:
            self.minimum_outdoor_air_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_drybulb_temperature = None
        else:
            self.economizer_maximum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_enthalpy = None
        else:
            self.economizer_maximum_limit_enthalpy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_minimum_limit_drybulb_temperature = None
        else:
            self.economizer_minimum_limit_drybulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_partload_power_coefficients = None
        else:
            self.supply_fan_partload_power_coefficients = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_reset_type = None
        else:
            self.cooling_coil_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_reset_type = None
        else:
            self.heating_coil_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint = None
        else:
            self.dehumidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_setpoint = None
        else:
            self.humidifier_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_option = None
        else:
            self.sizing_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_partload_power_coefficients = None
        else:
            self.return_fan_partload_power_coefficients = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on; PVAV System always on.  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """Get supply_fan_maximum_flow_rate

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_maximum_flow_rate`')

        self._data["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_minimum_flow_rate(self):
        """Get supply_fan_minimum_flow_rate

        Returns:
            float: the value of `supply_fan_minimum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Minimum Flow Rate"]

    @supply_fan_minimum_flow_rate.setter
    def supply_fan_minimum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_minimum_flow_rate`
        This field is only used to set a minimum part load on the VAV fan power curve.
        Autosize or zero is recommended.

        Args:
            value (float): value for IDD Field `supply_fan_minimum_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_minimum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_minimum_flow_rate`')

        self._data["Supply Fan Minimum Flow Rate"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - DrawThrough
                      - BlowThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("DrawThrough")
            vals.add("BlowThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="TwoSpeedDX"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - TwoSpeedDX
                      - TwoSpeedHumidControlDX
                Default value: TwoSpeedDX
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("TwoSpeedDX")
            vals.add("TwoSpeedHumidControlDX")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """Get cooling_coil_setpoint_schedule_name

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_schedule_name`')

        self._data["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """Get cooling_coil_design_setpoint

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint`'.format(value))

        self._data["Cooling Coil Design Setpoint"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """Get cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_total_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_total_capacity`'.format(value))

        self._data["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
        Gross SHR

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """Get cooling_coil_gross_rated_cop

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electric power input

        Args:
            value (float): value for IDD Field `cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_coil_gross_rated_cop`')

        self._data["Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="None"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """Get heating_coil_setpoint_schedule_name

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_schedule_name`')

        self._data["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_capacity(self):
        """Get heating_coil_capacity

        Returns:
            float: the value of `heating_coil_capacity` or None if not set
        """
        return self._data["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_capacity`

        Args:
            value (float): value for IDD Field `heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_capacity`'.format(value))

        self._data["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """Get minimum_outdoor_air_control_type

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set
        """
        return self._data["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """  Corresponds to IDD Field `minimum_outdoor_air_control_type`

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_control_type`
                Accepted values are:
                      - FixedMinimum
                      - ProportionalMinimum
                Default value: ProportionalMinimum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_control_type`')
            vals = set()
            vals.add("FixedMinimum")
            vals.add("ProportionalMinimum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `minimum_outdoor_air_control_type`'.format(value))

        self._data["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the Minimum Outdoor Air Flow Rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                      - LockoutWithHeating
                      - LockoutWithCompressor
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            vals.add("LockoutWithHeating")
            vals.add("LockoutWithCompressor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """Get economizer_maximum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_drybulb_temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """Get economizer_maximum_limit_enthalpy

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set
        """
        return self._data["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_enthalpy`
        Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_enthalpy`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_enthalpy`'.format(value))

        self._data["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """Get economizer_minimum_limit_drybulb_temperature

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self._data["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_minimum_limit_drybulb_temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_minimum_limit_drybulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_minimum_limit_drybulb_temperature`'.format(value))

        self._data["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def supply_fan_partload_power_coefficients(self):
        """Get supply_fan_partload_power_coefficients

        Returns:
            str: the value of `supply_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Supply Fan Part-Load Power Coefficients"]

    @supply_fan_partload_power_coefficients.setter
    def supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `supply_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `supply_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_partload_power_coefficients`'.format(value))

        self._data["Supply Fan Part-Load Power Coefficients"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                      - CycleOnAnyZoneFansOnly
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            vals.add("CycleOnAnyZoneFansOnly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def cooling_coil_setpoint_reset_type(self):
        """Get cooling_coil_setpoint_reset_type

        Returns:
            str: the value of `cooling_coil_setpoint_reset_type` or None if not set
        """
        return self._data["Cooling Coil Setpoint Reset Type"]

    @cooling_coil_setpoint_reset_type.setter
    def cooling_coil_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `cooling_coil_setpoint_reset_type`
        Overrides Cooling Coil Setpoint Schedule Name
        None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule
        Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate
        OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB,
        to the Cooling Design Setpoint at 26.7C)
        WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at
        min supply air flow rate

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_reset_type`
                Accepted values are:
                      - None
                      - Warmest
                      - OutdoorAirTemperatureReset
                      - WarmestTemperatureFirst
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("Warmest")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("WarmestTemperatureFirst")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_setpoint_reset_type`'.format(value))

        self._data["Cooling Coil Setpoint Reset Type"] = value

    @property
    def heating_coil_setpoint_reset_type(self):
        """Get heating_coil_setpoint_reset_type

        Returns:
            str: the value of `heating_coil_setpoint_reset_type` or None if not set
        """
        return self._data["Heating Coil Setpoint Reset Type"]

    @heating_coil_setpoint_reset_type.setter
    def heating_coil_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `heating_coil_setpoint_reset_type`
        Overrides Heating Coil Setpoint Schedule Name
        None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule
        OutdoorAirTemperatureReset = reset based on outdoor air temperature
        (Heating Design Setpoint at -6.7C ODB to Heating Desing Setpoint minus 5.2C at 10C ODB)
        min supply air flow rate

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_reset_type`
                Accepted values are:
                      - None
                      - OutdoorAirTemperatureReset
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("OutdoorAirTemperatureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_setpoint_reset_type`'.format(value))

        self._data["Heating Coil Setpoint Reset Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """Get dehumidification_setpoint

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self._data["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `dehumidification_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_setpoint`')

        self._data["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """Get humidifier_setpoint

        Returns:
            float: the value of `humidifier_setpoint` or None if not set
        """
        return self._data["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)

        Args:
            value (float): value for IDD Field `humidifier_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_setpoint`')

        self._data["Humidifier Setpoint"] = value

    @property
    def sizing_option(self):
        """Get sizing_option

        Returns:
            str: the value of `sizing_option` or None if not set
        """
        return self._data["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """  Corresponds to IDD Field `sizing_option`
        Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident
        zone air flow rates.

        Args:
            value (str): value for IDD Field `sizing_option`
                Accepted values are:
                      - Coincident
                      - NonCoincident
                Default value: NonCoincident
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sizing_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sizing_option`')
            vals = set()
            vals.add("Coincident")
            vals.add("NonCoincident")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sizing_option`'.format(value))

        self._data["Sizing Option"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """Get return_fan_partload_power_coefficients

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `return_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `return_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan_partload_power_coefficients`'.format(value))

        self._data["Return Fan Part-Load Power Coefficients"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.supply_fan_minimum_flow_rate))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_schedule_name))
        out.append(self._to_str(self.cooling_coil_design_setpoint))
        out.append(self._to_str(self.cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_schedule_name))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_control_type))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_maximum_limit_drybulb_temperature))
        out.append(self._to_str(self.economizer_maximum_limit_enthalpy))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.economizer_minimum_limit_drybulb_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.supply_fan_partload_power_coefficients))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.cooling_coil_setpoint_reset_type))
        out.append(self._to_str(self.heating_coil_setpoint_reset_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_setpoint))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_setpoint))
        out.append(self._to_str(self.sizing_option))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.return_fan_partload_power_coefficients))
        return ",".join(out)

class HvactemplateSystemConstantVolume(object):
    """ Corresponds to IDD object `HVACTemplate:System:ConstantVolume`
        Constant Air Volume air loop with optional chilled water cooling coil,
        optional heating coil and optional preheat.
    
    """
    internal_name = "HVACTemplate:System:ConstantVolume"
    field_count = 70
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:ConstantVolume`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Supply Fan Maximum Flow Rate"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Setpoint Control Type"] = None
        self._data["Cooling Coil Control Zone name"] = None
        self._data["Cooling Coil Design Setpoint Temperature"] = None
        self._data["Cooling Coil Setpoint Schedule Name"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Setpoint Control Type"] = None
        self._data["Heating Coil Control Zone name"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Heating Coil Setpoint Schedule Name"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Preheat Coil Type"] = None
        self._data["Preheat Coil Availability Schedule Name"] = None
        self._data["Preheat Coil Design Setpoint"] = None
        self._data["Preheat Coil Setpoint Schedule Name"] = None
        self._data["Gas Preheat Coil Efficiency"] = None
        self._data["Gas Preheat Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Upper Temperature Limit"] = None
        self._data["Economizer Lower Temperature Limit"] = None
        self._data["Economizer Upper Enthalpy Limit"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Heat Recovery Heat Exchanger Type"] = None
        self._data["Heat Recovery Frost Control Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Relative Humidity Setpoint"] = None
        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Relative Humidity Setpoint"] = None
        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_maximum_flow_rate = None
        else:
            self.supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_control_type = None
        else:
            self.cooling_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_control_zone_name = None
        else:
            self.cooling_coil_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint_temperature = None
        else:
            self.cooling_coil_design_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_schedule_name = None
        else:
            self.cooling_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_low = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_high = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_control_type = None
        else:
            self.heating_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_control_zone_name = None
        else:
            self.heating_coil_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_schedule_name = None
        else:
            self.heating_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_low = None
        else:
            self.heating_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_high = None
        else:
            self.heating_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_capacity = None
        else:
            self.heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_type = None
        else:
            self.preheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_availability_schedule_name = None
        else:
            self.preheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_design_setpoint = None
        else:
            self.preheat_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_setpoint_schedule_name = None
        else:
            self.preheat_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_efficiency = None
        else:
            self.gas_preheat_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_parasitic_electric_load = None
        else:
            self.gas_preheat_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_temperature_limit = None
        else:
            self.economizer_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lower_temperature_limit = None
        else:
            self.economizer_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_enthalpy_limit = None
        else:
            self.economizer_upper_enthalpy_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_plenum_name = None
        else:
            self.supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_heat_exchanger_type = None
        else:
            self.heat_recovery_heat_exchanger_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_frost_control_type = None
        else:
            self.heat_recovery_frost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint = None
        else:
            self.dehumidification_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint_schedule_name = None
        else:
            self.dehumidification_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint = None
        else:
            self.humidifier_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint_schedule_name = None
        else:
            self.humidifier_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on;  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """Get supply_fan_maximum_flow_rate

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_maximum_flow_rate`')

        self._data["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - DrawThrough
                      - BlowThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("DrawThrough")
            vals.add("BlowThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                      - HeatExchangerAssistedChilledWater
                      - None
                Default value: ChilledWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            vals.add("HeatExchangerAssistedChilledWater")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """Get cooling_coil_setpoint_control_type

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set
        """
        return self._data["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `cooling_coil_setpoint_control_type`

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - Warmest
                      - ControlZone
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("Warmest")
            vals.add("ControlZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_setpoint_control_type`'.format(value))

        self._data["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_control_zone_name(self):
        """Get cooling_coil_control_zone_name

        Returns:
            str: the value of `cooling_coil_control_zone_name` or None if not set
        """
        return self._data["Cooling Coil Control Zone name"]

    @cooling_coil_control_zone_name.setter
    def cooling_coil_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_control_zone_name`
        name of the HVACTemplate:ZoneConstantVolume object that
        contains the cooling thermostat when Cooling Coil Setpoint Control Type = ControlZone

        Args:
            value (str): value for IDD Field `cooling_coil_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_control_zone_name`')

        self._data["Cooling Coil Control Zone name"] = value

    @property
    def cooling_coil_design_setpoint_temperature(self):
        """Get cooling_coil_design_setpoint_temperature

        Returns:
            float: the value of `cooling_coil_design_setpoint_temperature` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint Temperature"]

    @cooling_coil_design_setpoint_temperature.setter
    def cooling_coil_design_setpoint_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint_temperature`
        Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint_temperature`'.format(value))

        self._data["Cooling Coil Design Setpoint Temperature"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """Get cooling_coil_setpoint_schedule_name

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_schedule_name`')

        self._data["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """Get cooling_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """Get cooling_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 23.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """Get heating_coil_setpoint_control_type

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set
        """
        return self._data["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `heating_coil_setpoint_control_type`

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - ControlZone
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("ControlZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_setpoint_control_type`'.format(value))

        self._data["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_control_zone_name(self):
        """Get heating_coil_control_zone_name

        Returns:
            str: the value of `heating_coil_control_zone_name` or None if not set
        """
        return self._data["Heating Coil Control Zone name"]

    @heating_coil_control_zone_name.setter
    def heating_coil_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_control_zone_name`
        name of the HVACTemplate:ZoneConstantVolume object that
        contains the heating thermostat

        Args:
            value (str): value for IDD Field `heating_coil_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_control_zone_name`')

        self._data["Heating Coil Control Zone name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """Get heating_coil_setpoint_schedule_name

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_schedule_name`')

        self._data["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=15.0 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """Get heating_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 7.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """Get heating_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_capacity(self):
        """Get heating_coil_capacity

        Returns:
            float: the value of `heating_coil_capacity` or None if not set
        """
        return self._data["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_capacity`

        Args:
            value (float): value for IDD Field `heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_capacity`'.format(value))

        self._data["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """Get preheat_coil_type

        Returns:
            str: the value of `preheat_coil_type` or None if not set
        """
        return self._data["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `preheat_coil_type`

        Args:
            value (str): value for IDD Field `preheat_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `preheat_coil_type`'.format(value))

        self._data["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """Get preheat_coil_availability_schedule_name

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `preheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_availability_schedule_name`')

        self._data["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """Get preheat_coil_design_setpoint

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set
        """
        return self._data["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2 ):
        """  Corresponds to IDD Field `preheat_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `preheat_coil_design_setpoint`
                Units: C
                Default value: 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `preheat_coil_design_setpoint`'.format(value))

        self._data["Preheat Coil Design Setpoint"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """Get preheat_coil_setpoint_schedule_name

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `preheat_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_setpoint_schedule_name`')

        self._data["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """Get gas_preheat_coil_efficiency

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set
        """
        return self._data["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_preheat_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_preheat_coil_efficiency`')

        self._data["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """Get gas_preheat_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_preheat_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_parasitic_electric_load`')

        self._data["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the Minimum Outdoor Air Flow Rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """Get economizer_upper_temperature_limit

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set
        """
        return self._data["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_temperature_limit`
        Outdoor temperature above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_temperature_limit`'.format(value))

        self._data["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """Get economizer_lower_temperature_limit

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set
        """
        return self._data["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_lower_temperature_limit`
        Outdoor temperature below which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_lower_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_lower_temperature_limit`'.format(value))

        self._data["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """Get economizer_upper_enthalpy_limit

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set
        """
        return self._data["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_enthalpy_limit`
        Outdoor enthalpy above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_enthalpy_limit`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_enthalpy_limit`'.format(value))

        self._data["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """Get supply_plenum_name

        Returns:
            str: the value of `supply_plenum_name` or None if not set
        """
        return self._data["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `supply_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_plenum_name`')

        self._data["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                      - CycleOnAnyZoneFansOnly
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            vals.add("CycleOnAnyZoneFansOnly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """Get heat_recovery_heat_exchanger_type

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set
        """
        return self._data["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """  Corresponds to IDD Field `heat_recovery_heat_exchanger_type`

        Args:
            value (str): value for IDD Field `heat_recovery_heat_exchanger_type`
                Accepted values are:
                      - Plate
                      - Rotary
                Default value: Plate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_heat_exchanger_type`')
            vals = set()
            vals.add("Plate")
            vals.add("Rotary")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_heat_exchanger_type`'.format(value))

        self._data["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """Get heat_recovery_frost_control_type

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set
        """
        return self._data["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_frost_control_type`

        Args:
            value (str): value for IDD Field `heat_recovery_frost_control_type`
                Accepted values are:
                      - None
                      - ExhaustAirRecirculation
                      - ExhaustOnly
                      - MinimumExhaustTemperature
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_frost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_frost_control_type`')
            vals = set()
            vals.add("None")
            vals.add("ExhaustAirRecirculation")
            vals.add("ExhaustOnly")
            vals.add("MinimumExhaustTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_frost_control_type`'.format(value))

        self._data["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """Get dehumidification_relative_humidity_setpoint

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)
        Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `dehumidification_relative_humidity_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')

        self._data["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """Get dehumidification_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Dehumidification Relative Humidity
        Setpoint above. Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`')

        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """Get humidifier_relative_humidity_setpoint

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100).
        Ignored if Humidifier Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `humidifier_relative_humidity_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')

        self._data["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """Get humidifier_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Humidifier Relative Humidity
        Setpoint above.Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`')

        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=300.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 300.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_control_type))
        out.append(self._to_str(self.cooling_coil_control_zone_name))
        out.append(self._to_str(self.cooling_coil_design_setpoint_temperature))
        out.append(self._to_str(self.cooling_coil_setpoint_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_control_type))
        out.append(self._to_str(self.heating_coil_control_zone_name))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_setpoint_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.preheat_coil_type))
        out.append(self._to_str(self.preheat_coil_availability_schedule_name))
        out.append(self._to_str(self.preheat_coil_design_setpoint))
        out.append(self._to_str(self.preheat_coil_setpoint_schedule_name))
        out.append(self._to_str(self.gas_preheat_coil_efficiency))
        out.append(self._to_str(self.gas_preheat_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_upper_temperature_limit))
        out.append(self._to_str(self.economizer_lower_temperature_limit))
        out.append(self._to_str(self.economizer_upper_enthalpy_limit))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.heat_recovery_heat_exchanger_type))
        out.append(self._to_str(self.heat_recovery_frost_control_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        return ",".join(out)

class HvactemplateSystemDualDuct(object):
    """ Corresponds to IDD object `HVACTemplate:System:DualDuct`
        Dual-duct constant volume or variable volume air loop
    
    """
    internal_name = "HVACTemplate:System:DualDuct"
    field_count = 91
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:DualDuct`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["System Configuration Type"] = None
        self._data["Main Supply Fan Maximum Flow Rate"] = None
        self._data["Main Supply Fan Minimum Flow Fraction"] = None
        self._data["Main Supply Fan Total Efficiency"] = None
        self._data["Main Supply Fan Delta Pressure"] = None
        self._data["Main Supply Fan Motor Efficiency"] = None
        self._data["Main Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Main Supply Fan Part-Load Power Coefficients"] = None
        self._data["Cold Duct Supply Fan Maximum Flow Rate"] = None
        self._data["Cold Duct Supply Fan Minimum Flow Fraction"] = None
        self._data["Cold Duct Supply Fan Total Efficiency"] = None
        self._data["Cold Duct Supply Fan Delta Pressure"] = None
        self._data["Cold Duct Supply Fan Motor Efficiency"] = None
        self._data["Cold Duct Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Cold Duct Supply Fan Part-Load Power Coefficients"] = None
        self._data["Cold Duct Supply Fan Placement"] = None
        self._data["Hot Duct Supply Fan Maximum Flow Rate"] = None
        self._data["Hot Duct Supply Fan Minimum Flow Fraction"] = None
        self._data["Hot Duct Supply Fan Total Efficiency"] = None
        self._data["Hot Duct Supply Fan Delta Pressure"] = None
        self._data["Hot Duct Supply Fan Motor Efficiency"] = None
        self._data["Hot Duct Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Hot Duct Supply Fan Part-Load Power Coefficients"] = None
        self._data["Hot Duct Supply Fan Placement"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Setpoint Control Type"] = None
        self._data["Cooling Coil Design Setpoint Temperature"] = None
        self._data["Cooling Coil Setpoint Schedule Name"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Setpoint Control Type"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Heating Coil Setpoint Schedule Name"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Capacity"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Preheat Coil Type"] = None
        self._data["Preheat Coil Availability Schedule Name"] = None
        self._data["Preheat Coil Design Setpoint"] = None
        self._data["Preheat Coil Setpoint Schedule Name"] = None
        self._data["Gas Preheat Coil Efficiency"] = None
        self._data["Gas Preheat Coil Parasitic Electric Load"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Economizer Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Economizer Upper Temperature Limit"] = None
        self._data["Economizer Lower Temperature Limit"] = None
        self._data["Economizer Upper Enthalpy Limit"] = None
        self._data["Economizer Maximum Limit Dewpoint Temperature"] = None
        self._data["Cold Supply Plenum Name"] = None
        self._data["Hot Supply Plenum Name"] = None
        self._data["Return Plenum Name"] = None
        self._data["Night Cycle Control"] = None
        self._data["Night Cycle Control Zone Name"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Heat Recovery Heat Exchanger Type"] = None
        self._data["Heat Recovery Frost Control Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Control Zone Name"] = None
        self._data["Dehumidification Relative Humidity Setpoint"] = None
        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Control Zone Name"] = None
        self._data["Humidifier Relative Humidity Setpoint"] = None
        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = None
        self._data["Sizing Option"] = None
        self._data["Return Fan"] = None
        self._data["Return Fan Total Efficiency"] = None
        self._data["Return Fan Delta Pressure"] = None
        self._data["Return Fan Motor Efficiency"] = None
        self._data["Return Fan Motor in Air Stream Fraction"] = None
        self._data["Return Fan Part-Load Power Coefficients"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_configuration_type = None
        else:
            self.system_configuration_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_maximum_flow_rate = None
        else:
            self.main_supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_minimum_flow_fraction = None
        else:
            self.main_supply_fan_minimum_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_total_efficiency = None
        else:
            self.main_supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_delta_pressure = None
        else:
            self.main_supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_motor_efficiency = None
        else:
            self.main_supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_motor_in_air_stream_fraction = None
        else:
            self.main_supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.main_supply_fan_partload_power_coefficients = None
        else:
            self.main_supply_fan_partload_power_coefficients = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_maximum_flow_rate = None
        else:
            self.cold_duct_supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_minimum_flow_fraction = None
        else:
            self.cold_duct_supply_fan_minimum_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_total_efficiency = None
        else:
            self.cold_duct_supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_delta_pressure = None
        else:
            self.cold_duct_supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_motor_efficiency = None
        else:
            self.cold_duct_supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_motor_in_air_stream_fraction = None
        else:
            self.cold_duct_supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_partload_power_coefficients = None
        else:
            self.cold_duct_supply_fan_partload_power_coefficients = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_duct_supply_fan_placement = None
        else:
            self.cold_duct_supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_maximum_flow_rate = None
        else:
            self.hot_duct_supply_fan_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_minimum_flow_fraction = None
        else:
            self.hot_duct_supply_fan_minimum_flow_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_total_efficiency = None
        else:
            self.hot_duct_supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_delta_pressure = None
        else:
            self.hot_duct_supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_motor_efficiency = None
        else:
            self.hot_duct_supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_motor_in_air_stream_fraction = None
        else:
            self.hot_duct_supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_partload_power_coefficients = None
        else:
            self.hot_duct_supply_fan_partload_power_coefficients = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_duct_supply_fan_placement = None
        else:
            self.hot_duct_supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_control_type = None
        else:
            self.cooling_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint_temperature = None
        else:
            self.cooling_coil_design_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_schedule_name = None
        else:
            self.cooling_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_low = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_high = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_control_type = None
        else:
            self.heating_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_schedule_name = None
        else:
            self.heating_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_low = None
        else:
            self.heating_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_high = None
        else:
            self.heating_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_capacity = None
        else:
            self.heating_coil_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_type = None
        else:
            self.preheat_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_availability_schedule_name = None
        else:
            self.preheat_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_design_setpoint = None
        else:
            self.preheat_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.preheat_coil_setpoint_schedule_name = None
        else:
            self.preheat_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_efficiency = None
        else:
            self.gas_preheat_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_preheat_coil_parasitic_electric_load = None
        else:
            self.gas_preheat_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_control_type = None
        else:
            self.minimum_outdoor_air_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_type = None
        else:
            self.economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_temperature_limit = None
        else:
            self.economizer_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_lower_temperature_limit = None
        else:
            self.economizer_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_upper_enthalpy_limit = None
        else:
            self.economizer_upper_enthalpy_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.economizer_maximum_limit_dewpoint_temperature = None
        else:
            self.economizer_maximum_limit_dewpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_supply_plenum_name = None
        else:
            self.cold_supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_supply_plenum_name = None
        else:
            self.hot_supply_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_plenum_name = None
        else:
            self.return_plenum_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control = None
        else:
            self.night_cycle_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_cycle_control_zone_name = None
        else:
            self.night_cycle_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_heat_exchanger_type = None
        else:
            self.heat_recovery_heat_exchanger_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_frost_control_type = None
        else:
            self.heat_recovery_frost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_zone_name = None
        else:
            self.dehumidification_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint = None
        else:
            self.dehumidification_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_relative_humidity_setpoint_schedule_name = None
        else:
            self.dehumidification_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_control_zone_name = None
        else:
            self.humidifier_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint = None
        else:
            self.humidifier_relative_humidity_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_relative_humidity_setpoint_schedule_name = None
        else:
            self.humidifier_relative_humidity_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_option = None
        else:
            self.sizing_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan = None
        else:
            self.return_fan = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_total_efficiency = None
        else:
            self.return_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_delta_pressure = None
        else:
            self.return_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_efficiency = None
        else:
            self.return_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_motor_in_air_stream_fraction = None
        else:
            self.return_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_fan_partload_power_coefficients = None
        else:
            self.return_fan_partload_power_coefficients = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on;  Schedule is used in availability manager
        and fan scheduling.
        Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def system_configuration_type(self):
        """Get system_configuration_type

        Returns:
            str: the value of `system_configuration_type` or None if not set
        """
        return self._data["System Configuration Type"]

    @system_configuration_type.setter
    def system_configuration_type(self, value="SingleFanConstantVolume"):
        """  Corresponds to IDD Field `system_configuration_type`
        SingleFan - a single supply fan before the split to dual ducts
        DualFan - two supply fans, one each for the cold and hot ducts
        ConstantVolume - constant volume
        VariableVolume - variable volume

        Args:
            value (str): value for IDD Field `system_configuration_type`
                Accepted values are:
                      - SingleFanConstantVolume
                      - DualFanConstantVolume
                      - SingleFanVariableVolume
                      - DualFanVariableVolume
                Default value: SingleFanConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_configuration_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_configuration_type`')
            vals = set()
            vals.add("SingleFanConstantVolume")
            vals.add("DualFanConstantVolume")
            vals.add("SingleFanVariableVolume")
            vals.add("DualFanVariableVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `system_configuration_type`'.format(value))

        self._data["System Configuration Type"] = value

    @property
    def main_supply_fan_maximum_flow_rate(self):
        """Get main_supply_fan_maximum_flow_rate

        Returns:
            float: the value of `main_supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Main Supply Fan Maximum Flow Rate"]

    @main_supply_fan_maximum_flow_rate.setter
    def main_supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `main_supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `main_supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `main_supply_fan_maximum_flow_rate`')

        self._data["Main Supply Fan Maximum Flow Rate"] = value

    @property
    def main_supply_fan_minimum_flow_fraction(self):
        """Get main_supply_fan_minimum_flow_fraction

        Returns:
            float: the value of `main_supply_fan_minimum_flow_fraction` or None if not set
        """
        return self._data["Main Supply Fan Minimum Flow Fraction"]

    @main_supply_fan_minimum_flow_fraction.setter
    def main_supply_fan_minimum_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `main_supply_fan_minimum_flow_fraction`

        Args:
            value (float): value for IDD Field `main_supply_fan_minimum_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_minimum_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `main_supply_fan_minimum_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `main_supply_fan_minimum_flow_fraction`')

        self._data["Main Supply Fan Minimum Flow Fraction"] = value

    @property
    def main_supply_fan_total_efficiency(self):
        """Get main_supply_fan_total_efficiency

        Returns:
            float: the value of `main_supply_fan_total_efficiency` or None if not set
        """
        return self._data["Main Supply Fan Total Efficiency"]

    @main_supply_fan_total_efficiency.setter
    def main_supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `main_supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `main_supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `main_supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `main_supply_fan_total_efficiency`')

        self._data["Main Supply Fan Total Efficiency"] = value

    @property
    def main_supply_fan_delta_pressure(self):
        """Get main_supply_fan_delta_pressure

        Returns:
            float: the value of `main_supply_fan_delta_pressure` or None if not set
        """
        return self._data["Main Supply Fan Delta Pressure"]

    @main_supply_fan_delta_pressure.setter
    def main_supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `main_supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `main_supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `main_supply_fan_delta_pressure`')

        self._data["Main Supply Fan Delta Pressure"] = value

    @property
    def main_supply_fan_motor_efficiency(self):
        """Get main_supply_fan_motor_efficiency

        Returns:
            float: the value of `main_supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Main Supply Fan Motor Efficiency"]

    @main_supply_fan_motor_efficiency.setter
    def main_supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `main_supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `main_supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `main_supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `main_supply_fan_motor_efficiency`')

        self._data["Main Supply Fan Motor Efficiency"] = value

    @property
    def main_supply_fan_motor_in_air_stream_fraction(self):
        """Get main_supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `main_supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Main Supply Fan Motor in Air Stream Fraction"]

    @main_supply_fan_motor_in_air_stream_fraction.setter
    def main_supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `main_supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `main_supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `main_supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `main_supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `main_supply_fan_motor_in_air_stream_fraction`')

        self._data["Main Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def main_supply_fan_partload_power_coefficients(self):
        """Get main_supply_fan_partload_power_coefficients

        Returns:
            str: the value of `main_supply_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Main Supply Fan Part-Load Power Coefficients"]

    @main_supply_fan_partload_power_coefficients.setter
    def main_supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `main_supply_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `main_supply_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `main_supply_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `main_supply_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `main_supply_fan_partload_power_coefficients`'.format(value))

        self._data["Main Supply Fan Part-Load Power Coefficients"] = value

    @property
    def cold_duct_supply_fan_maximum_flow_rate(self):
        """Get cold_duct_supply_fan_maximum_flow_rate

        Returns:
            float: the value of `cold_duct_supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Cold Duct Supply Fan Maximum Flow Rate"]

    @cold_duct_supply_fan_maximum_flow_rate.setter
    def cold_duct_supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `cold_duct_supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cold_duct_supply_fan_maximum_flow_rate`')

        self._data["Cold Duct Supply Fan Maximum Flow Rate"] = value

    @property
    def cold_duct_supply_fan_minimum_flow_fraction(self):
        """Get cold_duct_supply_fan_minimum_flow_fraction

        Returns:
            float: the value of `cold_duct_supply_fan_minimum_flow_fraction` or None if not set
        """
        return self._data["Cold Duct Supply Fan Minimum Flow Fraction"]

    @cold_duct_supply_fan_minimum_flow_fraction.setter
    def cold_duct_supply_fan_minimum_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `cold_duct_supply_fan_minimum_flow_fraction`

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_minimum_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_minimum_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cold_duct_supply_fan_minimum_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cold_duct_supply_fan_minimum_flow_fraction`')

        self._data["Cold Duct Supply Fan Minimum Flow Fraction"] = value

    @property
    def cold_duct_supply_fan_total_efficiency(self):
        """Get cold_duct_supply_fan_total_efficiency

        Returns:
            float: the value of `cold_duct_supply_fan_total_efficiency` or None if not set
        """
        return self._data["Cold Duct Supply Fan Total Efficiency"]

    @cold_duct_supply_fan_total_efficiency.setter
    def cold_duct_supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `cold_duct_supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cold_duct_supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cold_duct_supply_fan_total_efficiency`')

        self._data["Cold Duct Supply Fan Total Efficiency"] = value

    @property
    def cold_duct_supply_fan_delta_pressure(self):
        """Get cold_duct_supply_fan_delta_pressure

        Returns:
            float: the value of `cold_duct_supply_fan_delta_pressure` or None if not set
        """
        return self._data["Cold Duct Supply Fan Delta Pressure"]

    @cold_duct_supply_fan_delta_pressure.setter
    def cold_duct_supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `cold_duct_supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cold_duct_supply_fan_delta_pressure`')

        self._data["Cold Duct Supply Fan Delta Pressure"] = value

    @property
    def cold_duct_supply_fan_motor_efficiency(self):
        """Get cold_duct_supply_fan_motor_efficiency

        Returns:
            float: the value of `cold_duct_supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Cold Duct Supply Fan Motor Efficiency"]

    @cold_duct_supply_fan_motor_efficiency.setter
    def cold_duct_supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `cold_duct_supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cold_duct_supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cold_duct_supply_fan_motor_efficiency`')

        self._data["Cold Duct Supply Fan Motor Efficiency"] = value

    @property
    def cold_duct_supply_fan_motor_in_air_stream_fraction(self):
        """Get cold_duct_supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `cold_duct_supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Cold Duct Supply Fan Motor in Air Stream Fraction"]

    @cold_duct_supply_fan_motor_in_air_stream_fraction.setter
    def cold_duct_supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `cold_duct_supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `cold_duct_supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_duct_supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cold_duct_supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cold_duct_supply_fan_motor_in_air_stream_fraction`')

        self._data["Cold Duct Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cold_duct_supply_fan_partload_power_coefficients(self):
        """Get cold_duct_supply_fan_partload_power_coefficients

        Returns:
            str: the value of `cold_duct_supply_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Cold Duct Supply Fan Part-Load Power Coefficients"]

    @cold_duct_supply_fan_partload_power_coefficients.setter
    def cold_duct_supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `cold_duct_supply_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `cold_duct_supply_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_duct_supply_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_duct_supply_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cold_duct_supply_fan_partload_power_coefficients`'.format(value))

        self._data["Cold Duct Supply Fan Part-Load Power Coefficients"] = value

    @property
    def cold_duct_supply_fan_placement(self):
        """Get cold_duct_supply_fan_placement

        Returns:
            str: the value of `cold_duct_supply_fan_placement` or None if not set
        """
        return self._data["Cold Duct Supply Fan Placement"]

    @cold_duct_supply_fan_placement.setter
    def cold_duct_supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `cold_duct_supply_fan_placement`

        Args:
            value (str): value for IDD Field `cold_duct_supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_duct_supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_duct_supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cold_duct_supply_fan_placement`'.format(value))

        self._data["Cold Duct Supply Fan Placement"] = value

    @property
    def hot_duct_supply_fan_maximum_flow_rate(self):
        """Get hot_duct_supply_fan_maximum_flow_rate

        Returns:
            float: the value of `hot_duct_supply_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Hot Duct Supply Fan Maximum Flow Rate"]

    @hot_duct_supply_fan_maximum_flow_rate.setter
    def hot_duct_supply_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `hot_duct_supply_fan_maximum_flow_rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hot_duct_supply_fan_maximum_flow_rate`')

        self._data["Hot Duct Supply Fan Maximum Flow Rate"] = value

    @property
    def hot_duct_supply_fan_minimum_flow_fraction(self):
        """Get hot_duct_supply_fan_minimum_flow_fraction

        Returns:
            float: the value of `hot_duct_supply_fan_minimum_flow_fraction` or None if not set
        """
        return self._data["Hot Duct Supply Fan Minimum Flow Fraction"]

    @hot_duct_supply_fan_minimum_flow_fraction.setter
    def hot_duct_supply_fan_minimum_flow_fraction(self, value=0.2 ):
        """  Corresponds to IDD Field `hot_duct_supply_fan_minimum_flow_fraction`

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_minimum_flow_fraction`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_minimum_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hot_duct_supply_fan_minimum_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `hot_duct_supply_fan_minimum_flow_fraction`')

        self._data["Hot Duct Supply Fan Minimum Flow Fraction"] = value

    @property
    def hot_duct_supply_fan_total_efficiency(self):
        """Get hot_duct_supply_fan_total_efficiency

        Returns:
            float: the value of `hot_duct_supply_fan_total_efficiency` or None if not set
        """
        return self._data["Hot Duct Supply Fan Total Efficiency"]

    @hot_duct_supply_fan_total_efficiency.setter
    def hot_duct_supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `hot_duct_supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hot_duct_supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `hot_duct_supply_fan_total_efficiency`')

        self._data["Hot Duct Supply Fan Total Efficiency"] = value

    @property
    def hot_duct_supply_fan_delta_pressure(self):
        """Get hot_duct_supply_fan_delta_pressure

        Returns:
            float: the value of `hot_duct_supply_fan_delta_pressure` or None if not set
        """
        return self._data["Hot Duct Supply Fan Delta Pressure"]

    @hot_duct_supply_fan_delta_pressure.setter
    def hot_duct_supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `hot_duct_supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hot_duct_supply_fan_delta_pressure`')

        self._data["Hot Duct Supply Fan Delta Pressure"] = value

    @property
    def hot_duct_supply_fan_motor_efficiency(self):
        """Get hot_duct_supply_fan_motor_efficiency

        Returns:
            float: the value of `hot_duct_supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Hot Duct Supply Fan Motor Efficiency"]

    @hot_duct_supply_fan_motor_efficiency.setter
    def hot_duct_supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `hot_duct_supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hot_duct_supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `hot_duct_supply_fan_motor_efficiency`')

        self._data["Hot Duct Supply Fan Motor Efficiency"] = value

    @property
    def hot_duct_supply_fan_motor_in_air_stream_fraction(self):
        """Get hot_duct_supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `hot_duct_supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Hot Duct Supply Fan Motor in Air Stream Fraction"]

    @hot_duct_supply_fan_motor_in_air_stream_fraction.setter
    def hot_duct_supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `hot_duct_supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `hot_duct_supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_duct_supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hot_duct_supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `hot_duct_supply_fan_motor_in_air_stream_fraction`')

        self._data["Hot Duct Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def hot_duct_supply_fan_partload_power_coefficients(self):
        """Get hot_duct_supply_fan_partload_power_coefficients

        Returns:
            str: the value of `hot_duct_supply_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Hot Duct Supply Fan Part-Load Power Coefficients"]

    @hot_duct_supply_fan_partload_power_coefficients.setter
    def hot_duct_supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `hot_duct_supply_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `hot_duct_supply_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_duct_supply_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_duct_supply_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_duct_supply_fan_partload_power_coefficients`'.format(value))

        self._data["Hot Duct Supply Fan Part-Load Power Coefficients"] = value

    @property
    def hot_duct_supply_fan_placement(self):
        """Get hot_duct_supply_fan_placement

        Returns:
            str: the value of `hot_duct_supply_fan_placement` or None if not set
        """
        return self._data["Hot Duct Supply Fan Placement"]

    @hot_duct_supply_fan_placement.setter
    def hot_duct_supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `hot_duct_supply_fan_placement`

        Args:
            value (str): value for IDD Field `hot_duct_supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_duct_supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_duct_supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_duct_supply_fan_placement`'.format(value))

        self._data["Hot Duct Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                      - None
                Default value: ChilledWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """Get cooling_coil_setpoint_control_type

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set
        """
        return self._data["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `cooling_coil_setpoint_control_type`

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - Warmest
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("Warmest")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_setpoint_control_type`'.format(value))

        self._data["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_design_setpoint_temperature(self):
        """Get cooling_coil_design_setpoint_temperature

        Returns:
            float: the value of `cooling_coil_design_setpoint_temperature` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint Temperature"]

    @cooling_coil_design_setpoint_temperature.setter
    def cooling_coil_design_setpoint_temperature(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint_temperature`
        Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint_temperature`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint_temperature`'.format(value))

        self._data["Cooling Coil Design Setpoint Temperature"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """Get cooling_coil_setpoint_schedule_name

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_schedule_name`')

        self._data["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """Get cooling_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """Get cooling_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 23.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """Get heating_coil_setpoint_control_type

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set
        """
        return self._data["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `heating_coil_setpoint_control_type`

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - Coldest
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("Coldest")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_setpoint_control_type`'.format(value))

        self._data["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """Get heating_coil_setpoint_schedule_name

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_schedule_name`')

        self._data["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=50.0 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """Get heating_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 7.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=20.0 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """Get heating_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_capacity(self):
        """Get heating_coil_capacity

        Returns:
            float: the value of `heating_coil_capacity` or None if not set
        """
        return self._data["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_coil_capacity`

        Args:
            value (float): value for IDD Field `heating_coil_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_capacity`'.format(value))

        self._data["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """Get preheat_coil_type

        Returns:
            str: the value of `preheat_coil_type` or None if not set
        """
        return self._data["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """  Corresponds to IDD Field `preheat_coil_type`

        Args:
            value (str): value for IDD Field `preheat_coil_type`
                Accepted values are:
                      - Electric
                      - Gas
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_type`')
            vals = set()
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `preheat_coil_type`'.format(value))

        self._data["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """Get preheat_coil_availability_schedule_name

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `preheat_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_availability_schedule_name`')

        self._data["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """Get preheat_coil_design_setpoint

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set
        """
        return self._data["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2 ):
        """  Corresponds to IDD Field `preheat_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `preheat_coil_design_setpoint`
                Units: C
                Default value: 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `preheat_coil_design_setpoint`'.format(value))

        self._data["Preheat Coil Design Setpoint"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """Get preheat_coil_setpoint_schedule_name

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `preheat_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `preheat_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preheat_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preheat_coil_setpoint_schedule_name`')

        self._data["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """Get gas_preheat_coil_efficiency

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set
        """
        return self._data["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_preheat_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_preheat_coil_efficiency`')

        self._data["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """Get gas_preheat_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_preheat_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_preheat_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_preheat_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_preheat_coil_parasitic_electric_load`')

        self._data["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """Get minimum_outdoor_air_control_type

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set
        """
        return self._data["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """  Corresponds to IDD Field `minimum_outdoor_air_control_type`

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_control_type`
                Accepted values are:
                      - FixedMinimum
                      - ProportionalMinimum
                Default value: ProportionalMinimum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_control_type`')
            vals = set()
            vals.add("FixedMinimum")
            vals.add("ProportionalMinimum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `minimum_outdoor_air_control_type`'.format(value))

        self._data["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        Schedule values multiply the Minimum Outdoor Air Flow Rate
        If blank, multiplier is always one

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """Get economizer_type

        Returns:
            str: the value of `economizer_type` or None if not set
        """
        return self._data["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `economizer_type`

        Args:
            value (str): value for IDD Field `economizer_type`
                Accepted values are:
                      - FixedDryBulb
                      - FixedEnthalpy
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                      - FixedDewPointAndDryBulb
                      - ElectronicEnthalpy
                      - DifferentialDryBulbAndEnthalpy
                      - NoEconomizer
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_type`')
            vals = set()
            vals.add("FixedDryBulb")
            vals.add("FixedEnthalpy")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            vals.add("FixedDewPointAndDryBulb")
            vals.add("ElectronicEnthalpy")
            vals.add("DifferentialDryBulbAndEnthalpy")
            vals.add("NoEconomizer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_type`'.format(value))

        self._data["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """  Corresponds to IDD Field `economizer_lockout`

        Args:
            value (str): value for IDD Field `economizer_lockout`
                Accepted values are:
                      - NoLockout
                Default value: NoLockout
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            vals = set()
            vals.add("NoLockout")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `economizer_lockout`'.format(value))

        self._data["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """Get economizer_upper_temperature_limit

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set
        """
        return self._data["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_temperature_limit`
        Outdoor temperature above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_temperature_limit`'.format(value))

        self._data["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """Get economizer_lower_temperature_limit

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set
        """
        return self._data["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_lower_temperature_limit`
        Outdoor temperature below which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_lower_temperature_limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_lower_temperature_limit`'.format(value))

        self._data["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """Get economizer_upper_enthalpy_limit

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set
        """
        return self._data["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """  Corresponds to IDD Field `economizer_upper_enthalpy_limit`
        Outdoor enthalpy above which economizer is disabled and
        heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `economizer_upper_enthalpy_limit`
                Units: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_upper_enthalpy_limit`'.format(value))

        self._data["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """Get economizer_maximum_limit_dewpoint_temperature

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set
        """
        return self._data["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `economizer_maximum_limit_dewpoint_temperature`
        Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is not operative.
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `economizer_maximum_limit_dewpoint_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `economizer_maximum_limit_dewpoint_temperature`'.format(value))

        self._data["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def cold_supply_plenum_name(self):
        """Get cold_supply_plenum_name

        Returns:
            str: the value of `cold_supply_plenum_name` or None if not set
        """
        return self._data["Cold Supply Plenum Name"]

    @cold_supply_plenum_name.setter
    def cold_supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `cold_supply_plenum_name`
        Plenum zone name.  Supply plenum serves the cold inlets of all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `cold_supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_supply_plenum_name`')

        self._data["Cold Supply Plenum Name"] = value

    @property
    def hot_supply_plenum_name(self):
        """Get hot_supply_plenum_name

        Returns:
            str: the value of `hot_supply_plenum_name` or None if not set
        """
        return self._data["Hot Supply Plenum Name"]

    @hot_supply_plenum_name.setter
    def hot_supply_plenum_name(self, value=None):
        """  Corresponds to IDD Field `hot_supply_plenum_name`
        Plenum zone name.  Supply plenum serves the hot inlets of all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `hot_supply_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_supply_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_supply_plenum_name`')

        self._data["Hot Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """Get return_plenum_name

        Returns:
            str: the value of `return_plenum_name` or None if not set
        """
        return self._data["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """  Corresponds to IDD Field `return_plenum_name`
        Plenum zone name.  Supply plenum serves all zones on this system.
        Blank if none.

        Args:
            value (str): value for IDD Field `return_plenum_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_plenum_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_plenum_name`')

        self._data["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """Get night_cycle_control

        Returns:
            str: the value of `night_cycle_control` or None if not set
        """
        return self._data["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """  Corresponds to IDD Field `night_cycle_control`

        Args:
            value (str): value for IDD Field `night_cycle_control`
                Accepted values are:
                      - StayOff
                      - CycleOnAny
                      - CycleOnControlZone
                Default value: StayOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control`')
            vals = set()
            vals.add("StayOff")
            vals.add("CycleOnAny")
            vals.add("CycleOnControlZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `night_cycle_control`'.format(value))

        self._data["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """Get night_cycle_control_zone_name

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set
        """
        return self._data["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `night_cycle_control_zone_name`
        Applicable only if Night Cycle Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `night_cycle_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `night_cycle_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `night_cycle_control_zone_name`')

        self._data["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """Get heat_recovery_heat_exchanger_type

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set
        """
        return self._data["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """  Corresponds to IDD Field `heat_recovery_heat_exchanger_type`

        Args:
            value (str): value for IDD Field `heat_recovery_heat_exchanger_type`
                Accepted values are:
                      - Plate
                      - Rotary
                Default value: Plate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_heat_exchanger_type`')
            vals = set()
            vals.add("Plate")
            vals.add("Rotary")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_heat_exchanger_type`'.format(value))

        self._data["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """Get heat_recovery_frost_control_type

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set
        """
        return self._data["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_frost_control_type`

        Args:
            value (str): value for IDD Field `heat_recovery_frost_control_type`
                Accepted values are:
                      - None
                      - ExhaustAirRecirculation
                      - ExhaustOnly
                      - MinimumExhaustTemperature
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_frost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_frost_control_type`')
            vals = set()
            vals.add("None")
            vals.add("ExhaustAirRecirculation")
            vals.add("ExhaustOnly")
            vals.add("MinimumExhaustTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_frost_control_type`'.format(value))

        self._data["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """Get dehumidification_control_zone_name

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set
        """
        return self._data["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `dehumidification_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_zone_name`')

        self._data["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """Get dehumidification_relative_humidity_setpoint

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0 ):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100)
        Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `dehumidification_relative_humidity_setpoint`
                Units: percent
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dehumidification_relative_humidity_setpoint`')

        self._data["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """Get dehumidification_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Dehumidification Relative Humidity
        Setpoint above. Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `dehumidification_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_relative_humidity_setpoint_schedule_name`')

        self._data["Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """Get humidifier_control_zone_name

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set
        """
        return self._data["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_control_zone_name`
        Zone name where humidistat is located

        Args:
            value (str): value for IDD Field `humidifier_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_control_zone_name`')

        self._data["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """Get humidifier_relative_humidity_setpoint

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0 ):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint`
        Zone relative humidity setpoint in percent (0 to 100).
        Ignored if Humidifier Relative Humidity Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `humidifier_relative_humidity_setpoint`
                Units: percent
                Default value: 30.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_relative_humidity_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `humidifier_relative_humidity_setpoint`')

        self._data["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """Get humidifier_relative_humidity_setpoint_schedule_name

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set
        """
        return self._data["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Humidifier Relative Humidity
        Setpoint above.Schedule values must be in percent relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `humidifier_relative_humidity_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_relative_humidity_setpoint_schedule_name`')

        self._data["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def sizing_option(self):
        """Get sizing_option

        Returns:
            str: the value of `sizing_option` or None if not set
        """
        return self._data["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """  Corresponds to IDD Field `sizing_option`
        Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident
        zone air flow rates.

        Args:
            value (str): value for IDD Field `sizing_option`
                Accepted values are:
                      - Coincident
                      - NonCoincident
                Default value: NonCoincident
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sizing_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sizing_option`')
            vals = set()
            vals.add("Coincident")
            vals.add("NonCoincident")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sizing_option`'.format(value))

        self._data["Sizing Option"] = value

    @property
    def return_fan(self):
        """Get return_fan

        Returns:
            str: the value of `return_fan` or None if not set
        """
        return self._data["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """  Corresponds to IDD Field `return_fan`
        Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `return_fan`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan`'.format(value))

        self._data["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """Get return_fan_total_efficiency

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set
        """
        return self._data["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `return_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_total_efficiency`')

        self._data["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """Get return_fan_delta_pressure

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set
        """
        return self._data["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0 ):
        """  Corresponds to IDD Field `return_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `return_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_delta_pressure`')

        self._data["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """Get return_fan_motor_efficiency

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set
        """
        return self._data["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `return_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `return_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `return_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_efficiency`')

        self._data["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """Get return_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `return_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `return_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `return_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `return_fan_motor_in_air_stream_fraction`')

        self._data["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """Get return_fan_partload_power_coefficients

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self._data["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD Field `return_fan_partload_power_coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `return_fan_partload_power_coefficients`
                Accepted values are:
                      - InletVaneDampers
                      - OutletDampers
                      - VariableSpeedMotor
                      - ASHRAE90.1-2004AppendixG
                      - VariableSpeedMotorPressureReset
                Default value: InletVaneDampers
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_fan_partload_power_coefficients`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_fan_partload_power_coefficients`')
            vals = set()
            vals.add("InletVaneDampers")
            vals.add("OutletDampers")
            vals.add("VariableSpeedMotor")
            vals.add("ASHRAE90.1-2004AppendixG")
            vals.add("VariableSpeedMotorPressureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `return_fan_partload_power_coefficients`'.format(value))

        self._data["Return Fan Part-Load Power Coefficients"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.system_configuration_type))
        out.append(self._to_str(self.main_supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.main_supply_fan_minimum_flow_fraction))
        out.append(self._to_str(self.main_supply_fan_total_efficiency))
        out.append(self._to_str(self.main_supply_fan_delta_pressure))
        out.append(self._to_str(self.main_supply_fan_motor_efficiency))
        out.append(self._to_str(self.main_supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.main_supply_fan_partload_power_coefficients))
        out.append(self._to_str(self.cold_duct_supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.cold_duct_supply_fan_minimum_flow_fraction))
        out.append(self._to_str(self.cold_duct_supply_fan_total_efficiency))
        out.append(self._to_str(self.cold_duct_supply_fan_delta_pressure))
        out.append(self._to_str(self.cold_duct_supply_fan_motor_efficiency))
        out.append(self._to_str(self.cold_duct_supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.cold_duct_supply_fan_partload_power_coefficients))
        out.append(self._to_str(self.cold_duct_supply_fan_placement))
        out.append(self._to_str(self.hot_duct_supply_fan_maximum_flow_rate))
        out.append(self._to_str(self.hot_duct_supply_fan_minimum_flow_fraction))
        out.append(self._to_str(self.hot_duct_supply_fan_total_efficiency))
        out.append(self._to_str(self.hot_duct_supply_fan_delta_pressure))
        out.append(self._to_str(self.hot_duct_supply_fan_motor_efficiency))
        out.append(self._to_str(self.hot_duct_supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.hot_duct_supply_fan_partload_power_coefficients))
        out.append(self._to_str(self.hot_duct_supply_fan_placement))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_control_type))
        out.append(self._to_str(self.cooling_coil_design_setpoint_temperature))
        out.append(self._to_str(self.cooling_coil_setpoint_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_control_type))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_setpoint_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_capacity))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.preheat_coil_type))
        out.append(self._to_str(self.preheat_coil_availability_schedule_name))
        out.append(self._to_str(self.preheat_coil_design_setpoint))
        out.append(self._to_str(self.preheat_coil_setpoint_schedule_name))
        out.append(self._to_str(self.gas_preheat_coil_efficiency))
        out.append(self._to_str(self.gas_preheat_coil_parasitic_electric_load))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_control_type))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.economizer_type))
        out.append(self._to_str(self.economizer_lockout))
        out.append(self._to_str(self.economizer_upper_temperature_limit))
        out.append(self._to_str(self.economizer_lower_temperature_limit))
        out.append(self._to_str(self.economizer_upper_enthalpy_limit))
        out.append(self._to_str(self.economizer_maximum_limit_dewpoint_temperature))
        out.append(self._to_str(self.cold_supply_plenum_name))
        out.append(self._to_str(self.hot_supply_plenum_name))
        out.append(self._to_str(self.return_plenum_name))
        out.append(self._to_str(self.night_cycle_control))
        out.append(self._to_str(self.night_cycle_control_zone_name))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.heat_recovery_heat_exchanger_type))
        out.append(self._to_str(self.heat_recovery_frost_control_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_control_zone_name))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint))
        out.append(self._to_str(self.dehumidification_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_control_zone_name))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint))
        out.append(self._to_str(self.humidifier_relative_humidity_setpoint_schedule_name))
        out.append(self._to_str(self.sizing_option))
        out.append(self._to_str(self.return_fan))
        out.append(self._to_str(self.return_fan_total_efficiency))
        out.append(self._to_str(self.return_fan_delta_pressure))
        out.append(self._to_str(self.return_fan_motor_efficiency))
        out.append(self._to_str(self.return_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.return_fan_partload_power_coefficients))
        return ",".join(out)

class HvactemplateSystemDedicatedOutdoorAir(object):
    """ Corresponds to IDD object `HVACTemplate:System:DedicatedOutdoorAir`
        This object creates a dedicated outdoor air system that must be used with
        HVACTemplate:Zone:* objects for BaseboardHeat FanCoil PTAC PTHP WaterToAirHeatPump and VRF.
        Does not support HVACTemplate:Zone:VAV or other central multizone systems
    
    """
    internal_name = "HVACTemplate:System:DedicatedOutdoorAir"
    field_count = 46
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:System:DedicatedOutdoorAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Availability Schedule Name"] = None
        self._data["Air Outlet Type"] = None
        self._data["Supply Fan Flow Rate"] = None
        self._data["Supply Fan Total Efficiency"] = None
        self._data["Supply Fan Delta Pressure"] = None
        self._data["Supply Fan Motor Efficiency"] = None
        self._data["Supply Fan Motor in Air Stream Fraction"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Cooling Coil Type"] = None
        self._data["Cooling Coil Availability Schedule Name"] = None
        self._data["Cooling Coil Setpoint Control Type"] = None
        self._data["Cooling Coil Design Setpoint"] = None
        self._data["Cooling Coil Setpoint Schedule Name"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["DX Cooling Coil Gross Rated Total Capacity"] = None
        self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = None
        self._data["DX Cooling Coil Gross Rated COP"] = None
        self._data["Heating Coil Type"] = None
        self._data["Heating Coil Availability Schedule Name"] = None
        self._data["Heating Coil Setpoint Control Type"] = None
        self._data["Heating Coil Design Setpoint"] = None
        self._data["Heating Coil Setpoint Schedule Name"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = None
        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = None
        self._data["Gas Heating Coil Efficiency"] = None
        self._data["Gas Heating Coil Parasitic Electric Load"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Heat Recovery Sensible Effectiveness"] = None
        self._data["Heat Recovery Latent Effectiveness"] = None
        self._data["Heat Recovery Heat Exchanger Type"] = None
        self._data["Heat Recovery Frost Control Type"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Dehumidification Setpoint"] = None
        self._data["Humidifier Type"] = None
        self._data["Humidifier Availability Schedule Name"] = None
        self._data["Humidifier Rated Capacity"] = None
        self._data["Humidifier Rated Electric Power"] = None
        self._data["Humidifier Constant Setpoint"] = None
        self._data["Dehumidification Setpoint Schedule Name"] = None
        self._data["Humidifier Setpoint Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_availability_schedule_name = None
        else:
            self.system_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_type = None
        else:
            self.air_outlet_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_flow_rate = None
        else:
            self.supply_fan_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_total_efficiency = None
        else:
            self.supply_fan_total_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_delta_pressure = None
        else:
            self.supply_fan_delta_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_efficiency = None
        else:
            self.supply_fan_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_motor_in_air_stream_fraction = None
        else:
            self.supply_fan_motor_in_air_stream_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_type = None
        else:
            self.cooling_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_availability_schedule_name = None
        else:
            self.cooling_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_control_type = None
        else:
            self.cooling_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_design_setpoint = None
        else:
            self.cooling_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_schedule_name = None
        else:
            self.cooling_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_low = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.cooling_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_reset_outdoor_drybulb_high = None
        else:
            self.cooling_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_total_capacity = None
        else:
            self.dx_cooling_coil_gross_rated_total_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_sensible_heat_ratio = None
        else:
            self.dx_cooling_coil_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_gross_rated_cop = None
        else:
            self.dx_cooling_coil_gross_rated_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_type = None
        else:
            self.heating_coil_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_availability_schedule_name = None
        else:
            self.heating_coil_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_control_type = None
        else:
            self.heating_coil_setpoint_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_design_setpoint = None
        else:
            self.heating_coil_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_schedule_name = None
        else:
            self.heating_coil_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_low = None
        else:
            self.heating_coil_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = None
        else:
            self.heating_coil_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_reset_outdoor_drybulb_high = None
        else:
            self.heating_coil_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_efficiency = None
        else:
            self.gas_heating_coil_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_heating_coil_parasitic_electric_load = None
        else:
            self.gas_heating_coil_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_sensible_effectiveness = None
        else:
            self.heat_recovery_sensible_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_latent_effectiveness = None
        else:
            self.heat_recovery_latent_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_heat_exchanger_type = None
        else:
            self.heat_recovery_heat_exchanger_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_frost_control_type = None
        else:
            self.heat_recovery_frost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint = None
        else:
            self.dehumidification_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_type = None
        else:
            self.humidifier_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_availability_schedule_name = None
        else:
            self.humidifier_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_capacity = None
        else:
            self.humidifier_rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_rated_electric_power = None
        else:
            self.humidifier_rated_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_constant_setpoint = None
        else:
            self.humidifier_constant_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_setpoint_schedule_name = None
        else:
            self.dehumidification_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidifier_setpoint_schedule_name = None
        else:
            self.humidifier_setpoint_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """Get system_availability_schedule_name

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set
        """
        return self._data["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `system_availability_schedule_name`
        If blank, always on; DOAS System always on.  Schedule is used in availability manager
        and fan scheduling.

        Args:
            value (str): value for IDD Field `system_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_schedule_name`')

        self._data["System Availability Schedule Name"] = value

    @property
    def air_outlet_type(self):
        """Get air_outlet_type

        Returns:
            str: the value of `air_outlet_type` or None if not set
        """
        return self._data["Air Outlet Type"]

    @air_outlet_type.setter
    def air_outlet_type(self, value="DirectIntoZone"):
        """  Corresponds to IDD Field `air_outlet_type`

        Args:
            value (str): value for IDD Field `air_outlet_type`
                Accepted values are:
                      - DirectIntoZone
                Default value: DirectIntoZone
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_type`')
            vals = set()
            vals.add("DirectIntoZone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_outlet_type`'.format(value))

        self._data["Air Outlet Type"] = value

    @property
    def supply_fan_flow_rate(self):
        """Get supply_fan_flow_rate

        Returns:
            float: the value of `supply_fan_flow_rate` or None if not set
        """
        return self._data["Supply Fan Flow Rate"]

    @supply_fan_flow_rate.setter
    def supply_fan_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_fan_flow_rate`

        Args:
            value (float): value for IDD Field `supply_fan_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_flow_rate`')

        self._data["Supply Fan Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """Get supply_fan_total_efficiency

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set
        """
        return self._data["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `supply_fan_total_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_total_efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_total_efficiency`')

        self._data["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """Get supply_fan_delta_pressure

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set
        """
        return self._data["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0 ):
        """  Corresponds to IDD Field `supply_fan_delta_pressure`

        Args:
            value (float): value for IDD Field `supply_fan_delta_pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_delta_pressure`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_delta_pressure`')

        self._data["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """Get supply_fan_motor_efficiency

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set
        """
        return self._data["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `supply_fan_motor_efficiency`

        Args:
            value (float): value for IDD Field `supply_fan_motor_efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_fan_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_efficiency`')

        self._data["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """Get supply_fan_motor_in_air_stream_fraction

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set
        """
        return self._data["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `supply_fan_motor_in_air_stream_fraction`

        Args:
            value (float): value for IDD Field `supply_fan_motor_in_air_stream_fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_fan_motor_in_air_stream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `supply_fan_motor_in_air_stream_fraction`')

        self._data["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - DrawThrough
                      - BlowThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("DrawThrough")
            vals.add("BlowThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """Get cooling_coil_type

        Returns:
            str: the value of `cooling_coil_type` or None if not set
        """
        return self._data["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """  Corresponds to IDD Field `cooling_coil_type`

        Args:
            value (str): value for IDD Field `cooling_coil_type`
                Accepted values are:
                      - ChilledWater
                      - ChilledWaterDetailedFlatModel
                      - TwoSpeedDX
                      - TwoStageDX
                      - TwoStageHumidityControlDX
                      - HeatExchangerAssistedChilledWater
                      - HeatExchangerAssistedDX
                      - None
                Default value: ChilledWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("ChilledWaterDetailedFlatModel")
            vals.add("TwoSpeedDX")
            vals.add("TwoStageDX")
            vals.add("TwoStageHumidityControlDX")
            vals.add("HeatExchangerAssistedChilledWater")
            vals.add("HeatExchangerAssistedDX")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_type`'.format(value))

        self._data["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """Get cooling_coil_availability_schedule_name

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `cooling_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_availability_schedule_name`')

        self._data["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """Get cooling_coil_setpoint_control_type

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set
        """
        return self._data["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `cooling_coil_setpoint_control_type`

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - None
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_setpoint_control_type`'.format(value))

        self._data["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """Get cooling_coil_design_setpoint

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set
        """
        return self._data["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `cooling_coil_design_setpoint`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_design_setpoint`'.format(value))

        self._data["Cooling Coil Design Setpoint"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """Get cooling_coil_setpoint_schedule_name

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `cooling_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_setpoint_schedule_name`')

        self._data["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """Get cooling_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get cooling_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8 ):
        """  Corresponds to IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 12.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """Get cooling_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3 ):
        """  Corresponds to IDD Field `cooling_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `cooling_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 23.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def dx_cooling_coil_gross_rated_total_capacity(self):
        """Get dx_cooling_coil_gross_rated_total_capacity

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated Total Capacity"]

    @dx_cooling_coil_gross_rated_total_capacity.setter
    def dx_cooling_coil_gross_rated_total_capacity(self, value=None):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_total_capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_total_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_total_capacity`'.format(value))

        self._data["DX Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self):
        """Get dx_cooling_coil_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"]

    @dx_cooling_coil_gross_rated_sensible_heat_ratio.setter
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_sensible_heat_ratio`
        Gross SHR

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_sensible_heat_ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `dx_cooling_coil_gross_rated_sensible_heat_ratio`')

        self._data["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def dx_cooling_coil_gross_rated_cop(self):
        """Get dx_cooling_coil_gross_rated_cop

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_cop` or None if not set
        """
        return self._data["DX Cooling Coil Gross Rated COP"]

    @dx_cooling_coil_gross_rated_cop.setter
    def dx_cooling_coil_gross_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `dx_cooling_coil_gross_rated_cop`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input

        Args:
            value (float): value for IDD Field `dx_cooling_coil_gross_rated_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_cooling_coil_gross_rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `dx_cooling_coil_gross_rated_cop`')

        self._data["DX Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """Get heating_coil_type

        Returns:
            str: the value of `heating_coil_type` or None if not set
        """
        return self._data["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """  Corresponds to IDD Field `heating_coil_type`

        Args:
            value (str): value for IDD Field `heating_coil_type`
                Accepted values are:
                      - HotWater
                      - Electric
                      - Gas
                      - None
                Default value: HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Electric")
            vals.add("Gas")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_type`'.format(value))

        self._data["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """Get heating_coil_availability_schedule_name

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set
        """
        return self._data["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_availability_schedule_name`
        If blank, always on

        Args:
            value (str): value for IDD Field `heating_coil_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_availability_schedule_name`')

        self._data["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """Get heating_coil_setpoint_control_type

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set
        """
        return self._data["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """  Corresponds to IDD Field `heating_coil_setpoint_control_type`
        When selecting OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may need to be changed

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_control_type`
                Accepted values are:
                      - FixedSetpoint
                      - Scheduled
                      - OutdoorAirTemperatureReset
                      - None
                Default value: FixedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_control_type`')
            vals = set()
            vals.add("FixedSetpoint")
            vals.add("Scheduled")
            vals.add("OutdoorAirTemperatureReset")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_setpoint_control_type`'.format(value))

        self._data["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_design_setpoint(self):
        """Get heating_coil_design_setpoint

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self._data["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_design_setpoint`
        Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `heating_coil_design_setpoint`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_design_setpoint`'.format(value))

        self._data["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """Get heating_coil_setpoint_schedule_name

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set
        """
        return self._data["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `heating_coil_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_setpoint_schedule_name`')

        self._data["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=15.0 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults 15.0C (59F) at 7.8C (46F) to 12.2C (54F) at 12.2C (54F)

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """Get heating_coil_reset_outdoor_drybulb_low

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_low`
                Units: C
                Default value: 7.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_low`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """Get heating_coil_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """Get heating_coil_reset_outdoor_drybulb_high

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2 ):
        """  Corresponds to IDD Field `heating_coil_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `heating_coil_reset_outdoor_drybulb_high`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_coil_reset_outdoor_drybulb_high`'.format(value))

        self._data["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """Get gas_heating_coil_efficiency

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set
        """
        return self._data["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `gas_heating_coil_efficiency`

        Args:
            value (float): value for IDD Field `gas_heating_coil_efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_heating_coil_efficiency`')

        self._data["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """Get gas_heating_coil_parasitic_electric_load

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set
        """
        return self._data["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_heating_coil_parasitic_electric_load`

        Args:
            value (float): value for IDD Field `gas_heating_coil_parasitic_electric_load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_heating_coil_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_heating_coil_parasitic_electric_load`')

        self._data["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def heat_recovery_sensible_effectiveness(self):
        """Get heat_recovery_sensible_effectiveness

        Returns:
            float: the value of `heat_recovery_sensible_effectiveness` or None if not set
        """
        return self._data["Heat Recovery Sensible Effectiveness"]

    @heat_recovery_sensible_effectiveness.setter
    def heat_recovery_sensible_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `heat_recovery_sensible_effectiveness`

        Args:
            value (float): value for IDD Field `heat_recovery_sensible_effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_sensible_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_sensible_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `heat_recovery_sensible_effectiveness`')

        self._data["Heat Recovery Sensible Effectiveness"] = value

    @property
    def heat_recovery_latent_effectiveness(self):
        """Get heat_recovery_latent_effectiveness

        Returns:
            float: the value of `heat_recovery_latent_effectiveness` or None if not set
        """
        return self._data["Heat Recovery Latent Effectiveness"]

    @heat_recovery_latent_effectiveness.setter
    def heat_recovery_latent_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `heat_recovery_latent_effectiveness`

        Args:
            value (float): value for IDD Field `heat_recovery_latent_effectiveness`
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_latent_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_latent_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `heat_recovery_latent_effectiveness`')

        self._data["Heat Recovery Latent Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """Get heat_recovery_heat_exchanger_type

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set
        """
        return self._data["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """  Corresponds to IDD Field `heat_recovery_heat_exchanger_type`

        Args:
            value (str): value for IDD Field `heat_recovery_heat_exchanger_type`
                Accepted values are:
                      - Plate
                      - Rotary
                Default value: Plate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_heat_exchanger_type`')
            vals = set()
            vals.add("Plate")
            vals.add("Rotary")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_heat_exchanger_type`'.format(value))

        self._data["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """Get heat_recovery_frost_control_type

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set
        """
        return self._data["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_frost_control_type`

        Args:
            value (str): value for IDD Field `heat_recovery_frost_control_type`
                Accepted values are:
                      - None
                      - ExhaustAirRecirculation
                      - ExhaustOnly
                      - MinimumExhaustTemperature
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_frost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_frost_control_type`')
            vals = set()
            vals.add("None")
            vals.add("ExhaustAirRecirculation")
            vals.add("ExhaustOnly")
            vals.add("MinimumExhaustTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_frost_control_type`'.format(value))

        self._data["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil
        Valid for all cooling coil types.  If no heating coil specified, cold supply temps may occur.
        CoolReheatDesuperheater = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with desuperheater coil.
        Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX.
        Multimode = activate enhanced dehumidification mode as needed and meet sensible load.
        Valid only for Cooling Coil Type = TwoStageHumidityControlDX

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheatHeatingCoil
                      - CoolReheatDesuperheater
                      - Multimode
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheatHeatingCoil")
            vals.add("CoolReheatDesuperheater")
            vals.add("Multimode")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def dehumidification_setpoint(self):
        """Get dehumidification_setpoint

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self._data["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=0.00924 ):
        """  Corresponds to IDD Field `dehumidification_setpoint`
        The supply air humidity ratio for dehumidification control.
        Default of 0.00924 kgWater/kgDryAir is equivalent to 12.8C (55F) dewpoint.
        Ignored if Dehumidification Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `dehumidification_setpoint`
                Units: kgWater/kgDryAir
                Default value: 0.00924
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dehumidification_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `dehumidification_setpoint`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `dehumidification_setpoint`')

        self._data["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """Get humidifier_type

        Returns:
            str: the value of `humidifier_type` or None if not set
        """
        return self._data["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """  Corresponds to IDD Field `humidifier_type`

        Args:
            value (str): value for IDD Field `humidifier_type`
                Accepted values are:
                      - None
                      - ElectricSteam
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_type`')
            vals = set()
            vals.add("None")
            vals.add("ElectricSteam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidifier_type`'.format(value))

        self._data["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """Get humidifier_availability_schedule_name

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set
        """
        return self._data["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_availability_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `humidifier_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_availability_schedule_name`')

        self._data["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """Get humidifier_rated_capacity

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set
        """
        return self._data["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06 ):
        """  Corresponds to IDD Field `humidifier_rated_capacity`
        Moisture output rate at full rated power input.
        The humidifier does not currently autosize, so the default is very large
        to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `humidifier_rated_capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_capacity`')

        self._data["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """Get humidifier_rated_electric_power

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self._data["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value=None):
        """  Corresponds to IDD Field `humidifier_rated_electric_power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float): value for IDD Field `humidifier_rated_electric_power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_rated_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_rated_electric_power`')

        self._data["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_constant_setpoint(self):
        """Get humidifier_constant_setpoint

        Returns:
            float: the value of `humidifier_constant_setpoint` or None if not set
        """
        return self._data["Humidifier Constant Setpoint"]

    @humidifier_constant_setpoint.setter
    def humidifier_constant_setpoint(self, value=0.003 ):
        """  Corresponds to IDD Field `humidifier_constant_setpoint`
        The supply air humidity ratio for humidification control.
        Ignored if Humidifier Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `humidifier_constant_setpoint`
                Units: kgWater/kgDryAir
                Default value: 0.003
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidifier_constant_setpoint`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `humidifier_constant_setpoint`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `humidifier_constant_setpoint`')

        self._data["Humidifier Constant Setpoint"] = value

    @property
    def dehumidification_setpoint_schedule_name(self):
        """Get dehumidification_setpoint_schedule_name

        Returns:
            str: the value of `dehumidification_setpoint_schedule_name` or None if not set
        """
        return self._data["Dehumidification Setpoint Schedule Name"]

    @dehumidification_setpoint_schedule_name.setter
    def dehumidification_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `dehumidification_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Dehumidification Setpoint above.
        Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)

        Args:
            value (str): value for IDD Field `dehumidification_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_setpoint_schedule_name`')

        self._data["Dehumidification Setpoint Schedule Name"] = value

    @property
    def humidifier_setpoint_schedule_name(self):
        """Get humidifier_setpoint_schedule_name

        Returns:
            str: the value of `humidifier_setpoint_schedule_name` or None if not set
        """
        return self._data["Humidifier Setpoint Schedule Name"]

    @humidifier_setpoint_schedule_name.setter
    def humidifier_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `humidifier_setpoint_schedule_name`
        Leave blank to use constant setpoint specified in Humidifer Constant Setpoint above.
        Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)

        Args:
            value (str): value for IDD Field `humidifier_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidifier_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidifier_setpoint_schedule_name`')

        self._data["Humidifier Setpoint Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_availability_schedule_name))
        out.append(self._to_str(self.air_outlet_type))
        out.append(self._to_str(self.supply_fan_flow_rate))
        out.append(self._to_str(self.supply_fan_total_efficiency))
        out.append(self._to_str(self.supply_fan_delta_pressure))
        out.append(self._to_str(self.supply_fan_motor_efficiency))
        out.append(self._to_str(self.supply_fan_motor_in_air_stream_fraction))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.cooling_coil_type))
        out.append(self._to_str(self.cooling_coil_availability_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_control_type))
        out.append(self._to_str(self.cooling_coil_design_setpoint))
        out.append(self._to_str(self.cooling_coil_setpoint_schedule_name))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.cooling_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.cooling_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_total_capacity))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_sensible_heat_ratio))
        out.append(self._to_str(self.dx_cooling_coil_gross_rated_cop))
        out.append(self._to_str(self.heating_coil_type))
        out.append(self._to_str(self.heating_coil_availability_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_control_type))
        out.append(self._to_str(self.heating_coil_design_setpoint))
        out.append(self._to_str(self.heating_coil_setpoint_schedule_name))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.heating_coil_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.heating_coil_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.gas_heating_coil_efficiency))
        out.append(self._to_str(self.gas_heating_coil_parasitic_electric_load))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.heat_recovery_sensible_effectiveness))
        out.append(self._to_str(self.heat_recovery_latent_effectiveness))
        out.append(self._to_str(self.heat_recovery_heat_exchanger_type))
        out.append(self._to_str(self.heat_recovery_frost_control_type))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.dehumidification_setpoint))
        out.append(self._to_str(self.humidifier_type))
        out.append(self._to_str(self.humidifier_availability_schedule_name))
        out.append(self._to_str(self.humidifier_rated_capacity))
        out.append(self._to_str(self.humidifier_rated_electric_power))
        out.append(self._to_str(self.humidifier_constant_setpoint))
        out.append(self._to_str(self.dehumidification_setpoint_schedule_name))
        out.append(self._to_str(self.humidifier_setpoint_schedule_name))
        return ",".join(out)

class HvactemplatePlantChilledWaterLoop(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:ChilledWaterLoop`
        Plant and condenser loops to serve all HVACTemplate
        chilled water coils, chillers, and towers.
    
    """
    internal_name = "HVACTemplate:Plant:ChilledWaterLoop"
    field_count = 33
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:ChilledWaterLoop`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Pump Schedule Name"] = None
        self._data["Pump Control Type"] = None
        self._data["Chiller Plant Operation Scheme Type"] = None
        self._data["Chiller Plant Equipment Operation Schemes Name"] = None
        self._data["Chilled Water Setpoint Schedule Name"] = None
        self._data["Chilled Water Design Setpoint"] = None
        self._data["Chilled Water Pump Configuration"] = None
        self._data["Primary Chilled Water Pump Rated Head"] = None
        self._data["Secondary Chilled Water Pump Rated Head"] = None
        self._data["Condenser Plant Operation Scheme Type"] = None
        self._data["Condenser Equipment Operation Schemes Name"] = None
        self._data["Condenser Water Temperature Control Type"] = None
        self._data["Condenser Water Setpoint Schedule Name"] = None
        self._data["Condenser Water Design Setpoint"] = None
        self._data["Condenser Water Pump Rated Head"] = None
        self._data["Chilled Water Setpoint Reset Type"] = None
        self._data["Chilled Water Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Chilled Water Reset Outdoor Dry-Bulb Low"] = None
        self._data["Chilled Water Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Chilled Water Reset Outdoor Dry-Bulb High"] = None
        self._data["Chilled Water Primary Pump Type"] = None
        self._data["Chilled Water Secondary Pump Type"] = None
        self._data["Condenser Water Pump Type"] = None
        self._data["Chilled Water Supply Side Bypass Pipe"] = None
        self._data["Chilled Water Demand Side Bypass Pipe"] = None
        self._data["Condenser Water Supply Side Bypass Pipe"] = None
        self._data["Condenser Water Demand Side Bypass Pipe"] = None
        self._data["Fluid Type"] = None
        self._data["Loop Design Delta Temperature"] = None
        self._data["Minimum Outdoor Dry Bulb Temperature"] = None
        self._data["Chilled Water Load Distribution Scheme"] = None
        self._data["Condenser Water Load Distribution Scheme"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_schedule_name = None
        else:
            self.pump_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_control_type = None
        else:
            self.pump_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_plant_operation_scheme_type = None
        else:
            self.chiller_plant_operation_scheme_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_plant_equipment_operation_schemes_name = None
        else:
            self.chiller_plant_equipment_operation_schemes_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_setpoint_schedule_name = None
        else:
            self.chilled_water_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_design_setpoint = None
        else:
            self.chilled_water_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_pump_configuration = None
        else:
            self.chilled_water_pump_configuration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.primary_chilled_water_pump_rated_head = None
        else:
            self.primary_chilled_water_pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.secondary_chilled_water_pump_rated_head = None
        else:
            self.secondary_chilled_water_pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_plant_operation_scheme_type = None
        else:
            self.condenser_plant_operation_scheme_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_equipment_operation_schemes_name = None
        else:
            self.condenser_equipment_operation_schemes_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_temperature_control_type = None
        else:
            self.condenser_water_temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_setpoint_schedule_name = None
        else:
            self.condenser_water_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_design_setpoint = None
        else:
            self.condenser_water_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_pump_rated_head = None
        else:
            self.condenser_water_pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_setpoint_reset_type = None
        else:
            self.chilled_water_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_setpoint_at_outdoor_drybulb_low = None
        else:
            self.chilled_water_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_reset_outdoor_drybulb_low = None
        else:
            self.chilled_water_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_setpoint_at_outdoor_drybulb_high = None
        else:
            self.chilled_water_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_reset_outdoor_drybulb_high = None
        else:
            self.chilled_water_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_primary_pump_type = None
        else:
            self.chilled_water_primary_pump_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_secondary_pump_type = None
        else:
            self.chilled_water_secondary_pump_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_pump_type = None
        else:
            self.condenser_water_pump_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_supply_side_bypass_pipe = None
        else:
            self.chilled_water_supply_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_demand_side_bypass_pipe = None
        else:
            self.chilled_water_demand_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_supply_side_bypass_pipe = None
        else:
            self.condenser_water_supply_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_demand_side_bypass_pipe = None
        else:
            self.condenser_water_demand_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loop_design_delta_temperature = None
        else:
            self.loop_design_delta_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_dry_bulb_temperature = None
        else:
            self.minimum_outdoor_dry_bulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_load_distribution_scheme = None
        else:
            self.chilled_water_load_distribution_scheme = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_water_load_distribution_scheme = None
        else:
            self.condenser_water_load_distribution_scheme = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def pump_schedule_name(self):
        """Get pump_schedule_name

        Returns:
            str: the value of `pump_schedule_name` or None if not set
        """
        return self._data["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pump_schedule_name`
        If blank, always available
        Applies to both chilled water and condenser loop pumps

        Args:
            value (str): value for IDD Field `pump_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_schedule_name`')

        self._data["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """Get pump_control_type

        Returns:
            str: the value of `pump_control_type` or None if not set
        """
        return self._data["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """  Corresponds to IDD Field `pump_control_type`
        Applies to both chilled water and condenser loop pumps

        Args:
            value (str): value for IDD Field `pump_control_type`
                Accepted values are:
                      - Intermittent
                      - Continuous
                Default value: Intermittent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_control_type`')
            vals = set()
            vals.add("Intermittent")
            vals.add("Continuous")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pump_control_type`'.format(value))

        self._data["Pump Control Type"] = value

    @property
    def chiller_plant_operation_scheme_type(self):
        """Get chiller_plant_operation_scheme_type

        Returns:
            str: the value of `chiller_plant_operation_scheme_type` or None if not set
        """
        return self._data["Chiller Plant Operation Scheme Type"]

    @chiller_plant_operation_scheme_type.setter
    def chiller_plant_operation_scheme_type(self, value="Default"):
        """  Corresponds to IDD Field `chiller_plant_operation_scheme_type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Chiller objects.

        Args:
            value (str): value for IDD Field `chiller_plant_operation_scheme_type`
                Accepted values are:
                      - Default
                      - UserDefined
                Default value: Default
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_plant_operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_plant_operation_scheme_type`')
            vals = set()
            vals.add("Default")
            vals.add("UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_plant_operation_scheme_type`'.format(value))

        self._data["Chiller Plant Operation Scheme Type"] = value

    @property
    def chiller_plant_equipment_operation_schemes_name(self):
        """Get chiller_plant_equipment_operation_schemes_name

        Returns:
            str: the value of `chiller_plant_equipment_operation_schemes_name` or None if not set
        """
        return self._data["Chiller Plant Equipment Operation Schemes Name"]

    @chiller_plant_equipment_operation_schemes_name.setter
    def chiller_plant_equipment_operation_schemes_name(self, value=None):
        """  Corresponds to IDD Field `chiller_plant_equipment_operation_schemes_name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Chiller Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `chiller_plant_equipment_operation_schemes_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_plant_equipment_operation_schemes_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_plant_equipment_operation_schemes_name`')

        self._data["Chiller Plant Equipment Operation Schemes Name"] = value

    @property
    def chilled_water_setpoint_schedule_name(self):
        """Get chilled_water_setpoint_schedule_name

        Returns:
            str: the value of `chilled_water_setpoint_schedule_name` or None if not set
        """
        return self._data["Chilled Water Setpoint Schedule Name"]

    @chilled_water_setpoint_schedule_name.setter
    def chilled_water_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `chilled_water_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_setpoint_schedule_name`')

        self._data["Chilled Water Setpoint Schedule Name"] = value

    @property
    def chilled_water_design_setpoint(self):
        """Get chilled_water_design_setpoint

        Returns:
            float: the value of `chilled_water_design_setpoint` or None if not set
        """
        return self._data["Chilled Water Design Setpoint"]

    @chilled_water_design_setpoint.setter
    def chilled_water_design_setpoint(self, value=7.22 ):
        """  Corresponds to IDD Field `chilled_water_design_setpoint`
        Used for sizing and as constant setpoint if no Chilled Water Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `chilled_water_design_setpoint`
                Units: C
                Default value: 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_design_setpoint`'.format(value))

        self._data["Chilled Water Design Setpoint"] = value

    @property
    def chilled_water_pump_configuration(self):
        """Get chilled_water_pump_configuration

        Returns:
            str: the value of `chilled_water_pump_configuration` or None if not set
        """
        return self._data["Chilled Water Pump Configuration"]

    @chilled_water_pump_configuration.setter
    def chilled_water_pump_configuration(self, value="ConstantPrimaryNoSecondary"):
        """  Corresponds to IDD Field `chilled_water_pump_configuration`
        VariablePrimaryNoSecondary - variable flow to chillers and coils
        ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed
        ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils
        VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils

        Args:
            value (str): value for IDD Field `chilled_water_pump_configuration`
                Accepted values are:
                      - ConstantPrimaryNoSecondary
                      - VariablePrimaryNoSecondary
                      - ConstantPrimaryVariableSecondary
                Default value: ConstantPrimaryNoSecondary
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_pump_configuration`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_pump_configuration`')
            vals = set()
            vals.add("ConstantPrimaryNoSecondary")
            vals.add("VariablePrimaryNoSecondary")
            vals.add("ConstantPrimaryVariableSecondary")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_pump_configuration`'.format(value))

        self._data["Chilled Water Pump Configuration"] = value

    @property
    def primary_chilled_water_pump_rated_head(self):
        """Get primary_chilled_water_pump_rated_head

        Returns:
            float: the value of `primary_chilled_water_pump_rated_head` or None if not set
        """
        return self._data["Primary Chilled Water Pump Rated Head"]

    @primary_chilled_water_pump_rated_head.setter
    def primary_chilled_water_pump_rated_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `primary_chilled_water_pump_rated_head`
        default head is 60 feet H2O

        Args:
            value (float): value for IDD Field `primary_chilled_water_pump_rated_head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `primary_chilled_water_pump_rated_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `primary_chilled_water_pump_rated_head`')

        self._data["Primary Chilled Water Pump Rated Head"] = value

    @property
    def secondary_chilled_water_pump_rated_head(self):
        """Get secondary_chilled_water_pump_rated_head

        Returns:
            float: the value of `secondary_chilled_water_pump_rated_head` or None if not set
        """
        return self._data["Secondary Chilled Water Pump Rated Head"]

    @secondary_chilled_water_pump_rated_head.setter
    def secondary_chilled_water_pump_rated_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `secondary_chilled_water_pump_rated_head`
        default head is 60 feet H2O

        Args:
            value (float): value for IDD Field `secondary_chilled_water_pump_rated_head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `secondary_chilled_water_pump_rated_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `secondary_chilled_water_pump_rated_head`')

        self._data["Secondary Chilled Water Pump Rated Head"] = value

    @property
    def condenser_plant_operation_scheme_type(self):
        """Get condenser_plant_operation_scheme_type

        Returns:
            str: the value of `condenser_plant_operation_scheme_type` or None if not set
        """
        return self._data["Condenser Plant Operation Scheme Type"]

    @condenser_plant_operation_scheme_type.setter
    def condenser_plant_operation_scheme_type(self, value="Default"):
        """  Corresponds to IDD Field `condenser_plant_operation_scheme_type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Tower objects.
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `condenser_plant_operation_scheme_type`
                Accepted values are:
                      - Default
                      - UserDefined
                Default value: Default
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_plant_operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_plant_operation_scheme_type`')
            vals = set()
            vals.add("Default")
            vals.add("UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_plant_operation_scheme_type`'.format(value))

        self._data["Condenser Plant Operation Scheme Type"] = value

    @property
    def condenser_equipment_operation_schemes_name(self):
        """Get condenser_equipment_operation_schemes_name

        Returns:
            str: the value of `condenser_equipment_operation_schemes_name` or None if not set
        """
        return self._data["Condenser Equipment Operation Schemes Name"]

    @condenser_equipment_operation_schemes_name.setter
    def condenser_equipment_operation_schemes_name(self, value=None):
        """  Corresponds to IDD Field `condenser_equipment_operation_schemes_name`
        Name of a CondenserEquipmentOperationSchemes object
        Ignored if Condenser Plant Operation Scheme Type = Default
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `condenser_equipment_operation_schemes_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_equipment_operation_schemes_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_equipment_operation_schemes_name`')

        self._data["Condenser Equipment Operation Schemes Name"] = value

    @property
    def condenser_water_temperature_control_type(self):
        """Get condenser_water_temperature_control_type

        Returns:
            str: the value of `condenser_water_temperature_control_type` or None if not set
        """
        return self._data["Condenser Water Temperature Control Type"]

    @condenser_water_temperature_control_type.setter
    def condenser_water_temperature_control_type(self, value=None):
        """  Corresponds to IDD Field `condenser_water_temperature_control_type`
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `condenser_water_temperature_control_type`
                Accepted values are:
                      - OutdoorWetBulbTemperature
                      - SpecifiedSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_temperature_control_type`')
            vals = set()
            vals.add("OutdoorWetBulbTemperature")
            vals.add("SpecifiedSetpoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_water_temperature_control_type`'.format(value))

        self._data["Condenser Water Temperature Control Type"] = value

    @property
    def condenser_water_setpoint_schedule_name(self):
        """Get condenser_water_setpoint_schedule_name

        Returns:
            str: the value of `condenser_water_setpoint_schedule_name` or None if not set
        """
        return self._data["Condenser Water Setpoint Schedule Name"]

    @condenser_water_setpoint_schedule_name.setter
    def condenser_water_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `condenser_water_setpoint_schedule_name`
        Leave blank if constant setpoint
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `condenser_water_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_setpoint_schedule_name`')

        self._data["Condenser Water Setpoint Schedule Name"] = value

    @property
    def condenser_water_design_setpoint(self):
        """Get condenser_water_design_setpoint

        Returns:
            float: the value of `condenser_water_design_setpoint` or None if not set
        """
        return self._data["Condenser Water Design Setpoint"]

    @condenser_water_design_setpoint.setter
    def condenser_water_design_setpoint(self, value=29.4 ):
        """  Corresponds to IDD Field `condenser_water_design_setpoint`
        Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified.
        May be left blank if not serving any water cooled chillers

        Args:
            value (float): value for IDD Field `condenser_water_design_setpoint`
                Units: C
                Default value: 29.4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_water_design_setpoint`'.format(value))

        self._data["Condenser Water Design Setpoint"] = value

    @property
    def condenser_water_pump_rated_head(self):
        """Get condenser_water_pump_rated_head

        Returns:
            float: the value of `condenser_water_pump_rated_head` or None if not set
        """
        return self._data["Condenser Water Pump Rated Head"]

    @condenser_water_pump_rated_head.setter
    def condenser_water_pump_rated_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `condenser_water_pump_rated_head`
        May be left blank if not serving any water cooled chillers
        default head is 60 feet H2O

        Args:
            value (float): value for IDD Field `condenser_water_pump_rated_head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_water_pump_rated_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_water_pump_rated_head`')

        self._data["Condenser Water Pump Rated Head"] = value

    @property
    def chilled_water_setpoint_reset_type(self):
        """Get chilled_water_setpoint_reset_type

        Returns:
            str: the value of `chilled_water_setpoint_reset_type` or None if not set
        """
        return self._data["Chilled Water Setpoint Reset Type"]

    @chilled_water_setpoint_reset_type.setter
    def chilled_water_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `chilled_water_setpoint_reset_type`
        Overrides Chilled Water Setpoint Schedule Name

        Args:
            value (str): value for IDD Field `chilled_water_setpoint_reset_type`
                Accepted values are:
                      - None
                      - OutdoorAirTemperatureReset
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("OutdoorAirTemperatureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_setpoint_reset_type`'.format(value))

        self._data["Chilled Water Setpoint Reset Type"] = value

    @property
    def chilled_water_setpoint_at_outdoor_drybulb_low(self):
        """Get chilled_water_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `chilled_water_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Chilled Water Setpoint at Outdoor Dry-Bulb Low"]

    @chilled_water_setpoint_at_outdoor_drybulb_low.setter
    def chilled_water_setpoint_at_outdoor_drybulb_low(self, value=12.2 ):
        """  Corresponds to IDD Field `chilled_water_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `chilled_water_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 12.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Chilled Water Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def chilled_water_reset_outdoor_drybulb_low(self):
        """Get chilled_water_reset_outdoor_drybulb_low

        Returns:
            float: the value of `chilled_water_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Chilled Water Reset Outdoor Dry-Bulb Low"]

    @chilled_water_reset_outdoor_drybulb_low.setter
    def chilled_water_reset_outdoor_drybulb_low(self, value=15.6 ):
        """  Corresponds to IDD Field `chilled_water_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `chilled_water_reset_outdoor_drybulb_low`
                Units: C
                Default value: 15.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_reset_outdoor_drybulb_low`'.format(value))

        self._data["Chilled Water Reset Outdoor Dry-Bulb Low"] = value

    @property
    def chilled_water_setpoint_at_outdoor_drybulb_high(self):
        """Get chilled_water_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `chilled_water_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Chilled Water Setpoint at Outdoor Dry-Bulb High"]

    @chilled_water_setpoint_at_outdoor_drybulb_high.setter
    def chilled_water_setpoint_at_outdoor_drybulb_high(self, value=6.7 ):
        """  Corresponds to IDD Field `chilled_water_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `chilled_water_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 6.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Chilled Water Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def chilled_water_reset_outdoor_drybulb_high(self):
        """Get chilled_water_reset_outdoor_drybulb_high

        Returns:
            float: the value of `chilled_water_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Chilled Water Reset Outdoor Dry-Bulb High"]

    @chilled_water_reset_outdoor_drybulb_high.setter
    def chilled_water_reset_outdoor_drybulb_high(self, value=26.7 ):
        """  Corresponds to IDD Field `chilled_water_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `chilled_water_reset_outdoor_drybulb_high`
                Units: C
                Default value: 26.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_reset_outdoor_drybulb_high`'.format(value))

        self._data["Chilled Water Reset Outdoor Dry-Bulb High"] = value

    @property
    def chilled_water_primary_pump_type(self):
        """Get chilled_water_primary_pump_type

        Returns:
            str: the value of `chilled_water_primary_pump_type` or None if not set
        """
        return self._data["Chilled Water Primary Pump Type"]

    @chilled_water_primary_pump_type.setter
    def chilled_water_primary_pump_type(self, value="SinglePump"):
        """  Corresponds to IDD Field `chilled_water_primary_pump_type`
        Describes the type of pump configuration used for the primary portion of the chilled water loop.

        Args:
            value (str): value for IDD Field `chilled_water_primary_pump_type`
                Accepted values are:
                      - SinglePump
                      - PumpPerChiller
                      - TwoHeaderedPumps
                      - ThreeHeaderedPumps
                      - FourHeaderedPumps
                      - FiveHeaderedPumps
                Default value: SinglePump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_primary_pump_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_primary_pump_type`')
            vals = set()
            vals.add("SinglePump")
            vals.add("PumpPerChiller")
            vals.add("TwoHeaderedPumps")
            vals.add("ThreeHeaderedPumps")
            vals.add("FourHeaderedPumps")
            vals.add("FiveHeaderedPumps")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_primary_pump_type`'.format(value))

        self._data["Chilled Water Primary Pump Type"] = value

    @property
    def chilled_water_secondary_pump_type(self):
        """Get chilled_water_secondary_pump_type

        Returns:
            str: the value of `chilled_water_secondary_pump_type` or None if not set
        """
        return self._data["Chilled Water Secondary Pump Type"]

    @chilled_water_secondary_pump_type.setter
    def chilled_water_secondary_pump_type(self, value="SinglePump"):
        """  Corresponds to IDD Field `chilled_water_secondary_pump_type`
        Describes the type of pump configuration used for the secondary portion of the chilled water loop.

        Args:
            value (str): value for IDD Field `chilled_water_secondary_pump_type`
                Accepted values are:
                      - SinglePump
                      - TwoHeaderedPumps
                      - ThreeHeaderedPumps
                      - FourHeaderedPumps
                      - FiveHeaderedPumps
                Default value: SinglePump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_secondary_pump_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_secondary_pump_type`')
            vals = set()
            vals.add("SinglePump")
            vals.add("TwoHeaderedPumps")
            vals.add("ThreeHeaderedPumps")
            vals.add("FourHeaderedPumps")
            vals.add("FiveHeaderedPumps")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_secondary_pump_type`'.format(value))

        self._data["Chilled Water Secondary Pump Type"] = value

    @property
    def condenser_water_pump_type(self):
        """Get condenser_water_pump_type

        Returns:
            str: the value of `condenser_water_pump_type` or None if not set
        """
        return self._data["Condenser Water Pump Type"]

    @condenser_water_pump_type.setter
    def condenser_water_pump_type(self, value="SinglePump"):
        """  Corresponds to IDD Field `condenser_water_pump_type`
        Describes the type of pump configuration used for the condenser water loop.

        Args:
            value (str): value for IDD Field `condenser_water_pump_type`
                Accepted values are:
                      - SinglePump
                      - PumpPerTower
                      - TwoHeaderedPumps
                      - ThreeHeaderedPumps
                      - FourHeaderedPumps
                      - FiveHeaderedPumps
                Default value: SinglePump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_pump_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_pump_type`')
            vals = set()
            vals.add("SinglePump")
            vals.add("PumpPerTower")
            vals.add("TwoHeaderedPumps")
            vals.add("ThreeHeaderedPumps")
            vals.add("FourHeaderedPumps")
            vals.add("FiveHeaderedPumps")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_water_pump_type`'.format(value))

        self._data["Condenser Water Pump Type"] = value

    @property
    def chilled_water_supply_side_bypass_pipe(self):
        """Get chilled_water_supply_side_bypass_pipe

        Returns:
            str: the value of `chilled_water_supply_side_bypass_pipe` or None if not set
        """
        return self._data["Chilled Water Supply Side Bypass Pipe"]

    @chilled_water_supply_side_bypass_pipe.setter
    def chilled_water_supply_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `chilled_water_supply_side_bypass_pipe`
        Determines if a supply side bypass pipe is present in the chilled water loop.

        Args:
            value (str): value for IDD Field `chilled_water_supply_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_supply_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_supply_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_supply_side_bypass_pipe`'.format(value))

        self._data["Chilled Water Supply Side Bypass Pipe"] = value

    @property
    def chilled_water_demand_side_bypass_pipe(self):
        """Get chilled_water_demand_side_bypass_pipe

        Returns:
            str: the value of `chilled_water_demand_side_bypass_pipe` or None if not set
        """
        return self._data["Chilled Water Demand Side Bypass Pipe"]

    @chilled_water_demand_side_bypass_pipe.setter
    def chilled_water_demand_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `chilled_water_demand_side_bypass_pipe`
        Determines if a demand side bypass pipe is present in the chilled water loop.

        Args:
            value (str): value for IDD Field `chilled_water_demand_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_demand_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_demand_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_demand_side_bypass_pipe`'.format(value))

        self._data["Chilled Water Demand Side Bypass Pipe"] = value

    @property
    def condenser_water_supply_side_bypass_pipe(self):
        """Get condenser_water_supply_side_bypass_pipe

        Returns:
            str: the value of `condenser_water_supply_side_bypass_pipe` or None if not set
        """
        return self._data["Condenser Water Supply Side Bypass Pipe"]

    @condenser_water_supply_side_bypass_pipe.setter
    def condenser_water_supply_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `condenser_water_supply_side_bypass_pipe`
        Determines if a supply side bypass pipe is present in the condenser water loop.

        Args:
            value (str): value for IDD Field `condenser_water_supply_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_supply_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_supply_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_water_supply_side_bypass_pipe`'.format(value))

        self._data["Condenser Water Supply Side Bypass Pipe"] = value

    @property
    def condenser_water_demand_side_bypass_pipe(self):
        """Get condenser_water_demand_side_bypass_pipe

        Returns:
            str: the value of `condenser_water_demand_side_bypass_pipe` or None if not set
        """
        return self._data["Condenser Water Demand Side Bypass Pipe"]

    @condenser_water_demand_side_bypass_pipe.setter
    def condenser_water_demand_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `condenser_water_demand_side_bypass_pipe`
        Determines if a demand side bypass pipe is present in the condenser water loop.

        Args:
            value (str): value for IDD Field `condenser_water_demand_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_demand_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_demand_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_water_demand_side_bypass_pipe`'.format(value))

        self._data["Condenser Water Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Water
                      - EthyleneGlycol30
                      - EthyleneGlycol40
                      - EthyleneGlycol50
                      - EthyleneGlycol60
                      - PropyleneGlycol30
                      - PropyleneGlycol40
                      - PropyleneGlycol50
                      - PropyleneGlycol60
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Water")
            vals.add("EthyleneGlycol30")
            vals.add("EthyleneGlycol40")
            vals.add("EthyleneGlycol50")
            vals.add("EthyleneGlycol60")
            vals.add("PropyleneGlycol30")
            vals.add("PropyleneGlycol40")
            vals.add("PropyleneGlycol50")
            vals.add("PropyleneGlycol60")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """Get loop_design_delta_temperature

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set
        """
        return self._data["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=6.67 ):
        """  Corresponds to IDD Field `loop_design_delta_temperature`
        The temperature difference used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `loop_design_delta_temperature`
                Units: deltaC
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `loop_design_delta_temperature`'.format(value))

        self._data["Loop Design Delta Temperature"] = value

    @property
    def minimum_outdoor_dry_bulb_temperature(self):
        """Get minimum_outdoor_dry_bulb_temperature

        Returns:
            float: the value of `minimum_outdoor_dry_bulb_temperature` or None if not set
        """
        return self._data["Minimum Outdoor Dry Bulb Temperature"]

    @minimum_outdoor_dry_bulb_temperature.setter
    def minimum_outdoor_dry_bulb_temperature(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_dry_bulb_temperature`
        The minimum outdoor dry bulb temperature that the chilled water loops operate.
        Leave blank for no limit.

        Args:
            value (float): value for IDD Field `minimum_outdoor_dry_bulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_dry_bulb_temperature`'.format(value))

        self._data["Minimum Outdoor Dry Bulb Temperature"] = value

    @property
    def chilled_water_load_distribution_scheme(self):
        """Get chilled_water_load_distribution_scheme

        Returns:
            str: the value of `chilled_water_load_distribution_scheme` or None if not set
        """
        return self._data["Chilled Water Load Distribution Scheme"]

    @chilled_water_load_distribution_scheme.setter
    def chilled_water_load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `chilled_water_load_distribution_scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `chilled_water_load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                      - Sequential
                      - Uniform
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            vals.add("Sequential")
            vals.add("Uniform")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_load_distribution_scheme`'.format(value))

        self._data["Chilled Water Load Distribution Scheme"] = value

    @property
    def condenser_water_load_distribution_scheme(self):
        """Get condenser_water_load_distribution_scheme

        Returns:
            str: the value of `condenser_water_load_distribution_scheme` or None if not set
        """
        return self._data["Condenser Water Load Distribution Scheme"]

    @condenser_water_load_distribution_scheme.setter
    def condenser_water_load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `condenser_water_load_distribution_scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `condenser_water_load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                      - Sequential
                      - Uniform
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            vals.add("Sequential")
            vals.add("Uniform")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_water_load_distribution_scheme`'.format(value))

        self._data["Condenser Water Load Distribution Scheme"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.pump_schedule_name))
        out.append(self._to_str(self.pump_control_type))
        out.append(self._to_str(self.chiller_plant_operation_scheme_type))
        out.append(self._to_str(self.chiller_plant_equipment_operation_schemes_name))
        out.append(self._to_str(self.chilled_water_setpoint_schedule_name))
        out.append(self._to_str(self.chilled_water_design_setpoint))
        out.append(self._to_str(self.chilled_water_pump_configuration))
        out.append(self._to_str(self.primary_chilled_water_pump_rated_head))
        out.append(self._to_str(self.secondary_chilled_water_pump_rated_head))
        out.append(self._to_str(self.condenser_plant_operation_scheme_type))
        out.append(self._to_str(self.condenser_equipment_operation_schemes_name))
        out.append(self._to_str(self.condenser_water_temperature_control_type))
        out.append(self._to_str(self.condenser_water_setpoint_schedule_name))
        out.append(self._to_str(self.condenser_water_design_setpoint))
        out.append(self._to_str(self.condenser_water_pump_rated_head))
        out.append(self._to_str(self.chilled_water_setpoint_reset_type))
        out.append(self._to_str(self.chilled_water_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.chilled_water_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.chilled_water_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.chilled_water_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.chilled_water_primary_pump_type))
        out.append(self._to_str(self.chilled_water_secondary_pump_type))
        out.append(self._to_str(self.condenser_water_pump_type))
        out.append(self._to_str(self.chilled_water_supply_side_bypass_pipe))
        out.append(self._to_str(self.chilled_water_demand_side_bypass_pipe))
        out.append(self._to_str(self.condenser_water_supply_side_bypass_pipe))
        out.append(self._to_str(self.condenser_water_demand_side_bypass_pipe))
        out.append(self._to_str(self.fluid_type))
        out.append(self._to_str(self.loop_design_delta_temperature))
        out.append(self._to_str(self.minimum_outdoor_dry_bulb_temperature))
        out.append(self._to_str(self.chilled_water_load_distribution_scheme))
        out.append(self._to_str(self.condenser_water_load_distribution_scheme))
        return ",".join(out)

class HvactemplatePlantChiller(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Chiller`
        This object adds a chiller to an HVACTemplate:Plant:ChilledWaterLoop.
    
    """
    internal_name = "HVACTemplate:Plant:Chiller"
    field_count = 12
    required_fields = ["Name", "Chiller Type", "Nominal COP"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Chiller`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Chiller Type"] = None
        self._data["Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Condenser Type"] = None
        self._data["Priority"] = None
        self._data["Sizing Factor"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Minimum Unloading Ratio"] = None
        self._data["Leaving Chilled Water Lower Temperature Limit"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_type = None
        else:
            self.chiller_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity = None
        else:
            self.capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_unloading_ratio = None
        else:
            self.minimum_unloading_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.leaving_chilled_water_lower_temperature_limit = None
        else:
            self.leaving_chilled_water_lower_temperature_limit = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def chiller_type(self):
        """Get chiller_type

        Returns:
            str: the value of `chiller_type` or None if not set
        """
        return self._data["Chiller Type"]

    @chiller_type.setter
    def chiller_type(self, value=None):
        """  Corresponds to IDD Field `chiller_type`

        Args:
            value (str): value for IDD Field `chiller_type`
                Accepted values are:
                      - DistrictChilledWater
                      - ElectricCentrifugalChiller
                      - ElectricScrewChiller
                      - ElectricReciprocatingChiller
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_type`')
            vals = set()
            vals.add("DistrictChilledWater")
            vals.add("ElectricCentrifugalChiller")
            vals.add("ElectricScrewChiller")
            vals.add("ElectricReciprocatingChiller")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_type`'.format(value))

        self._data["Chiller Type"] = value

    @property
    def capacity(self):
        """Get capacity

        Returns:
            float: the value of `capacity` or None if not set
        """
        return self._data["Capacity"]

    @capacity.setter
    def capacity(self, value=None):
        """  Corresponds to IDD Field `capacity`

        Args:
            value (float): value for IDD Field `capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `capacity`')

        self._data["Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`
        Not applicable if Chiller Type is DistrictChilledWater
        Electric Reciprocating Chiller

        Args:
            value (float): value for IDD Field `nominal_cop`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `condenser_type`
        Not applicable if Chiller Type is DistrictChilledWater

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            str: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        If Chiller Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `priority`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `priority`')

        self._data["Priority"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`
        Part load ratio below which the chiller starts cycling on/off to meet the load.
        Must be less than or equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`
        Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """Get minimum_unloading_ratio

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set
        """
        return self._data["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.25 ):
        """  Corresponds to IDD Field `minimum_unloading_ratio`
        Part load ratio where the chiller can no longer unload and false loading begins.
        Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_unloading_ratio`
                Default value: 0.25
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_unloading_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_unloading_ratio`')

        self._data["Minimum Unloading Ratio"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """Get leaving_chilled_water_lower_temperature_limit

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set
        """
        return self._data["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=5.0 ):
        """  Corresponds to IDD Field `leaving_chilled_water_lower_temperature_limit`

        Args:
            value (float): value for IDD Field `leaving_chilled_water_lower_temperature_limit`
                Units: C
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `leaving_chilled_water_lower_temperature_limit`'.format(value))

        self._data["Leaving Chilled Water Lower Temperature Limit"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.chiller_type))
        out.append(self._to_str(self.capacity))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.priority))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.minimum_unloading_ratio))
        out.append(self._to_str(self.leaving_chilled_water_lower_temperature_limit))
        return ",".join(out)

class HvactemplatePlantChillerObjectReference(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Chiller:ObjectReference`
        This object references a detailed chiller object and adds it to
        an HVACTemplate:Plant:ChilledWaterLoop. The user must create a complete
        detailed chiller object with all required curve or performance objects.
    
    """
    internal_name = "HVACTemplate:Plant:Chiller:ObjectReference"
    field_count = 4
    required_fields = ["Name", "Chiller Object Type", "Chiller Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Chiller:ObjectReference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Chiller Object Type"] = None
        self._data["Chiller Name"] = None
        self._data["Priority"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_object_type = None
        else:
            self.chiller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_name = None
        else:
            self.chiller_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        The name of this object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def chiller_object_type(self):
        """Get chiller_object_type

        Returns:
            str: the value of `chiller_object_type` or None if not set
        """
        return self._data["Chiller Object Type"]

    @chiller_object_type.setter
    def chiller_object_type(self, value="Chiller:Electric:EIR"):
        """  Corresponds to IDD Field `chiller_object_type`

        Args:
            value (str): value for IDD Field `chiller_object_type`
                Accepted values are:
                      - Chiller:Electric:EIR
                      - Chiller:Electric:ReformulatedEIR
                Default value: Chiller:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_object_type`')
            vals = set()
            vals.add("Chiller:Electric:EIR")
            vals.add("Chiller:Electric:ReformulatedEIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_object_type`'.format(value))

        self._data["Chiller Object Type"] = value

    @property
    def chiller_name(self):
        """Get chiller_name

        Returns:
            str: the value of `chiller_name` or None if not set
        """
        return self._data["Chiller Name"]

    @chiller_name.setter
    def chiller_name(self, value=None):
        """  Corresponds to IDD Field `chiller_name`
        The name of the detailed chiller object.

        Args:
            value (str): value for IDD Field `chiller_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_name`')

        self._data["Chiller Name"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            float: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        If Chiller Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `priority`'.format(value))

        self._data["Priority"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.chiller_object_type))
        out.append(self._to_str(self.chiller_name))
        out.append(self._to_str(self.priority))
        return ",".join(out)

class HvactemplatePlantTower(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Tower`
        This object adds a cooling tower to an HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop.
    
    """
    internal_name = "HVACTemplate:Plant:Tower"
    field_count = 10
    required_fields = ["Name", "Tower Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Tower`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tower Type"] = None
        self._data["High Speed Nominal Capacity"] = None
        self._data["High Speed Fan Power"] = None
        self._data["Low Speed Nominal Capacity"] = None
        self._data["Low Speed Fan Power"] = None
        self._data["Free Convection Capacity"] = None
        self._data["Priority"] = None
        self._data["Sizing Factor"] = None
        self._data["Template Plant Loop Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tower_type = None
        else:
            self.tower_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_speed_nominal_capacity = None
        else:
            self.high_speed_nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_speed_fan_power = None
        else:
            self.high_speed_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_speed_nominal_capacity = None
        else:
            self.low_speed_nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_speed_fan_power = None
        else:
            self.low_speed_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.free_convection_capacity = None
        else:
            self.free_convection_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_plant_loop_type = None
        else:
            self.template_plant_loop_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tower_type(self):
        """Get tower_type

        Returns:
            str: the value of `tower_type` or None if not set
        """
        return self._data["Tower Type"]

    @tower_type.setter
    def tower_type(self, value=None):
        """  Corresponds to IDD Field `tower_type`

        Args:
            value (str): value for IDD Field `tower_type`
                Accepted values are:
                      - SingleSpeed
                      - TwoSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tower_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tower_type`')
            vals = set()
            vals.add("SingleSpeed")
            vals.add("TwoSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `tower_type`'.format(value))

        self._data["Tower Type"] = value

    @property
    def high_speed_nominal_capacity(self):
        """Get high_speed_nominal_capacity

        Returns:
            float: the value of `high_speed_nominal_capacity` or None if not set
        """
        return self._data["High Speed Nominal Capacity"]

    @high_speed_nominal_capacity.setter
    def high_speed_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `high_speed_nominal_capacity`
        Applicable for tower type SingleSpeed and TwoSpeed
        Nominal tower capacity with entering water at 35C (95F), leaving water at
        29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F)
        dry-bulb temperature, with the tower fan operating at high speed. Design water
        flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity
        times (1.25) gives the actual tower heat rejection at these operating conditions.

        Args:
            value (float): value for IDD Field `high_speed_nominal_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_nominal_capacity`')

        self._data["High Speed Nominal Capacity"] = value

    @property
    def high_speed_fan_power(self):
        """Get high_speed_fan_power

        Returns:
            float: the value of `high_speed_fan_power` or None if not set
        """
        return self._data["High Speed Fan Power"]

    @high_speed_fan_power.setter
    def high_speed_fan_power(self, value=None):
        """  Corresponds to IDD Field `high_speed_fan_power`
        Applicable for tower type SingleSpeed and TwoSpeed

        Args:
            value (float): value for IDD Field `high_speed_fan_power`
                Units: W
                IP-Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_fan_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_fan_power`')

        self._data["High Speed Fan Power"] = value

    @property
    def low_speed_nominal_capacity(self):
        """Get low_speed_nominal_capacity

        Returns:
            float: the value of `low_speed_nominal_capacity` or None if not set
        """
        return self._data["Low Speed Nominal Capacity"]

    @low_speed_nominal_capacity.setter
    def low_speed_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `low_speed_nominal_capacity`
        Applicable only for Tower Type TwoSpeed
        Nominal tower capacity with entering water at 35C (95F), leaving water at
        29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F)
        dry-bulb temperature, with the tower fan operating at low speed. Design water flow
        rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity
        (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat
        rejection at these operating conditions.

        Args:
            value (float): value for IDD Field `low_speed_nominal_capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_nominal_capacity`')

        self._data["Low Speed Nominal Capacity"] = value

    @property
    def low_speed_fan_power(self):
        """Get low_speed_fan_power

        Returns:
            float: the value of `low_speed_fan_power` or None if not set
        """
        return self._data["Low Speed Fan Power"]

    @low_speed_fan_power.setter
    def low_speed_fan_power(self, value=None):
        """  Corresponds to IDD Field `low_speed_fan_power`
        Applicable only for Tower Type TwoSpeed

        Args:
            value (float): value for IDD Field `low_speed_fan_power`
                Units: W
                IP-Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_fan_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_fan_power`')

        self._data["Low Speed Fan Power"] = value

    @property
    def free_convection_capacity(self):
        """Get free_convection_capacity

        Returns:
            float: the value of `free_convection_capacity` or None if not set
        """
        return self._data["Free Convection Capacity"]

    @free_convection_capacity.setter
    def free_convection_capacity(self, value=None):
        """  Corresponds to IDD Field `free_convection_capacity`
        Applicable for Tower Type SingleSpeed and TwoSpeed
        Tower capacity in free convection regime with entering water at 35C (95F),
        leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature
        and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be
        5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower
        free convection capacity times (1.25) gives the actual tower heat rejection at
        these operating conditions.

        Args:
            value (float): value for IDD Field `free_convection_capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `free_convection_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `free_convection_capacity`')

        self._data["Free Convection Capacity"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            str: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        Applicable for all Tower Types
        If Condenser Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `priority`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `priority`')

        self._data["Priority"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def template_plant_loop_type(self):
        """Get template_plant_loop_type

        Returns:
            str: the value of `template_plant_loop_type` or None if not set
        """
        return self._data["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """  Corresponds to IDD Field `template_plant_loop_type`
        Specifies if this tower serves a template chilled water loop or mixed water loop
        If left blank, will serve a chilled water loop if present, or a mixed water loop (if
        no chilled water loop is present).

        Args:
            value (str): value for IDD Field `template_plant_loop_type`
                Accepted values are:
                      - ChilledWater
                      - MixedWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_plant_loop_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_plant_loop_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("MixedWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `template_plant_loop_type`'.format(value))

        self._data["Template Plant Loop Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tower_type))
        out.append(self._to_str(self.high_speed_nominal_capacity))
        out.append(self._to_str(self.high_speed_fan_power))
        out.append(self._to_str(self.low_speed_nominal_capacity))
        out.append(self._to_str(self.low_speed_fan_power))
        out.append(self._to_str(self.free_convection_capacity))
        out.append(self._to_str(self.priority))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.template_plant_loop_type))
        return ",".join(out)

class HvactemplatePlantTowerObjectReference(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Tower:ObjectReference`
        This object references a detailed cooling tower object and adds it to
        an HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop. The user must create a complete
        detailed cooling tower object with all required curve or performance objects.
    
    """
    internal_name = "HVACTemplate:Plant:Tower:ObjectReference"
    field_count = 5
    required_fields = ["Name", "Cooling Tower Object Type", "Cooling Tower Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Tower:ObjectReference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Cooling Tower Object Type"] = None
        self._data["Cooling Tower Name"] = None
        self._data["Priority"] = None
        self._data["Template Plant Loop Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_tower_object_type = None
        else:
            self.cooling_tower_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_tower_name = None
        else:
            self.cooling_tower_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_plant_loop_type = None
        else:
            self.template_plant_loop_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        The name of this object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def cooling_tower_object_type(self):
        """Get cooling_tower_object_type

        Returns:
            str: the value of `cooling_tower_object_type` or None if not set
        """
        return self._data["Cooling Tower Object Type"]

    @cooling_tower_object_type.setter
    def cooling_tower_object_type(self, value="CoolingTower:SingleSpeed"):
        """  Corresponds to IDD Field `cooling_tower_object_type`

        Args:
            value (str): value for IDD Field `cooling_tower_object_type`
                Accepted values are:
                      - CoolingTower:SingleSpeed
                      - CoolingTower:TwoSpeed
                      - CoolingTower:VariableSpeed
                Default value: CoolingTower:SingleSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_tower_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_tower_object_type`')
            vals = set()
            vals.add("CoolingTower:SingleSpeed")
            vals.add("CoolingTower:TwoSpeed")
            vals.add("CoolingTower:VariableSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_tower_object_type`'.format(value))

        self._data["Cooling Tower Object Type"] = value

    @property
    def cooling_tower_name(self):
        """Get cooling_tower_name

        Returns:
            str: the value of `cooling_tower_name` or None if not set
        """
        return self._data["Cooling Tower Name"]

    @cooling_tower_name.setter
    def cooling_tower_name(self, value=None):
        """  Corresponds to IDD Field `cooling_tower_name`
        The name of the detailed cooling tower object.

        Args:
            value (str): value for IDD Field `cooling_tower_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_tower_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_tower_name`')

        self._data["Cooling Tower Name"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            float: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        If Condenser Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `priority`'.format(value))

        self._data["Priority"] = value

    @property
    def template_plant_loop_type(self):
        """Get template_plant_loop_type

        Returns:
            str: the value of `template_plant_loop_type` or None if not set
        """
        return self._data["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """  Corresponds to IDD Field `template_plant_loop_type`
        Specifies if this tower serves a template chilled water loop or mixed water loop
        If left blank, will serve a chilled water loop if present, or a mixed water loop (if
        no chilled water loop is present).

        Args:
            value (str): value for IDD Field `template_plant_loop_type`
                Accepted values are:
                      - ChilledWater
                      - MixedWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_plant_loop_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_plant_loop_type`')
            vals = set()
            vals.add("ChilledWater")
            vals.add("MixedWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `template_plant_loop_type`'.format(value))

        self._data["Template Plant Loop Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.cooling_tower_object_type))
        out.append(self._to_str(self.cooling_tower_name))
        out.append(self._to_str(self.priority))
        out.append(self._to_str(self.template_plant_loop_type))
        return ",".join(out)

class HvactemplatePlantHotWaterLoop(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:HotWaterLoop`
        Plant loop to serve all HVACTemplate
        hot water coils and boilers.
    
    """
    internal_name = "HVACTemplate:Plant:HotWaterLoop"
    field_count = 21
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:HotWaterLoop`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Pump Schedule Name"] = None
        self._data["Pump Control Type"] = None
        self._data["Hot Water Plant Operation Scheme Type"] = None
        self._data["Hot Water Plant Equipment Operation Schemes Name"] = None
        self._data["Hot Water Setpoint Schedule Name"] = None
        self._data["Hot Water Design Setpoint"] = None
        self._data["Hot Water Pump Configuration"] = None
        self._data["Hot Water Pump Rated Head"] = None
        self._data["Hot Water Setpoint Reset Type"] = None
        self._data["Hot Water Setpoint at Outdoor Dry-Bulb Low"] = None
        self._data["Hot Water Reset Outdoor Dry-Bulb Low"] = None
        self._data["Hot Water Setpoint at Outdoor Dry-Bulb High"] = None
        self._data["Hot Water Reset Outdoor Dry-Bulb High"] = None
        self._data["Hot Water Pump Type"] = None
        self._data["Supply Side Bypass Pipe"] = None
        self._data["Demand Side Bypass Pipe"] = None
        self._data["Fluid Type"] = None
        self._data["Loop Design Delta Temperature"] = None
        self._data["Maximum Outdoor Dry Bulb Temperature"] = None
        self._data["Load Distribution Scheme"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_schedule_name = None
        else:
            self.pump_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_control_type = None
        else:
            self.pump_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_plant_operation_scheme_type = None
        else:
            self.hot_water_plant_operation_scheme_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_plant_equipment_operation_schemes_name = None
        else:
            self.hot_water_plant_equipment_operation_schemes_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_setpoint_schedule_name = None
        else:
            self.hot_water_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_design_setpoint = None
        else:
            self.hot_water_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_pump_configuration = None
        else:
            self.hot_water_pump_configuration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_pump_rated_head = None
        else:
            self.hot_water_pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_setpoint_reset_type = None
        else:
            self.hot_water_setpoint_reset_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_setpoint_at_outdoor_drybulb_low = None
        else:
            self.hot_water_setpoint_at_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_reset_outdoor_drybulb_low = None
        else:
            self.hot_water_reset_outdoor_drybulb_low = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_setpoint_at_outdoor_drybulb_high = None
        else:
            self.hot_water_setpoint_at_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_reset_outdoor_drybulb_high = None
        else:
            self.hot_water_reset_outdoor_drybulb_high = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_pump_type = None
        else:
            self.hot_water_pump_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_side_bypass_pipe = None
        else:
            self.supply_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_bypass_pipe = None
        else:
            self.demand_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loop_design_delta_temperature = None
        else:
            self.loop_design_delta_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_dry_bulb_temperature = None
        else:
            self.maximum_outdoor_dry_bulb_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_distribution_scheme = None
        else:
            self.load_distribution_scheme = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def pump_schedule_name(self):
        """Get pump_schedule_name

        Returns:
            str: the value of `pump_schedule_name` or None if not set
        """
        return self._data["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pump_schedule_name`
        If blank, always available

        Args:
            value (str): value for IDD Field `pump_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_schedule_name`')

        self._data["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """Get pump_control_type

        Returns:
            str: the value of `pump_control_type` or None if not set
        """
        return self._data["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """  Corresponds to IDD Field `pump_control_type`

        Args:
            value (str): value for IDD Field `pump_control_type`
                Accepted values are:
                      - Intermittent
                      - Continuous
                Default value: Intermittent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_control_type`')
            vals = set()
            vals.add("Intermittent")
            vals.add("Continuous")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pump_control_type`'.format(value))

        self._data["Pump Control Type"] = value

    @property
    def hot_water_plant_operation_scheme_type(self):
        """Get hot_water_plant_operation_scheme_type

        Returns:
            str: the value of `hot_water_plant_operation_scheme_type` or None if not set
        """
        return self._data["Hot Water Plant Operation Scheme Type"]

    @hot_water_plant_operation_scheme_type.setter
    def hot_water_plant_operation_scheme_type(self, value="Default"):
        """  Corresponds to IDD Field `hot_water_plant_operation_scheme_type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Boiler objects.

        Args:
            value (str): value for IDD Field `hot_water_plant_operation_scheme_type`
                Accepted values are:
                      - Default
                      - UserDefined
                Default value: Default
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_plant_operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_plant_operation_scheme_type`')
            vals = set()
            vals.add("Default")
            vals.add("UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_water_plant_operation_scheme_type`'.format(value))

        self._data["Hot Water Plant Operation Scheme Type"] = value

    @property
    def hot_water_plant_equipment_operation_schemes_name(self):
        """Get hot_water_plant_equipment_operation_schemes_name

        Returns:
            str: the value of `hot_water_plant_equipment_operation_schemes_name` or None if not set
        """
        return self._data["Hot Water Plant Equipment Operation Schemes Name"]

    @hot_water_plant_equipment_operation_schemes_name.setter
    def hot_water_plant_equipment_operation_schemes_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_plant_equipment_operation_schemes_name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `hot_water_plant_equipment_operation_schemes_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_plant_equipment_operation_schemes_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_plant_equipment_operation_schemes_name`')

        self._data["Hot Water Plant Equipment Operation Schemes Name"] = value

    @property
    def hot_water_setpoint_schedule_name(self):
        """Get hot_water_setpoint_schedule_name

        Returns:
            str: the value of `hot_water_setpoint_schedule_name` or None if not set
        """
        return self._data["Hot Water Setpoint Schedule Name"]

    @hot_water_setpoint_schedule_name.setter
    def hot_water_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `hot_water_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_setpoint_schedule_name`')

        self._data["Hot Water Setpoint Schedule Name"] = value

    @property
    def hot_water_design_setpoint(self):
        """Get hot_water_design_setpoint

        Returns:
            float: the value of `hot_water_design_setpoint` or None if not set
        """
        return self._data["Hot Water Design Setpoint"]

    @hot_water_design_setpoint.setter
    def hot_water_design_setpoint(self, value=82.0 ):
        """  Corresponds to IDD Field `hot_water_design_setpoint`
        Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `hot_water_design_setpoint`
                Units: C
                Default value: 82.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_design_setpoint`'.format(value))

        self._data["Hot Water Design Setpoint"] = value

    @property
    def hot_water_pump_configuration(self):
        """Get hot_water_pump_configuration

        Returns:
            str: the value of `hot_water_pump_configuration` or None if not set
        """
        return self._data["Hot Water Pump Configuration"]

    @hot_water_pump_configuration.setter
    def hot_water_pump_configuration(self, value="ConstantFlow"):
        """  Corresponds to IDD Field `hot_water_pump_configuration`
        VariableFlow - variable flow to boilers and coils, excess bypassed
        ConstantFlow - constant flow to boilers and coils, excess bypassed

        Args:
            value (str): value for IDD Field `hot_water_pump_configuration`
                Accepted values are:
                      - VariableFlow
                      - ConstantFlow
                Default value: ConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_pump_configuration`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_pump_configuration`')
            vals = set()
            vals.add("VariableFlow")
            vals.add("ConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_water_pump_configuration`'.format(value))

        self._data["Hot Water Pump Configuration"] = value

    @property
    def hot_water_pump_rated_head(self):
        """Get hot_water_pump_rated_head

        Returns:
            float: the value of `hot_water_pump_rated_head` or None if not set
        """
        return self._data["Hot Water Pump Rated Head"]

    @hot_water_pump_rated_head.setter
    def hot_water_pump_rated_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `hot_water_pump_rated_head`
        Default head is 60 feet H2O

        Args:
            value (float): value for IDD Field `hot_water_pump_rated_head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_pump_rated_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hot_water_pump_rated_head`')

        self._data["Hot Water Pump Rated Head"] = value

    @property
    def hot_water_setpoint_reset_type(self):
        """Get hot_water_setpoint_reset_type

        Returns:
            str: the value of `hot_water_setpoint_reset_type` or None if not set
        """
        return self._data["Hot Water Setpoint Reset Type"]

    @hot_water_setpoint_reset_type.setter
    def hot_water_setpoint_reset_type(self, value="None"):
        """  Corresponds to IDD Field `hot_water_setpoint_reset_type`
        Overrides Hot Water Setpoint Schedule Name

        Args:
            value (str): value for IDD Field `hot_water_setpoint_reset_type`
                Accepted values are:
                      - None
                      - OutdoorAirTemperatureReset
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_setpoint_reset_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_setpoint_reset_type`')
            vals = set()
            vals.add("None")
            vals.add("OutdoorAirTemperatureReset")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_water_setpoint_reset_type`'.format(value))

        self._data["Hot Water Setpoint Reset Type"] = value

    @property
    def hot_water_setpoint_at_outdoor_drybulb_low(self):
        """Get hot_water_setpoint_at_outdoor_drybulb_low

        Returns:
            float: the value of `hot_water_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self._data["Hot Water Setpoint at Outdoor Dry-Bulb Low"]

    @hot_water_setpoint_at_outdoor_drybulb_low.setter
    def hot_water_setpoint_at_outdoor_drybulb_low(self, value=82.2 ):
        """  Corresponds to IDD Field `hot_water_setpoint_at_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `hot_water_setpoint_at_outdoor_drybulb_low`
                Units: C
                Default value: 82.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_setpoint_at_outdoor_drybulb_low`'.format(value))

        self._data["Hot Water Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def hot_water_reset_outdoor_drybulb_low(self):
        """Get hot_water_reset_outdoor_drybulb_low

        Returns:
            float: the value of `hot_water_reset_outdoor_drybulb_low` or None if not set
        """
        return self._data["Hot Water Reset Outdoor Dry-Bulb Low"]

    @hot_water_reset_outdoor_drybulb_low.setter
    def hot_water_reset_outdoor_drybulb_low(self, value=-6.7 ):
        """  Corresponds to IDD Field `hot_water_reset_outdoor_drybulb_low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `hot_water_reset_outdoor_drybulb_low`
                Units: C
                Default value: -6.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_reset_outdoor_drybulb_low`'.format(value))

        self._data["Hot Water Reset Outdoor Dry-Bulb Low"] = value

    @property
    def hot_water_setpoint_at_outdoor_drybulb_high(self):
        """Get hot_water_setpoint_at_outdoor_drybulb_high

        Returns:
            float: the value of `hot_water_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self._data["Hot Water Setpoint at Outdoor Dry-Bulb High"]

    @hot_water_setpoint_at_outdoor_drybulb_high.setter
    def hot_water_setpoint_at_outdoor_drybulb_high(self, value=65.6 ):
        """  Corresponds to IDD Field `hot_water_setpoint_at_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `hot_water_setpoint_at_outdoor_drybulb_high`
                Units: C
                Default value: 65.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_setpoint_at_outdoor_drybulb_high`'.format(value))

        self._data["Hot Water Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def hot_water_reset_outdoor_drybulb_high(self):
        """Get hot_water_reset_outdoor_drybulb_high

        Returns:
            float: the value of `hot_water_reset_outdoor_drybulb_high` or None if not set
        """
        return self._data["Hot Water Reset Outdoor Dry-Bulb High"]

    @hot_water_reset_outdoor_drybulb_high.setter
    def hot_water_reset_outdoor_drybulb_high(self, value=10.0 ):
        """  Corresponds to IDD Field `hot_water_reset_outdoor_drybulb_high`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `hot_water_reset_outdoor_drybulb_high`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hot_water_reset_outdoor_drybulb_high`'.format(value))

        self._data["Hot Water Reset Outdoor Dry-Bulb High"] = value

    @property
    def hot_water_pump_type(self):
        """Get hot_water_pump_type

        Returns:
            str: the value of `hot_water_pump_type` or None if not set
        """
        return self._data["Hot Water Pump Type"]

    @hot_water_pump_type.setter
    def hot_water_pump_type(self, value="SinglePump"):
        """  Corresponds to IDD Field `hot_water_pump_type`
        Describes the type of pump configuration used for the hot water loop.

        Args:
            value (str): value for IDD Field `hot_water_pump_type`
                Accepted values are:
                      - SinglePump
                      - PumpPerBoiler
                      - TwoHeaderedPumps
                      - ThreeHeaderedPumps
                      - FourHeaderedPumps
                      - FiveHeaderedPumps
                Default value: SinglePump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_pump_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_pump_type`')
            vals = set()
            vals.add("SinglePump")
            vals.add("PumpPerBoiler")
            vals.add("TwoHeaderedPumps")
            vals.add("ThreeHeaderedPumps")
            vals.add("FourHeaderedPumps")
            vals.add("FiveHeaderedPumps")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hot_water_pump_type`'.format(value))

        self._data["Hot Water Pump Type"] = value

    @property
    def supply_side_bypass_pipe(self):
        """Get supply_side_bypass_pipe

        Returns:
            str: the value of `supply_side_bypass_pipe` or None if not set
        """
        return self._data["Supply Side Bypass Pipe"]

    @supply_side_bypass_pipe.setter
    def supply_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `supply_side_bypass_pipe`
        Determines if a supply side bypass pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `supply_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_side_bypass_pipe`'.format(value))

        self._data["Supply Side Bypass Pipe"] = value

    @property
    def demand_side_bypass_pipe(self):
        """Get demand_side_bypass_pipe

        Returns:
            str: the value of `demand_side_bypass_pipe` or None if not set
        """
        return self._data["Demand Side Bypass Pipe"]

    @demand_side_bypass_pipe.setter
    def demand_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `demand_side_bypass_pipe`
        Determines if a demand side bypass pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `demand_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_side_bypass_pipe`'.format(value))

        self._data["Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Water
                      - EthyleneGlycol30
                      - EthyleneGlycol40
                      - EthyleneGlycol50
                      - EthyleneGlycol60
                      - PropyleneGlycol30
                      - PropyleneGlycol40
                      - PropyleneGlycol50
                      - PropyleneGlycol60
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Water")
            vals.add("EthyleneGlycol30")
            vals.add("EthyleneGlycol40")
            vals.add("EthyleneGlycol50")
            vals.add("EthyleneGlycol60")
            vals.add("PropyleneGlycol30")
            vals.add("PropyleneGlycol40")
            vals.add("PropyleneGlycol50")
            vals.add("PropyleneGlycol60")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """Get loop_design_delta_temperature

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set
        """
        return self._data["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=11.0 ):
        """  Corresponds to IDD Field `loop_design_delta_temperature`
        The temperature difference used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `loop_design_delta_temperature`
                Units: deltaC
                Default value: 11.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `loop_design_delta_temperature`'.format(value))

        self._data["Loop Design Delta Temperature"] = value

    @property
    def maximum_outdoor_dry_bulb_temperature(self):
        """Get maximum_outdoor_dry_bulb_temperature

        Returns:
            float: the value of `maximum_outdoor_dry_bulb_temperature` or None if not set
        """
        return self._data["Maximum Outdoor Dry Bulb Temperature"]

    @maximum_outdoor_dry_bulb_temperature.setter
    def maximum_outdoor_dry_bulb_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_dry_bulb_temperature`
        The maximum outdoor dry bulb temperature that the hot water loops operate.
        Leave blank for no limit.

        Args:
            value (float): value for IDD Field `maximum_outdoor_dry_bulb_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_dry_bulb_temperature`'.format(value))

        self._data["Maximum Outdoor Dry Bulb Temperature"] = value

    @property
    def load_distribution_scheme(self):
        """Get load_distribution_scheme

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self._data["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `load_distribution_scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                      - Sequential
                      - Uniform
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            vals.add("Sequential")
            vals.add("Uniform")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `load_distribution_scheme`'.format(value))

        self._data["Load Distribution Scheme"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.pump_schedule_name))
        out.append(self._to_str(self.pump_control_type))
        out.append(self._to_str(self.hot_water_plant_operation_scheme_type))
        out.append(self._to_str(self.hot_water_plant_equipment_operation_schemes_name))
        out.append(self._to_str(self.hot_water_setpoint_schedule_name))
        out.append(self._to_str(self.hot_water_design_setpoint))
        out.append(self._to_str(self.hot_water_pump_configuration))
        out.append(self._to_str(self.hot_water_pump_rated_head))
        out.append(self._to_str(self.hot_water_setpoint_reset_type))
        out.append(self._to_str(self.hot_water_setpoint_at_outdoor_drybulb_low))
        out.append(self._to_str(self.hot_water_reset_outdoor_drybulb_low))
        out.append(self._to_str(self.hot_water_setpoint_at_outdoor_drybulb_high))
        out.append(self._to_str(self.hot_water_reset_outdoor_drybulb_high))
        out.append(self._to_str(self.hot_water_pump_type))
        out.append(self._to_str(self.supply_side_bypass_pipe))
        out.append(self._to_str(self.demand_side_bypass_pipe))
        out.append(self._to_str(self.fluid_type))
        out.append(self._to_str(self.loop_design_delta_temperature))
        out.append(self._to_str(self.maximum_outdoor_dry_bulb_temperature))
        out.append(self._to_str(self.load_distribution_scheme))
        return ",".join(out)

class HvactemplatePlantBoiler(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Boiler`
        This object adds a boiler to an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop.
    
    """
    internal_name = "HVACTemplate:Plant:Boiler"
    field_count = 12
    required_fields = ["Name", "Boiler Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Boiler`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Boiler Type"] = None
        self._data["Capacity"] = None
        self._data["Efficiency"] = None
        self._data["Fuel Type"] = None
        self._data["Priority"] = None
        self._data["Sizing Factor"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Water Outlet Upper Temperature Limit"] = None
        self._data["Template Plant Loop Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_type = None
        else:
            self.boiler_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity = None
        else:
            self.capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_outlet_upper_temperature_limit = None
        else:
            self.water_outlet_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_plant_loop_type = None
        else:
            self.template_plant_loop_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def boiler_type(self):
        """Get boiler_type

        Returns:
            str: the value of `boiler_type` or None if not set
        """
        return self._data["Boiler Type"]

    @boiler_type.setter
    def boiler_type(self, value=None):
        """  Corresponds to IDD Field `boiler_type`

        Args:
            value (str): value for IDD Field `boiler_type`
                Accepted values are:
                      - DistrictHotWater
                      - HotWaterBoiler
                      - CondensingHotWaterBoiler
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_type`')
            vals = set()
            vals.add("DistrictHotWater")
            vals.add("HotWaterBoiler")
            vals.add("CondensingHotWaterBoiler")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `boiler_type`'.format(value))

        self._data["Boiler Type"] = value

    @property
    def capacity(self):
        """Get capacity

        Returns:
            float: the value of `capacity` or None if not set
        """
        return self._data["Capacity"]

    @capacity.setter
    def capacity(self, value=None):
        """  Corresponds to IDD Field `capacity`

        Args:
            value (float): value for IDD Field `capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `capacity`')

        self._data["Capacity"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `efficiency`
        Not applicable  if Boiler Type is DistrictHotWater

        Args:
            value (float): value for IDD Field `efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')

        self._data["Efficiency"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`
        Not applicable  if Boiler Type is DistrictHotWater

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            str: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        If Hot Water Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:HotWaterLoop, then equipment
        operates in priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `priority`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `priority`')

        self._data["Priority"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.1 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.1
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def water_outlet_upper_temperature_limit(self):
        """Get water_outlet_upper_temperature_limit

        Returns:
            float: the value of `water_outlet_upper_temperature_limit` or None if not set
        """
        return self._data["Water Outlet Upper Temperature Limit"]

    @water_outlet_upper_temperature_limit.setter
    def water_outlet_upper_temperature_limit(self, value=100.0 ):
        """  Corresponds to IDD Field `water_outlet_upper_temperature_limit`

        Args:
            value (float): value for IDD Field `water_outlet_upper_temperature_limit`
                Units: C
                Default value: 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_outlet_upper_temperature_limit`'.format(value))

        self._data["Water Outlet Upper Temperature Limit"] = value

    @property
    def template_plant_loop_type(self):
        """Get template_plant_loop_type

        Returns:
            str: the value of `template_plant_loop_type` or None if not set
        """
        return self._data["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """  Corresponds to IDD Field `template_plant_loop_type`
        Specifies if this boiler serves a template hot water loop or mixed water loop
        If left blank, will serve a hot water loop if present, or a mixed water loop (if
        no hot water loop is present).

        Args:
            value (str): value for IDD Field `template_plant_loop_type`
                Accepted values are:
                      - HotWater
                      - MixedWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_plant_loop_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_plant_loop_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("MixedWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `template_plant_loop_type`'.format(value))

        self._data["Template Plant Loop Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.boiler_type))
        out.append(self._to_str(self.capacity))
        out.append(self._to_str(self.efficiency))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.priority))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.water_outlet_upper_temperature_limit))
        out.append(self._to_str(self.template_plant_loop_type))
        return ",".join(out)

class HvactemplatePlantBoilerObjectReference(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:Boiler:ObjectReference`
        This object references a detailed boiler object and adds it to
        an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop. The user must create a complete
        detailed boiler object with all required curve or performance objects.
    
    """
    internal_name = "HVACTemplate:Plant:Boiler:ObjectReference"
    field_count = 5
    required_fields = ["Name", "Boiler Object Type", "Boiler Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:Boiler:ObjectReference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Boiler Object Type"] = None
        self._data["Boiler Name"] = None
        self._data["Priority"] = None
        self._data["Template Plant Loop Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_object_type = None
        else:
            self.boiler_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_name = None
        else:
            self.boiler_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority = None
        else:
            self.priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.template_plant_loop_type = None
        else:
            self.template_plant_loop_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        The name of this object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def boiler_object_type(self):
        """Get boiler_object_type

        Returns:
            str: the value of `boiler_object_type` or None if not set
        """
        return self._data["Boiler Object Type"]

    @boiler_object_type.setter
    def boiler_object_type(self, value="Boiler:HotWater"):
        """  Corresponds to IDD Field `boiler_object_type`

        Args:
            value (str): value for IDD Field `boiler_object_type`
                Accepted values are:
                      - Boiler:HotWater
                Default value: Boiler:HotWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_object_type`')
            vals = set()
            vals.add("Boiler:HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `boiler_object_type`'.format(value))

        self._data["Boiler Object Type"] = value

    @property
    def boiler_name(self):
        """Get boiler_name

        Returns:
            str: the value of `boiler_name` or None if not set
        """
        return self._data["Boiler Name"]

    @boiler_name.setter
    def boiler_name(self, value=None):
        """  Corresponds to IDD Field `boiler_name`
        The name of the detailed boiler object.

        Args:
            value (str): value for IDD Field `boiler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_name`')

        self._data["Boiler Name"] = value

    @property
    def priority(self):
        """Get priority

        Returns:
            float: the value of `priority` or None if not set
        """
        return self._data["Priority"]

    @priority.setter
    def priority(self, value=None):
        """  Corresponds to IDD Field `priority`
        If Hot Water Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `priority`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `priority`'.format(value))

        self._data["Priority"] = value

    @property
    def template_plant_loop_type(self):
        """Get template_plant_loop_type

        Returns:
            str: the value of `template_plant_loop_type` or None if not set
        """
        return self._data["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """  Corresponds to IDD Field `template_plant_loop_type`
        Specifies if this boiler serves a template hot water loop or mixed water loop
        If left blank, will serve a hot water loop if present, or a mixed water loop (if
        no hot water loop is present).

        Args:
            value (str): value for IDD Field `template_plant_loop_type`
                Accepted values are:
                      - HotWater
                      - MixedWater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `template_plant_loop_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `template_plant_loop_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("MixedWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `template_plant_loop_type`'.format(value))

        self._data["Template Plant Loop Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.boiler_object_type))
        out.append(self._to_str(self.boiler_name))
        out.append(self._to_str(self.priority))
        out.append(self._to_str(self.template_plant_loop_type))
        return ",".join(out)

class HvactemplatePlantMixedWaterLoop(object):
    """ Corresponds to IDD object `HVACTemplate:Plant:MixedWaterLoop`
        Central plant loop portion of a water source heat pump system.
    
    """
    internal_name = "HVACTemplate:Plant:MixedWaterLoop"
    field_count = 17
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HVACTemplate:Plant:MixedWaterLoop`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Pump Schedule Name"] = None
        self._data["Pump Control Type"] = None
        self._data["Operation Scheme Type"] = None
        self._data["Equipment Operation Schemes Name"] = None
        self._data["High Temperature Setpoint Schedule Name"] = None
        self._data["High Temperature Design Setpoint"] = None
        self._data["Low Temperature Setpoint Schedule Name"] = None
        self._data["Low Temperature Design Setpoint"] = None
        self._data["Water Pump Configuration"] = None
        self._data["Water Pump Rated Head"] = None
        self._data["Water Pump Type"] = None
        self._data["Supply Side Bypass Pipe"] = None
        self._data["Demand Side Bypass Pipe"] = None
        self._data["Fluid Type"] = None
        self._data["Loop Design Delta Temperature"] = None
        self._data["Load Distribution Scheme"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_schedule_name = None
        else:
            self.pump_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_control_type = None
        else:
            self.pump_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_scheme_type = None
        else:
            self.operation_scheme_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_operation_schemes_name = None
        else:
            self.equipment_operation_schemes_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_temperature_setpoint_schedule_name = None
        else:
            self.high_temperature_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_temperature_design_setpoint = None
        else:
            self.high_temperature_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_temperature_setpoint_schedule_name = None
        else:
            self.low_temperature_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_temperature_design_setpoint = None
        else:
            self.low_temperature_design_setpoint = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_pump_configuration = None
        else:
            self.water_pump_configuration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_pump_rated_head = None
        else:
            self.water_pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_pump_type = None
        else:
            self.water_pump_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_side_bypass_pipe = None
        else:
            self.supply_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_bypass_pipe = None
        else:
            self.demand_side_bypass_pipe = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loop_design_delta_temperature = None
        else:
            self.loop_design_delta_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_distribution_scheme = None
        else:
            self.load_distribution_scheme = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def pump_schedule_name(self):
        """Get pump_schedule_name

        Returns:
            str: the value of `pump_schedule_name` or None if not set
        """
        return self._data["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pump_schedule_name`
        If blank, always available
        Applies to both chilled water and condenser loop pumps

        Args:
            value (str): value for IDD Field `pump_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_schedule_name`')

        self._data["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """Get pump_control_type

        Returns:
            str: the value of `pump_control_type` or None if not set
        """
        return self._data["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """  Corresponds to IDD Field `pump_control_type`
        Applies to both chilled water and condenser loop pumps

        Args:
            value (str): value for IDD Field `pump_control_type`
                Accepted values are:
                      - Intermittent
                      - Continuous
                Default value: Intermittent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_control_type`')
            vals = set()
            vals.add("Intermittent")
            vals.add("Continuous")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pump_control_type`'.format(value))

        self._data["Pump Control Type"] = value

    @property
    def operation_scheme_type(self):
        """Get operation_scheme_type

        Returns:
            str: the value of `operation_scheme_type` or None if not set
        """
        return self._data["Operation Scheme Type"]

    @operation_scheme_type.setter
    def operation_scheme_type(self, value="Default"):
        """  Corresponds to IDD Field `operation_scheme_type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:Tower objects.

        Args:
            value (str): value for IDD Field `operation_scheme_type`
                Accepted values are:
                      - Default
                      - UserDefined
                Default value: Default
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_scheme_type`')
            vals = set()
            vals.add("Default")
            vals.add("UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_scheme_type`'.format(value))

        self._data["Operation Scheme Type"] = value

    @property
    def equipment_operation_schemes_name(self):
        """Get equipment_operation_schemes_name

        Returns:
            str: the value of `equipment_operation_schemes_name` or None if not set
        """
        return self._data["Equipment Operation Schemes Name"]

    @equipment_operation_schemes_name.setter
    def equipment_operation_schemes_name(self, value=None):
        """  Corresponds to IDD Field `equipment_operation_schemes_name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `equipment_operation_schemes_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_operation_schemes_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_operation_schemes_name`')

        self._data["Equipment Operation Schemes Name"] = value

    @property
    def high_temperature_setpoint_schedule_name(self):
        """Get high_temperature_setpoint_schedule_name

        Returns:
            str: the value of `high_temperature_setpoint_schedule_name` or None if not set
        """
        return self._data["High Temperature Setpoint Schedule Name"]

    @high_temperature_setpoint_schedule_name.setter
    def high_temperature_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `high_temperature_setpoint_schedule_name`
        Leave blank if constant setpoint

        Args:
            value (str): value for IDD Field `high_temperature_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `high_temperature_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `high_temperature_setpoint_schedule_name`')

        self._data["High Temperature Setpoint Schedule Name"] = value

    @property
    def high_temperature_design_setpoint(self):
        """Get high_temperature_design_setpoint

        Returns:
            float: the value of `high_temperature_design_setpoint` or None if not set
        """
        return self._data["High Temperature Design Setpoint"]

    @high_temperature_design_setpoint.setter
    def high_temperature_design_setpoint(self, value=33.0 ):
        """  Corresponds to IDD Field `high_temperature_design_setpoint`
        Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `high_temperature_design_setpoint`
                Units: C
                Default value: 33.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_temperature_design_setpoint`'.format(value))

        self._data["High Temperature Design Setpoint"] = value

    @property
    def low_temperature_setpoint_schedule_name(self):
        """Get low_temperature_setpoint_schedule_name

        Returns:
            str: the value of `low_temperature_setpoint_schedule_name` or None if not set
        """
        return self._data["Low Temperature Setpoint Schedule Name"]

    @low_temperature_setpoint_schedule_name.setter
    def low_temperature_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `low_temperature_setpoint_schedule_name`
        Leave blank if constant setpoint
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `low_temperature_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_temperature_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_temperature_setpoint_schedule_name`')

        self._data["Low Temperature Setpoint Schedule Name"] = value

    @property
    def low_temperature_design_setpoint(self):
        """Get low_temperature_design_setpoint

        Returns:
            float: the value of `low_temperature_design_setpoint` or None if not set
        """
        return self._data["Low Temperature Design Setpoint"]

    @low_temperature_design_setpoint.setter
    def low_temperature_design_setpoint(self, value=20.0 ):
        """  Corresponds to IDD Field `low_temperature_design_setpoint`
        Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified.
        May be left blank if not serving any water cooled chillers

        Args:
            value (float): value for IDD Field `low_temperature_design_setpoint`
                Units: C
                Default value: 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_temperature_design_setpoint`'.format(value))

        self._data["Low Temperature Design Setpoint"] = value

    @property
    def water_pump_configuration(self):
        """Get water_pump_configuration

        Returns:
            str: the value of `water_pump_configuration` or None if not set
        """
        return self._data["Water Pump Configuration"]

    @water_pump_configuration.setter
    def water_pump_configuration(self, value="ConstantFlow"):
        """  Corresponds to IDD Field `water_pump_configuration`
        VariableFlow - variable flow to boilers and coils, excess bypassed
        ConstantFlow - constant flow to boilers and coils, excess bypassed

        Args:
            value (str): value for IDD Field `water_pump_configuration`
                Accepted values are:
                      - VariableFlow
                      - ConstantFlow
                Default value: ConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_pump_configuration`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_pump_configuration`')
            vals = set()
            vals.add("VariableFlow")
            vals.add("ConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_pump_configuration`'.format(value))

        self._data["Water Pump Configuration"] = value

    @property
    def water_pump_rated_head(self):
        """Get water_pump_rated_head

        Returns:
            float: the value of `water_pump_rated_head` or None if not set
        """
        return self._data["Water Pump Rated Head"]

    @water_pump_rated_head.setter
    def water_pump_rated_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `water_pump_rated_head`
        May be left blank if not serving any water cooled chillers
        default head is 60 feet H2O

        Args:
            value (float): value for IDD Field `water_pump_rated_head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_pump_rated_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `water_pump_rated_head`')

        self._data["Water Pump Rated Head"] = value

    @property
    def water_pump_type(self):
        """Get water_pump_type

        Returns:
            str: the value of `water_pump_type` or None if not set
        """
        return self._data["Water Pump Type"]

    @water_pump_type.setter
    def water_pump_type(self, value="SinglePump"):
        """  Corresponds to IDD Field `water_pump_type`
        Describes the type of pump configuration used for the mixed water loop.

        Args:
            value (str): value for IDD Field `water_pump_type`
                Accepted values are:
                      - SinglePump
                      - PumpPerTowerOrBoiler
                      - TwoHeaderedPumps
                      - ThreeHeaderedPumps
                      - FourHeaderedPumps
                      - FiveHeaderedPumps
                Default value: SinglePump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_pump_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_pump_type`')
            vals = set()
            vals.add("SinglePump")
            vals.add("PumpPerTowerOrBoiler")
            vals.add("TwoHeaderedPumps")
            vals.add("ThreeHeaderedPumps")
            vals.add("FourHeaderedPumps")
            vals.add("FiveHeaderedPumps")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_pump_type`'.format(value))

        self._data["Water Pump Type"] = value

    @property
    def supply_side_bypass_pipe(self):
        """Get supply_side_bypass_pipe

        Returns:
            str: the value of `supply_side_bypass_pipe` or None if not set
        """
        return self._data["Supply Side Bypass Pipe"]

    @supply_side_bypass_pipe.setter
    def supply_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `supply_side_bypass_pipe`
        Determines if a supply side bypass pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `supply_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_side_bypass_pipe`'.format(value))

        self._data["Supply Side Bypass Pipe"] = value

    @property
    def demand_side_bypass_pipe(self):
        """Get demand_side_bypass_pipe

        Returns:
            str: the value of `demand_side_bypass_pipe` or None if not set
        """
        return self._data["Demand Side Bypass Pipe"]

    @demand_side_bypass_pipe.setter
    def demand_side_bypass_pipe(self, value="Yes"):
        """  Corresponds to IDD Field `demand_side_bypass_pipe`
        Determines if a demand side bypass pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `demand_side_bypass_pipe`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_bypass_pipe`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_bypass_pipe`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_side_bypass_pipe`'.format(value))

        self._data["Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Water
                      - EthyleneGlycol30
                      - EthyleneGlycol40
                      - EthyleneGlycol50
                      - EthyleneGlycol60
                      - PropyleneGlycol30
                      - PropyleneGlycol40
                      - PropyleneGlycol50
                      - PropyleneGlycol60
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Water")
            vals.add("EthyleneGlycol30")
            vals.add("EthyleneGlycol40")
            vals.add("EthyleneGlycol50")
            vals.add("EthyleneGlycol60")
            vals.add("PropyleneGlycol30")
            vals.add("PropyleneGlycol40")
            vals.add("PropyleneGlycol50")
            vals.add("PropyleneGlycol60")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """Get loop_design_delta_temperature

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set
        """
        return self._data["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=5.6 ):
        """  Corresponds to IDD Field `loop_design_delta_temperature`
        The temperature difference used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `loop_design_delta_temperature`
                Units: deltaC
                Default value: 5.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `loop_design_delta_temperature`'.format(value))

        self._data["Loop Design Delta Temperature"] = value

    @property
    def load_distribution_scheme(self):
        """Get load_distribution_scheme

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self._data["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `load_distribution_scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                      - Sequential
                      - Uniform
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            vals.add("Sequential")
            vals.add("Uniform")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `load_distribution_scheme`'.format(value))

        self._data["Load Distribution Scheme"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.pump_schedule_name))
        out.append(self._to_str(self.pump_control_type))
        out.append(self._to_str(self.operation_scheme_type))
        out.append(self._to_str(self.equipment_operation_schemes_name))
        out.append(self._to_str(self.high_temperature_setpoint_schedule_name))
        out.append(self._to_str(self.high_temperature_design_setpoint))
        out.append(self._to_str(self.low_temperature_setpoint_schedule_name))
        out.append(self._to_str(self.low_temperature_design_setpoint))
        out.append(self._to_str(self.water_pump_configuration))
        out.append(self._to_str(self.water_pump_rated_head))
        out.append(self._to_str(self.water_pump_type))
        out.append(self._to_str(self.supply_side_bypass_pipe))
        out.append(self._to_str(self.demand_side_bypass_pipe))
        out.append(self._to_str(self.fluid_type))
        out.append(self._to_str(self.loop_design_delta_temperature))
        out.append(self._to_str(self.load_distribution_scheme))
        return ",".join(out)