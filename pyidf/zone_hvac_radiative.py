from collections import OrderedDict
import logging
import re

class ZoneHvacBaseboardRadiantConvectiveWater(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Water`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Water"
    field_count = 214
    required_fields = ["Name", "Inlet Node Name", "Outlet Node Name", "Heating Design Capacity Method", "Maximum Water Flow Rate", "Fraction Radiant"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:Baseboard:RadiantConvective:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Rated Average Water Temperature"] = None
        self._data["Rated Water Mass Flow Rate"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Convergence Tolerance"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_average_water_temperature = None
        else:
            self.rated_average_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_water_mass_flow_rate = None
        else:
            self.rated_water_mass_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Inlet Node Name`

        Args:
            value (str): value for IDD Field `Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inlet_node_name`')
        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Outlet Node Name`

        Args:
            value (str): value for IDD Field `Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outlet_node_name`')
        self._data["Outlet Node Name"] = value

    @property
    def rated_average_water_temperature(self):
        """Get rated_average_water_temperature

        Returns:
            float: the value of `rated_average_water_temperature` or None if not set
        """
        return self._data["Rated Average Water Temperature"]

    @rated_average_water_temperature.setter
    def rated_average_water_temperature(self, value=87.78):
        """  Corresponds to IDD Field `Rated Average Water Temperature`
        Rated average water temperature is the average of the inlet and outlet water temperatures
        at rated conditions.

        Args:
            value (float): value for IDD Field `Rated Average Water Temperature`
                Units: C
                Default value: 87.78
                value >= 20.0
                value <= 150.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_average_water_temperature`'.format(value))
            if value < 20.0:
                raise ValueError('value need to be greater or equal 20.0 '
                                 'for field `rated_average_water_temperature`')
            if value > 150.0:
                raise ValueError('value need to be smaller 150.0 '
                                 'for field `rated_average_water_temperature`')
        self._data["Rated Average Water Temperature"] = value

    @property
    def rated_water_mass_flow_rate(self):
        """Get rated_water_mass_flow_rate

        Returns:
            float: the value of `rated_water_mass_flow_rate` or None if not set
        """
        return self._data["Rated Water Mass Flow Rate"]

    @rated_water_mass_flow_rate.setter
    def rated_water_mass_flow_rate(self, value=0.063):
        """  Corresponds to IDD Field `Rated Water Mass Flow Rate`
        Standard is I=B=R Rating document where all baseboards are rated at either 0.063 kg/s (1 gpm)
        or 0.252 kg/s (4 gpm).  It is recommended that users find data for the baseboard heater that
        corresponds to performance at 0.063 kg/s unless the flow rate is expected to be above 0.252 kg/s.
        If the flow rate is expected to be above 0.252 kg/s, this field should be 0.252 kg/s.

        Args:
            value (float): value for IDD Field `Rated Water Mass Flow Rate`
                Units: Kg/s
                Default value: 0.063
                value > 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_water_mass_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_mass_flow_rate`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `rated_water_mass_flow_rate`')
        self._data["Rated Water Mass Flow Rate"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity. Required field when the heating design capacity method
        HeatingDesignCapacity. This input field is rated heating capacity. Users must multiply the
        actual finned length published in the literature to determine the rated capacity. Rated
        Capacity is for an inlet air dry-bulb temperature of 18.0C, the Rated Water Mass Flow Rate
        of 0.063kg/s or 0.252kg/s, and the Rated Average Water Temperature between 32.2C and 115.6C.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_water_flow_rate`'.format(value))
                    self._data["Maximum Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_water_flow_rate`'.format(value))
        self._data["Maximum Water Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001):
        """  Corresponds to IDD Field `Convergence Tolerance`

        Args:
            value (float): value for IDD Field `Convergence Tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')
        self._data["Convergence Tolerance"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `Fraction Radiant`

        Args:
            value (float): value for IDD Field `Fraction Radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')
        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy Incident on People`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy Incident on People`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 1`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 2`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 3`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 4`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 5`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 6`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 7`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 8`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 9`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 10`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `Surface 11 Name`

        Args:
            value (str): value for IDD Field `Surface 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_11_name`')
        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 11`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `Surface 12 Name`

        Args:
            value (str): value for IDD Field `Surface 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_12_name`')
        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 12`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `Surface 13 Name`

        Args:
            value (str): value for IDD Field `Surface 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_13_name`')
        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 13`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `Surface 14 Name`

        Args:
            value (str): value for IDD Field `Surface 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_14_name`')
        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 14`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `Surface 15 Name`

        Args:
            value (str): value for IDD Field `Surface 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_15_name`')
        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 15`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `Surface 16 Name`

        Args:
            value (str): value for IDD Field `Surface 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_16_name`')
        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 16`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `Surface 17 Name`

        Args:
            value (str): value for IDD Field `Surface 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_17_name`')
        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 17`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `Surface 18 Name`

        Args:
            value (str): value for IDD Field `Surface 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_18_name`')
        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 18`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `Surface 19 Name`

        Args:
            value (str): value for IDD Field `Surface 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_19_name`')
        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 19`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `Surface 20 Name`

        Args:
            value (str): value for IDD Field `Surface 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_20_name`')
        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 20`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `Surface 21 Name`

        Args:
            value (str): value for IDD Field `Surface 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_21_name`')
        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 21`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `Surface 22 Name`

        Args:
            value (str): value for IDD Field `Surface 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_22_name`')
        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 22`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `Surface 23 Name`

        Args:
            value (str): value for IDD Field `Surface 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_23_name`')
        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 23`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `Surface 24 Name`

        Args:
            value (str): value for IDD Field `Surface 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_24_name`')
        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 24`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `Surface 25 Name`

        Args:
            value (str): value for IDD Field `Surface 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_25_name`')
        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 25`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `Surface 26 Name`

        Args:
            value (str): value for IDD Field `Surface 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_26_name`')
        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 26`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `Surface 27 Name`

        Args:
            value (str): value for IDD Field `Surface 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_27_name`')
        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 27`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `Surface 28 Name`

        Args:
            value (str): value for IDD Field `Surface 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_28_name`')
        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 28`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `Surface 29 Name`

        Args:
            value (str): value for IDD Field `Surface 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_29_name`')
        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 29`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `Surface 30 Name`

        Args:
            value (str): value for IDD Field `Surface 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_30_name`')
        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 30`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `Surface 31 Name`

        Args:
            value (str): value for IDD Field `Surface 31 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_31_name`')
        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 31`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `Surface 32 Name`

        Args:
            value (str): value for IDD Field `Surface 32 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_32_name`')
        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 32`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `Surface 33 Name`

        Args:
            value (str): value for IDD Field `Surface 33 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_33_name`')
        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 33`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `Surface 34 Name`

        Args:
            value (str): value for IDD Field `Surface 34 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_34_name`')
        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 34`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `Surface 35 Name`

        Args:
            value (str): value for IDD Field `Surface 35 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_35_name`')
        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 35`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `Surface 36 Name`

        Args:
            value (str): value for IDD Field `Surface 36 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_36_name`')
        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 36`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `Surface 37 Name`

        Args:
            value (str): value for IDD Field `Surface 37 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_37_name`')
        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 37`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `Surface 38 Name`

        Args:
            value (str): value for IDD Field `Surface 38 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_38_name`')
        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 38`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `Surface 39 Name`

        Args:
            value (str): value for IDD Field `Surface 39 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_39_name`')
        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 39`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `Surface 40 Name`

        Args:
            value (str): value for IDD Field `Surface 40 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_40_name`')
        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 40`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `Surface 41 Name`

        Args:
            value (str): value for IDD Field `Surface 41 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_41_name`')
        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 41`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `Surface 42 Name`

        Args:
            value (str): value for IDD Field `Surface 42 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_42_name`')
        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 42`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `Surface 43 Name`

        Args:
            value (str): value for IDD Field `Surface 43 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_43_name`')
        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 43`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `Surface 44 Name`

        Args:
            value (str): value for IDD Field `Surface 44 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_44_name`')
        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 44`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `Surface 45 Name`

        Args:
            value (str): value for IDD Field `Surface 45 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_45_name`')
        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 45`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `Surface 46 Name`

        Args:
            value (str): value for IDD Field `Surface 46 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_46_name`')
        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 46`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `Surface 47 Name`

        Args:
            value (str): value for IDD Field `Surface 47 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_47_name`')
        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 47`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `Surface 48 Name`

        Args:
            value (str): value for IDD Field `Surface 48 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_48_name`')
        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 48`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `Surface 49 Name`

        Args:
            value (str): value for IDD Field `Surface 49 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_49_name`')
        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 49`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `Surface 50 Name`

        Args:
            value (str): value for IDD Field `Surface 50 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_50_name`')
        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 50`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `Surface 51 Name`

        Args:
            value (str): value for IDD Field `Surface 51 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_51_name`')
        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 51`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `Surface 52 Name`

        Args:
            value (str): value for IDD Field `Surface 52 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_52_name`')
        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 52`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `Surface 53 Name`

        Args:
            value (str): value for IDD Field `Surface 53 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_53_name`')
        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 53`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `Surface 54 Name`

        Args:
            value (str): value for IDD Field `Surface 54 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_54_name`')
        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 54`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `Surface 55 Name`

        Args:
            value (str): value for IDD Field `Surface 55 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_55_name`')
        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 55`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `Surface 56 Name`

        Args:
            value (str): value for IDD Field `Surface 56 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_56_name`')
        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 56`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `Surface 57 Name`

        Args:
            value (str): value for IDD Field `Surface 57 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_57_name`')
        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 57`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `Surface 58 Name`

        Args:
            value (str): value for IDD Field `Surface 58 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_58_name`')
        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 58`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `Surface 59 Name`

        Args:
            value (str): value for IDD Field `Surface 59 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_59_name`')
        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 59`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `Surface 60 Name`

        Args:
            value (str): value for IDD Field `Surface 60 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_60_name`')
        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 60`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `Surface 61 Name`

        Args:
            value (str): value for IDD Field `Surface 61 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_61_name`')
        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 61`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `Surface 62 Name`

        Args:
            value (str): value for IDD Field `Surface 62 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_62_name`')
        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 62`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `Surface 63 Name`

        Args:
            value (str): value for IDD Field `Surface 63 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_63_name`')
        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 63`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `Surface 64 Name`

        Args:
            value (str): value for IDD Field `Surface 64 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_64_name`')
        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 64`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `Surface 65 Name`

        Args:
            value (str): value for IDD Field `Surface 65 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_65_name`')
        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 65`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `Surface 66 Name`

        Args:
            value (str): value for IDD Field `Surface 66 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_66_name`')
        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 66`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `Surface 67 Name`

        Args:
            value (str): value for IDD Field `Surface 67 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_67_name`')
        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 67`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `Surface 68 Name`

        Args:
            value (str): value for IDD Field `Surface 68 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_68_name`')
        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 68`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `Surface 69 Name`

        Args:
            value (str): value for IDD Field `Surface 69 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_69_name`')
        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 69`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `Surface 70 Name`

        Args:
            value (str): value for IDD Field `Surface 70 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_70_name`')
        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 70`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `Surface 71 Name`

        Args:
            value (str): value for IDD Field `Surface 71 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_71_name`')
        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 71`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `Surface 72 Name`

        Args:
            value (str): value for IDD Field `Surface 72 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_72_name`')
        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 72`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `Surface 73 Name`

        Args:
            value (str): value for IDD Field `Surface 73 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_73_name`')
        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 73`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `Surface 74 Name`

        Args:
            value (str): value for IDD Field `Surface 74 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_74_name`')
        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 74`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `Surface 75 Name`

        Args:
            value (str): value for IDD Field `Surface 75 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_75_name`')
        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 75`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `Surface 76 Name`

        Args:
            value (str): value for IDD Field `Surface 76 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_76_name`')
        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 76`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `Surface 77 Name`

        Args:
            value (str): value for IDD Field `Surface 77 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_77_name`')
        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 77`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `Surface 78 Name`

        Args:
            value (str): value for IDD Field `Surface 78 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_78_name`')
        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 78`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `Surface 79 Name`

        Args:
            value (str): value for IDD Field `Surface 79 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_79_name`')
        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 79`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `Surface 80 Name`

        Args:
            value (str): value for IDD Field `Surface 80 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_80_name`')
        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 80`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `Surface 81 Name`

        Args:
            value (str): value for IDD Field `Surface 81 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_81_name`')
        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 81`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `Surface 82 Name`

        Args:
            value (str): value for IDD Field `Surface 82 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_82_name`')
        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 82`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `Surface 83 Name`

        Args:
            value (str): value for IDD Field `Surface 83 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_83_name`')
        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 83`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `Surface 84 Name`

        Args:
            value (str): value for IDD Field `Surface 84 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_84_name`')
        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 84`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `Surface 85 Name`

        Args:
            value (str): value for IDD Field `Surface 85 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_85_name`')
        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 85`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `Surface 86 Name`

        Args:
            value (str): value for IDD Field `Surface 86 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_86_name`')
        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 86`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `Surface 87 Name`

        Args:
            value (str): value for IDD Field `Surface 87 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_87_name`')
        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 87`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `Surface 88 Name`

        Args:
            value (str): value for IDD Field `Surface 88 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_88_name`')
        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 88`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `Surface 89 Name`

        Args:
            value (str): value for IDD Field `Surface 89 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_89_name`')
        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 89`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `Surface 90 Name`

        Args:
            value (str): value for IDD Field `Surface 90 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_90_name`')
        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 90`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `Surface 91 Name`

        Args:
            value (str): value for IDD Field `Surface 91 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_91_name`')
        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 91`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `Surface 92 Name`

        Args:
            value (str): value for IDD Field `Surface 92 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_92_name`')
        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 92`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `Surface 93 Name`

        Args:
            value (str): value for IDD Field `Surface 93 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_93_name`')
        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 93`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `Surface 94 Name`

        Args:
            value (str): value for IDD Field `Surface 94 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_94_name`')
        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 94`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `Surface 95 Name`

        Args:
            value (str): value for IDD Field `Surface 95 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_95_name`')
        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 95`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `Surface 96 Name`

        Args:
            value (str): value for IDD Field `Surface 96 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_96_name`')
        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 96`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `Surface 97 Name`

        Args:
            value (str): value for IDD Field `Surface 97 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_97_name`')
        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 97`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `Surface 98 Name`

        Args:
            value (str): value for IDD Field `Surface 98 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_98_name`')
        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 98`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `Surface 99 Name`

        Args:
            value (str): value for IDD Field `Surface 99 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_99_name`')
        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 99`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `Surface 100 Name`

        Args:
            value (str): value for IDD Field `Surface 100 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_100_name`')
        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 100`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
        self._data["Fraction of Radiant Energy to Surface 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacBaseboardRadiantConvectiveSteam(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Steam`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
    field_count = 213
    required_fields = ["Name", "Inlet Node Name", "Outlet Node Name", "Heating Design Capacity Method", "Maximum Steam Flow Rate", "Fraction Radiant"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:Baseboard:RadiantConvective:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Degree of SubCooling"] = None
        self._data["Maximum Steam Flow Rate"] = None
        self._data["Convergence Tolerance"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_subcooling = None
        else:
            self.degree_of_subcooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_steam_flow_rate = None
        else:
            self.maximum_steam_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Inlet Node Name`

        Args:
            value (str): value for IDD Field `Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inlet_node_name`')
        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Outlet Node Name`

        Args:
            value (str): value for IDD Field `Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outlet_node_name`')
        self._data["Outlet Node Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def degree_of_subcooling(self):
        """Get degree_of_subcooling

        Returns:
            float: the value of `degree_of_subcooling` or None if not set
        """
        return self._data["Degree of SubCooling"]

    @degree_of_subcooling.setter
    def degree_of_subcooling(self, value=5.0):
        """  Corresponds to IDD Field `Degree of SubCooling`

        Args:
            value (float): value for IDD Field `Degree of SubCooling`
                Units: deltaC
                Default value: 5.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `degree_of_subcooling`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `degree_of_subcooling`')
        self._data["Degree of SubCooling"] = value

    @property
    def maximum_steam_flow_rate(self):
        """Get maximum_steam_flow_rate

        Returns:
            float: the value of `maximum_steam_flow_rate` or None if not set
        """
        return self._data["Maximum Steam Flow Rate"]

    @maximum_steam_flow_rate.setter
    def maximum_steam_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Steam Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Steam Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Steam Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_steam_flow_rate`'.format(value))
                    self._data["Maximum Steam Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_steam_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_steam_flow_rate`')
        self._data["Maximum Steam Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001):
        """  Corresponds to IDD Field `Convergence Tolerance`

        Args:
            value (float): value for IDD Field `Convergence Tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')
        self._data["Convergence Tolerance"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `Fraction Radiant`

        Args:
            value (float): value for IDD Field `Fraction Radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')
        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy Incident on People`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy Incident on People`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 1`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 2`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 3`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 4`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 5`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 6`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 7`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 8`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 9`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 10`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `Surface 11 Name`

        Args:
            value (str): value for IDD Field `Surface 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_11_name`')
        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 11`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `Surface 12 Name`

        Args:
            value (str): value for IDD Field `Surface 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_12_name`')
        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 12`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `Surface 13 Name`

        Args:
            value (str): value for IDD Field `Surface 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_13_name`')
        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 13`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `Surface 14 Name`

        Args:
            value (str): value for IDD Field `Surface 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_14_name`')
        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 14`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `Surface 15 Name`

        Args:
            value (str): value for IDD Field `Surface 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_15_name`')
        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 15`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `Surface 16 Name`

        Args:
            value (str): value for IDD Field `Surface 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_16_name`')
        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 16`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `Surface 17 Name`

        Args:
            value (str): value for IDD Field `Surface 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_17_name`')
        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 17`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `Surface 18 Name`

        Args:
            value (str): value for IDD Field `Surface 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_18_name`')
        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 18`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `Surface 19 Name`

        Args:
            value (str): value for IDD Field `Surface 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_19_name`')
        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 19`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `Surface 20 Name`

        Args:
            value (str): value for IDD Field `Surface 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_20_name`')
        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 20`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `Surface 21 Name`

        Args:
            value (str): value for IDD Field `Surface 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_21_name`')
        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 21`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `Surface 22 Name`

        Args:
            value (str): value for IDD Field `Surface 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_22_name`')
        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 22`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `Surface 23 Name`

        Args:
            value (str): value for IDD Field `Surface 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_23_name`')
        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 23`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `Surface 24 Name`

        Args:
            value (str): value for IDD Field `Surface 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_24_name`')
        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 24`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `Surface 25 Name`

        Args:
            value (str): value for IDD Field `Surface 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_25_name`')
        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 25`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `Surface 26 Name`

        Args:
            value (str): value for IDD Field `Surface 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_26_name`')
        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 26`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `Surface 27 Name`

        Args:
            value (str): value for IDD Field `Surface 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_27_name`')
        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 27`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `Surface 28 Name`

        Args:
            value (str): value for IDD Field `Surface 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_28_name`')
        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 28`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `Surface 29 Name`

        Args:
            value (str): value for IDD Field `Surface 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_29_name`')
        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 29`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `Surface 30 Name`

        Args:
            value (str): value for IDD Field `Surface 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_30_name`')
        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 30`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `Surface 31 Name`

        Args:
            value (str): value for IDD Field `Surface 31 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_31_name`')
        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 31`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `Surface 32 Name`

        Args:
            value (str): value for IDD Field `Surface 32 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_32_name`')
        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 32`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `Surface 33 Name`

        Args:
            value (str): value for IDD Field `Surface 33 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_33_name`')
        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 33`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `Surface 34 Name`

        Args:
            value (str): value for IDD Field `Surface 34 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_34_name`')
        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 34`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `Surface 35 Name`

        Args:
            value (str): value for IDD Field `Surface 35 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_35_name`')
        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 35`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `Surface 36 Name`

        Args:
            value (str): value for IDD Field `Surface 36 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_36_name`')
        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 36`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `Surface 37 Name`

        Args:
            value (str): value for IDD Field `Surface 37 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_37_name`')
        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 37`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `Surface 38 Name`

        Args:
            value (str): value for IDD Field `Surface 38 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_38_name`')
        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 38`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `Surface 39 Name`

        Args:
            value (str): value for IDD Field `Surface 39 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_39_name`')
        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 39`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `Surface 40 Name`

        Args:
            value (str): value for IDD Field `Surface 40 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_40_name`')
        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 40`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `Surface 41 Name`

        Args:
            value (str): value for IDD Field `Surface 41 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_41_name`')
        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 41`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `Surface 42 Name`

        Args:
            value (str): value for IDD Field `Surface 42 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_42_name`')
        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 42`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `Surface 43 Name`

        Args:
            value (str): value for IDD Field `Surface 43 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_43_name`')
        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 43`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `Surface 44 Name`

        Args:
            value (str): value for IDD Field `Surface 44 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_44_name`')
        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 44`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `Surface 45 Name`

        Args:
            value (str): value for IDD Field `Surface 45 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_45_name`')
        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 45`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `Surface 46 Name`

        Args:
            value (str): value for IDD Field `Surface 46 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_46_name`')
        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 46`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `Surface 47 Name`

        Args:
            value (str): value for IDD Field `Surface 47 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_47_name`')
        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 47`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `Surface 48 Name`

        Args:
            value (str): value for IDD Field `Surface 48 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_48_name`')
        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 48`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `Surface 49 Name`

        Args:
            value (str): value for IDD Field `Surface 49 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_49_name`')
        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 49`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `Surface 50 Name`

        Args:
            value (str): value for IDD Field `Surface 50 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_50_name`')
        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 50`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `Surface 51 Name`

        Args:
            value (str): value for IDD Field `Surface 51 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_51_name`')
        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 51`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `Surface 52 Name`

        Args:
            value (str): value for IDD Field `Surface 52 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_52_name`')
        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 52`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `Surface 53 Name`

        Args:
            value (str): value for IDD Field `Surface 53 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_53_name`')
        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 53`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `Surface 54 Name`

        Args:
            value (str): value for IDD Field `Surface 54 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_54_name`')
        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 54`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `Surface 55 Name`

        Args:
            value (str): value for IDD Field `Surface 55 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_55_name`')
        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 55`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `Surface 56 Name`

        Args:
            value (str): value for IDD Field `Surface 56 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_56_name`')
        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 56`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `Surface 57 Name`

        Args:
            value (str): value for IDD Field `Surface 57 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_57_name`')
        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 57`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `Surface 58 Name`

        Args:
            value (str): value for IDD Field `Surface 58 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_58_name`')
        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 58`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `Surface 59 Name`

        Args:
            value (str): value for IDD Field `Surface 59 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_59_name`')
        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 59`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `Surface 60 Name`

        Args:
            value (str): value for IDD Field `Surface 60 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_60_name`')
        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 60`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `Surface 61 Name`

        Args:
            value (str): value for IDD Field `Surface 61 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_61_name`')
        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 61`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `Surface 62 Name`

        Args:
            value (str): value for IDD Field `Surface 62 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_62_name`')
        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 62`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `Surface 63 Name`

        Args:
            value (str): value for IDD Field `Surface 63 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_63_name`')
        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 63`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `Surface 64 Name`

        Args:
            value (str): value for IDD Field `Surface 64 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_64_name`')
        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 64`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `Surface 65 Name`

        Args:
            value (str): value for IDD Field `Surface 65 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_65_name`')
        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 65`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `Surface 66 Name`

        Args:
            value (str): value for IDD Field `Surface 66 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_66_name`')
        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 66`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `Surface 67 Name`

        Args:
            value (str): value for IDD Field `Surface 67 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_67_name`')
        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 67`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `Surface 68 Name`

        Args:
            value (str): value for IDD Field `Surface 68 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_68_name`')
        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 68`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `Surface 69 Name`

        Args:
            value (str): value for IDD Field `Surface 69 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_69_name`')
        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 69`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `Surface 70 Name`

        Args:
            value (str): value for IDD Field `Surface 70 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_70_name`')
        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 70`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `Surface 71 Name`

        Args:
            value (str): value for IDD Field `Surface 71 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_71_name`')
        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 71`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `Surface 72 Name`

        Args:
            value (str): value for IDD Field `Surface 72 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_72_name`')
        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 72`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `Surface 73 Name`

        Args:
            value (str): value for IDD Field `Surface 73 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_73_name`')
        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 73`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `Surface 74 Name`

        Args:
            value (str): value for IDD Field `Surface 74 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_74_name`')
        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 74`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `Surface 75 Name`

        Args:
            value (str): value for IDD Field `Surface 75 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_75_name`')
        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 75`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `Surface 76 Name`

        Args:
            value (str): value for IDD Field `Surface 76 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_76_name`')
        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 76`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `Surface 77 Name`

        Args:
            value (str): value for IDD Field `Surface 77 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_77_name`')
        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 77`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `Surface 78 Name`

        Args:
            value (str): value for IDD Field `Surface 78 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_78_name`')
        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 78`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `Surface 79 Name`

        Args:
            value (str): value for IDD Field `Surface 79 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_79_name`')
        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 79`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `Surface 80 Name`

        Args:
            value (str): value for IDD Field `Surface 80 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_80_name`')
        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 80`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `Surface 81 Name`

        Args:
            value (str): value for IDD Field `Surface 81 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_81_name`')
        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 81`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `Surface 82 Name`

        Args:
            value (str): value for IDD Field `Surface 82 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_82_name`')
        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 82`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `Surface 83 Name`

        Args:
            value (str): value for IDD Field `Surface 83 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_83_name`')
        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 83`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `Surface 84 Name`

        Args:
            value (str): value for IDD Field `Surface 84 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_84_name`')
        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 84`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `Surface 85 Name`

        Args:
            value (str): value for IDD Field `Surface 85 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_85_name`')
        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 85`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `Surface 86 Name`

        Args:
            value (str): value for IDD Field `Surface 86 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_86_name`')
        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 86`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `Surface 87 Name`

        Args:
            value (str): value for IDD Field `Surface 87 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_87_name`')
        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 87`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `Surface 88 Name`

        Args:
            value (str): value for IDD Field `Surface 88 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_88_name`')
        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 88`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `Surface 89 Name`

        Args:
            value (str): value for IDD Field `Surface 89 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_89_name`')
        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 89`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `Surface 90 Name`

        Args:
            value (str): value for IDD Field `Surface 90 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_90_name`')
        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 90`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `Surface 91 Name`

        Args:
            value (str): value for IDD Field `Surface 91 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_91_name`')
        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 91`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `Surface 92 Name`

        Args:
            value (str): value for IDD Field `Surface 92 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_92_name`')
        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 92`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `Surface 93 Name`

        Args:
            value (str): value for IDD Field `Surface 93 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_93_name`')
        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 93`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `Surface 94 Name`

        Args:
            value (str): value for IDD Field `Surface 94 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_94_name`')
        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 94`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `Surface 95 Name`

        Args:
            value (str): value for IDD Field `Surface 95 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_95_name`')
        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 95`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `Surface 96 Name`

        Args:
            value (str): value for IDD Field `Surface 96 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_96_name`')
        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 96`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `Surface 97 Name`

        Args:
            value (str): value for IDD Field `Surface 97 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_97_name`')
        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 97`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `Surface 98 Name`

        Args:
            value (str): value for IDD Field `Surface 98 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_98_name`')
        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 98`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `Surface 99 Name`

        Args:
            value (str): value for IDD Field `Surface 99 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_99_name`')
        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 99`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `Surface 100 Name`

        Args:
            value (str): value for IDD Field `Surface 100 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_100_name`')
        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 100`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
        self._data["Fraction of Radiant Energy to Surface 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacBaseboardRadiantConvectiveElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Electric`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
    field_count = 209
    required_fields = ["Name", "Heating Design Capacity Method", "Efficiency", "Fraction Radiant"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:Baseboard:RadiantConvective:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Efficiency"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0):
        """  Corresponds to IDD Field `Efficiency`

        Args:
            value (float): value for IDD Field `Efficiency`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')
        self._data["Efficiency"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `Fraction Radiant`

        Args:
            value (float): value for IDD Field `Fraction Radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')
        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy Incident on People`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy Incident on People`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 1`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 2`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 3`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 4`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 5`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 6`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 7`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 8`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 9`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 10`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `Surface 11 Name`

        Args:
            value (str): value for IDD Field `Surface 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_11_name`')
        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 11`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `Surface 12 Name`

        Args:
            value (str): value for IDD Field `Surface 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_12_name`')
        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 12`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `Surface 13 Name`

        Args:
            value (str): value for IDD Field `Surface 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_13_name`')
        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 13`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `Surface 14 Name`

        Args:
            value (str): value for IDD Field `Surface 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_14_name`')
        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 14`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `Surface 15 Name`

        Args:
            value (str): value for IDD Field `Surface 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_15_name`')
        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 15`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `Surface 16 Name`

        Args:
            value (str): value for IDD Field `Surface 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_16_name`')
        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 16`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `Surface 17 Name`

        Args:
            value (str): value for IDD Field `Surface 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_17_name`')
        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 17`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `Surface 18 Name`

        Args:
            value (str): value for IDD Field `Surface 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_18_name`')
        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 18`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `Surface 19 Name`

        Args:
            value (str): value for IDD Field `Surface 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_19_name`')
        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 19`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `Surface 20 Name`

        Args:
            value (str): value for IDD Field `Surface 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_20_name`')
        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 20`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `Surface 21 Name`

        Args:
            value (str): value for IDD Field `Surface 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_21_name`')
        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 21`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `Surface 22 Name`

        Args:
            value (str): value for IDD Field `Surface 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_22_name`')
        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 22`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `Surface 23 Name`

        Args:
            value (str): value for IDD Field `Surface 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_23_name`')
        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 23`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `Surface 24 Name`

        Args:
            value (str): value for IDD Field `Surface 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_24_name`')
        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 24`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `Surface 25 Name`

        Args:
            value (str): value for IDD Field `Surface 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_25_name`')
        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 25`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `Surface 26 Name`

        Args:
            value (str): value for IDD Field `Surface 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_26_name`')
        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 26`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `Surface 27 Name`

        Args:
            value (str): value for IDD Field `Surface 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_27_name`')
        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 27`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `Surface 28 Name`

        Args:
            value (str): value for IDD Field `Surface 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_28_name`')
        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 28`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `Surface 29 Name`

        Args:
            value (str): value for IDD Field `Surface 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_29_name`')
        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 29`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `Surface 30 Name`

        Args:
            value (str): value for IDD Field `Surface 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_30_name`')
        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 30`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `Surface 31 Name`

        Args:
            value (str): value for IDD Field `Surface 31 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_31_name`')
        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 31`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `Surface 32 Name`

        Args:
            value (str): value for IDD Field `Surface 32 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_32_name`')
        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 32`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `Surface 33 Name`

        Args:
            value (str): value for IDD Field `Surface 33 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_33_name`')
        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 33`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `Surface 34 Name`

        Args:
            value (str): value for IDD Field `Surface 34 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_34_name`')
        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 34`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `Surface 35 Name`

        Args:
            value (str): value for IDD Field `Surface 35 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_35_name`')
        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 35`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `Surface 36 Name`

        Args:
            value (str): value for IDD Field `Surface 36 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_36_name`')
        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 36`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `Surface 37 Name`

        Args:
            value (str): value for IDD Field `Surface 37 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_37_name`')
        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 37`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `Surface 38 Name`

        Args:
            value (str): value for IDD Field `Surface 38 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_38_name`')
        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 38`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `Surface 39 Name`

        Args:
            value (str): value for IDD Field `Surface 39 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_39_name`')
        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 39`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `Surface 40 Name`

        Args:
            value (str): value for IDD Field `Surface 40 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_40_name`')
        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 40`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `Surface 41 Name`

        Args:
            value (str): value for IDD Field `Surface 41 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_41_name`')
        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 41`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `Surface 42 Name`

        Args:
            value (str): value for IDD Field `Surface 42 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_42_name`')
        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 42`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `Surface 43 Name`

        Args:
            value (str): value for IDD Field `Surface 43 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_43_name`')
        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 43`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `Surface 44 Name`

        Args:
            value (str): value for IDD Field `Surface 44 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_44_name`')
        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 44`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `Surface 45 Name`

        Args:
            value (str): value for IDD Field `Surface 45 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_45_name`')
        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 45`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `Surface 46 Name`

        Args:
            value (str): value for IDD Field `Surface 46 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_46_name`')
        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 46`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `Surface 47 Name`

        Args:
            value (str): value for IDD Field `Surface 47 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_47_name`')
        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 47`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `Surface 48 Name`

        Args:
            value (str): value for IDD Field `Surface 48 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_48_name`')
        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 48`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `Surface 49 Name`

        Args:
            value (str): value for IDD Field `Surface 49 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_49_name`')
        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 49`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `Surface 50 Name`

        Args:
            value (str): value for IDD Field `Surface 50 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_50_name`')
        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 50`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `Surface 51 Name`

        Args:
            value (str): value for IDD Field `Surface 51 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_51_name`')
        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 51`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `Surface 52 Name`

        Args:
            value (str): value for IDD Field `Surface 52 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_52_name`')
        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 52`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `Surface 53 Name`

        Args:
            value (str): value for IDD Field `Surface 53 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_53_name`')
        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 53`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `Surface 54 Name`

        Args:
            value (str): value for IDD Field `Surface 54 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_54_name`')
        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 54`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `Surface 55 Name`

        Args:
            value (str): value for IDD Field `Surface 55 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_55_name`')
        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 55`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `Surface 56 Name`

        Args:
            value (str): value for IDD Field `Surface 56 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_56_name`')
        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 56`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `Surface 57 Name`

        Args:
            value (str): value for IDD Field `Surface 57 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_57_name`')
        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 57`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `Surface 58 Name`

        Args:
            value (str): value for IDD Field `Surface 58 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_58_name`')
        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 58`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `Surface 59 Name`

        Args:
            value (str): value for IDD Field `Surface 59 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_59_name`')
        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 59`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `Surface 60 Name`

        Args:
            value (str): value for IDD Field `Surface 60 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_60_name`')
        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 60`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `Surface 61 Name`

        Args:
            value (str): value for IDD Field `Surface 61 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_61_name`')
        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 61`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `Surface 62 Name`

        Args:
            value (str): value for IDD Field `Surface 62 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_62_name`')
        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 62`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `Surface 63 Name`

        Args:
            value (str): value for IDD Field `Surface 63 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_63_name`')
        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 63`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `Surface 64 Name`

        Args:
            value (str): value for IDD Field `Surface 64 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_64_name`')
        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 64`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `Surface 65 Name`

        Args:
            value (str): value for IDD Field `Surface 65 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_65_name`')
        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 65`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `Surface 66 Name`

        Args:
            value (str): value for IDD Field `Surface 66 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_66_name`')
        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 66`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `Surface 67 Name`

        Args:
            value (str): value for IDD Field `Surface 67 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_67_name`')
        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 67`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `Surface 68 Name`

        Args:
            value (str): value for IDD Field `Surface 68 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_68_name`')
        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 68`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `Surface 69 Name`

        Args:
            value (str): value for IDD Field `Surface 69 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_69_name`')
        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 69`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `Surface 70 Name`

        Args:
            value (str): value for IDD Field `Surface 70 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_70_name`')
        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 70`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `Surface 71 Name`

        Args:
            value (str): value for IDD Field `Surface 71 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_71_name`')
        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 71`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `Surface 72 Name`

        Args:
            value (str): value for IDD Field `Surface 72 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_72_name`')
        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 72`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `Surface 73 Name`

        Args:
            value (str): value for IDD Field `Surface 73 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_73_name`')
        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 73`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `Surface 74 Name`

        Args:
            value (str): value for IDD Field `Surface 74 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_74_name`')
        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 74`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `Surface 75 Name`

        Args:
            value (str): value for IDD Field `Surface 75 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_75_name`')
        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 75`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `Surface 76 Name`

        Args:
            value (str): value for IDD Field `Surface 76 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_76_name`')
        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 76`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `Surface 77 Name`

        Args:
            value (str): value for IDD Field `Surface 77 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_77_name`')
        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 77`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `Surface 78 Name`

        Args:
            value (str): value for IDD Field `Surface 78 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_78_name`')
        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 78`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `Surface 79 Name`

        Args:
            value (str): value for IDD Field `Surface 79 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_79_name`')
        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 79`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `Surface 80 Name`

        Args:
            value (str): value for IDD Field `Surface 80 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_80_name`')
        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 80`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `Surface 81 Name`

        Args:
            value (str): value for IDD Field `Surface 81 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_81_name`')
        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 81`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `Surface 82 Name`

        Args:
            value (str): value for IDD Field `Surface 82 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_82_name`')
        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 82`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `Surface 83 Name`

        Args:
            value (str): value for IDD Field `Surface 83 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_83_name`')
        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 83`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `Surface 84 Name`

        Args:
            value (str): value for IDD Field `Surface 84 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_84_name`')
        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 84`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `Surface 85 Name`

        Args:
            value (str): value for IDD Field `Surface 85 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_85_name`')
        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 85`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `Surface 86 Name`

        Args:
            value (str): value for IDD Field `Surface 86 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_86_name`')
        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 86`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `Surface 87 Name`

        Args:
            value (str): value for IDD Field `Surface 87 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_87_name`')
        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 87`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `Surface 88 Name`

        Args:
            value (str): value for IDD Field `Surface 88 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_88_name`')
        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 88`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `Surface 89 Name`

        Args:
            value (str): value for IDD Field `Surface 89 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_89_name`')
        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 89`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `Surface 90 Name`

        Args:
            value (str): value for IDD Field `Surface 90 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_90_name`')
        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 90`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `Surface 91 Name`

        Args:
            value (str): value for IDD Field `Surface 91 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_91_name`')
        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 91`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `Surface 92 Name`

        Args:
            value (str): value for IDD Field `Surface 92 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_92_name`')
        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 92`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `Surface 93 Name`

        Args:
            value (str): value for IDD Field `Surface 93 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_93_name`')
        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 93`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `Surface 94 Name`

        Args:
            value (str): value for IDD Field `Surface 94 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_94_name`')
        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 94`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `Surface 95 Name`

        Args:
            value (str): value for IDD Field `Surface 95 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_95_name`')
        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 95`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `Surface 96 Name`

        Args:
            value (str): value for IDD Field `Surface 96 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_96_name`')
        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 96`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `Surface 97 Name`

        Args:
            value (str): value for IDD Field `Surface 97 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_97_name`')
        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 97`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `Surface 98 Name`

        Args:
            value (str): value for IDD Field `Surface 98 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_98_name`')
        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 98`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `Surface 99 Name`

        Args:
            value (str): value for IDD Field `Surface 99 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_99_name`')
        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 99`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `Surface 100 Name`

        Args:
            value (str): value for IDD Field `Surface 100 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_100_name`')
        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 100`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
        self._data["Fraction of Radiant Energy to Surface 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacBaseboardConvectiveWater(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:Convective:Water`
        Hot water baseboard heater, convection-only. Natural convection hydronic heating unit.
    """
    internal_name = "ZoneHVAC:Baseboard:Convective:Water"
    field_count = 11
    required_fields = ["Name", "Inlet Node Name", "Outlet Node Name", "Heating Design Capacity Method", "U-Factor Times Area Value", "Maximum Water Flow Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:Baseboard:Convective:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["U-Factor Times Area Value"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Convergence Tolerance"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ufactor_times_area_value = None
        else:
            self.ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Inlet Node Name`

        Args:
            value (str): value for IDD Field `Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inlet_node_name`')
        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Outlet Node Name`

        Args:
            value (str): value for IDD Field `Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outlet_node_name`')
        self._data["Outlet Node Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def ufactor_times_area_value(self):
        """Get ufactor_times_area_value

        Returns:
            float: the value of `ufactor_times_area_value` or None if not set
        """
        return self._data["U-Factor Times Area Value"]

    @ufactor_times_area_value.setter
    def ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `U-Factor Times Area Value`

        Args:
            value (float or "Autosize"): value for IDD Field `U-Factor Times Area Value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["U-Factor Times Area Value"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `ufactor_times_area_value`'.format(value))
                    self._data["U-Factor Times Area Value"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `ufactor_times_area_value`'.format(value))
        self._data["U-Factor Times Area Value"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_water_flow_rate`'.format(value))
                    self._data["Maximum Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_water_flow_rate`'.format(value))
        self._data["Maximum Water Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001):
        """  Corresponds to IDD Field `Convergence Tolerance`

        Args:
            value (float): value for IDD Field `Convergence Tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')
        self._data["Convergence Tolerance"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacBaseboardConvectiveElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:Convective:Electric`
        Electric baseboard heater, convection-only. Natural convection electric heating unit.
    """
    internal_name = "ZoneHVAC:Baseboard:Convective:Electric"
    field_count = 7
    required_fields = ["Name", "Heating Design Capacity Method", "Efficiency"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:Baseboard:Convective:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Efficiency"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0):
        """  Corresponds to IDD Field `Efficiency`

        Args:
            value (float): value for IDD Field `Efficiency`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')
        self._data["Efficiency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacLowTemperatureRadiantVariableFlow(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:VariableFlow`
        Low temperature hydronic radiant heating and/or cooling system embedded in a building
        surface (wall, ceiling, or floor). Controlled by varying the hot or chilled water
        flow to the unit.
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
    field_count = 29
    required_fields = ["Name", "Heating Design Capacity Method"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:LowTemperatureRadiant:VariableFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Hydronic Tubing Inside Diameter"] = None
        self._data["Hydronic Tubing Length"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Maximum Hot Water Flow"] = None
        self._data["Heating Water Inlet Node Name"] = None
        self._data["Heating Water Outlet Node Name"] = None
        self._data["Heating Control Throttling Range"] = None
        self._data["Heating Control Temperature Schedule Name"] = None
        self._data["Cooling Design Capacity Method"] = None
        self._data["Cooling Design Capacity"] = None
        self._data["Cooling Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Cooling Design Capacity"] = None
        self._data["Maximum Cold Water Flow"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Cooling Control Throttling Range"] = None
        self._data["Cooling Control Temperature Schedule Name"] = None
        self._data["Condensation Control Type"] = None
        self._data["Condensation Control Dewpoint Offset"] = None
        self._data["Number of Circuits"] = None
        self._data["Circuit Length"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hydronic_tubing_inside_diameter = None
        else:
            self.hydronic_tubing_inside_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hydronic_tubing_length = None
        else:
            self.hydronic_tubing_length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_hot_water_flow = None
        else:
            self.maximum_hot_water_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_water_inlet_node_name = None
        else:
            self.heating_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_water_outlet_node_name = None
        else:
            self.heating_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_control_throttling_range = None
        else:
            self.heating_control_throttling_range = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_control_temperature_schedule_name = None
        else:
            self.heating_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_design_capacity_method = None
        else:
            self.cooling_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_design_capacity = None
        else:
            self.cooling_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_design_capacity_per_floor_area = None
        else:
            self.cooling_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_cooling_design_capacity = None
        else:
            self.fraction_of_autosized_cooling_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_cold_water_flow = None
        else:
            self.maximum_cold_water_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_control_throttling_range = None
        else:
            self.cooling_control_throttling_range = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_control_temperature_schedule_name = None
        else:
            self.cooling_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensation_control_type = None
        else:
            self.condensation_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensation_control_dewpoint_offset = None
        else:
            self.condensation_control_dewpoint_offset = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_circuits = None
        else:
            self.number_of_circuits = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.circuit_length = None
        else:
            self.circuit_length = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `Surface Name or Radiant Surface Group Name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `Surface Name or Radiant Surface Group Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_name_or_radiant_surface_group_name`')
        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def hydronic_tubing_inside_diameter(self):
        """Get hydronic_tubing_inside_diameter

        Returns:
            float: the value of `hydronic_tubing_inside_diameter` or None if not set
        """
        return self._data["Hydronic Tubing Inside Diameter"]

    @hydronic_tubing_inside_diameter.setter
    def hydronic_tubing_inside_diameter(self, value=0.013):
        """  Corresponds to IDD Field `Hydronic Tubing Inside Diameter`

        Args:
            value (float): value for IDD Field `Hydronic Tubing Inside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.013
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `hydronic_tubing_inside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_inside_diameter`')
        self._data["Hydronic Tubing Inside Diameter"] = value

    @property
    def hydronic_tubing_length(self):
        """Get hydronic_tubing_length

        Returns:
            float: the value of `hydronic_tubing_length` or None if not set
        """
        return self._data["Hydronic Tubing Length"]

    @hydronic_tubing_length.setter
    def hydronic_tubing_length(self, value=None):
        """  Corresponds to IDD Field `Hydronic Tubing Length`
        (total length of pipe embedded in surface)

        Args:
            value (float or "Autosize"): value for IDD Field `Hydronic Tubing Length`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Hydronic Tubing Length"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `hydronic_tubing_length`'.format(value))
                    self._data["Hydronic Tubing Length"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `hydronic_tubing_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_length`')
        self._data["Hydronic Tubing Length"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `Temperature Control Type`
        (Temperature on which unit is controlled)

        Args:
            value (str): value for IDD Field `Temperature Control Type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_control_type`')
            vals = {}
            vals["meanairtemperature"] = "MeanAirTemperature"
            vals["meanradianttemperature"] = "MeanRadiantTemperature"
            vals["operativetemperature"] = "OperativeTemperature"
            vals["outdoordrybulbtemperature"] = "OutdoorDryBulbTemperature"
            vals["outdoorwetbulbtemperature"] = "OutdoorWetBulbTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Control Type"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def maximum_hot_water_flow(self):
        """Get maximum_hot_water_flow

        Returns:
            float: the value of `maximum_hot_water_flow` or None if not set
        """
        return self._data["Maximum Hot Water Flow"]

    @maximum_hot_water_flow.setter
    def maximum_hot_water_flow(self, value=None):
        """  Corresponds to IDD Field `Maximum Hot Water Flow`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Hot Water Flow`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Hot Water Flow"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_hot_water_flow`'.format(value))
                    self._data["Maximum Hot Water Flow"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_hot_water_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_hot_water_flow`')
        self._data["Maximum Hot Water Flow"] = value

    @property
    def heating_water_inlet_node_name(self):
        """Get heating_water_inlet_node_name

        Returns:
            str: the value of `heating_water_inlet_node_name` or None if not set
        """
        return self._data["Heating Water Inlet Node Name"]

    @heating_water_inlet_node_name.setter
    def heating_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_water_inlet_node_name`')
        self._data["Heating Water Inlet Node Name"] = value

    @property
    def heating_water_outlet_node_name(self):
        """Get heating_water_outlet_node_name

        Returns:
            str: the value of `heating_water_outlet_node_name` or None if not set
        """
        return self._data["Heating Water Outlet Node Name"]

    @heating_water_outlet_node_name.setter
    def heating_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_water_outlet_node_name`')
        self._data["Heating Water Outlet Node Name"] = value

    @property
    def heating_control_throttling_range(self):
        """Get heating_control_throttling_range

        Returns:
            float: the value of `heating_control_throttling_range` or None if not set
        """
        return self._data["Heating Control Throttling Range"]

    @heating_control_throttling_range.setter
    def heating_control_throttling_range(self, value=0.5):
        """  Corresponds to IDD Field `Heating Control Throttling Range`

        Args:
            value (float): value for IDD Field `Heating Control Throttling Range`
                Units: deltaC
                Default value: 0.5
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_control_throttling_range`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `heating_control_throttling_range`')
        self._data["Heating Control Throttling Range"] = value

    @property
    def heating_control_temperature_schedule_name(self):
        """Get heating_control_temperature_schedule_name

        Returns:
            str: the value of `heating_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Control Temperature Schedule Name"]

    @heating_control_temperature_schedule_name.setter
    def heating_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_control_temperature_schedule_name`')
        self._data["Heating Control Temperature Schedule Name"] = value

    @property
    def cooling_design_capacity_method(self):
        """Get cooling_design_capacity_method

        Returns:
            str: the value of `cooling_design_capacity_method` or None if not set
        """
        return self._data["Cooling Design Capacity Method"]

    @cooling_design_capacity_method.setter
    def cooling_design_capacity_method(self, value="CoolingDesignCapacity"):
        """  Corresponds to IDD Field `Cooling Design Capacity Method`
        Enter the method used to determine the cooling design capacity for scalable sizing.
        CoolingDesignCapacity => selected when the design cooling capacity value is specified or
        auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined
        from user specified cooling capacity per floor area and total floor area of cooled zone
        served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the
        design cooling capacity is determined from a user specified fraction and the auto-sized
        design cooling capacity of the system.

        Args:
            value (str): value for IDD Field `Cooling Design Capacity Method`
                Accepted values are:
                      - None
                      - CoolingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedCoolingCapacity
                Default value: CoolingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_design_capacity_method`')
            vals = {}
            vals["none"] = "None"
            vals["coolingdesigncapacity"] = "CoolingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedcoolingcapacity"] = "FractionOfAutosizedCoolingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `cooling_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Cooling Design Capacity Method"] = value

    @property
    def cooling_design_capacity(self):
        """Get cooling_design_capacity

        Returns:
            float: the value of `cooling_design_capacity` or None if not set
        """
        return self._data["Cooling Design Capacity"]

    @cooling_design_capacity.setter
    def cooling_design_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling Design Capacity`
        Enter the design cooling capacity. Required field when the cooling design capacity method
        CoolingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Design Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Cooling Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `cooling_design_capacity`'.format(value))
                    self._data["Cooling Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `cooling_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_design_capacity`')
        self._data["Cooling Design Capacity"] = value

    @property
    def cooling_design_capacity_per_floor_area(self):
        """Get cooling_design_capacity_per_floor_area

        Returns:
            float: the value of `cooling_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Cooling Design Capacity Per Floor Area"]

    @cooling_design_capacity_per_floor_area.setter
    def cooling_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Cooling Design Capacity Per Floor Area`
        Enter the cooling design capacity per total floor area of cooled zones served by the unit.
        Required field when the cooling design capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Cooling Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_design_capacity_per_floor_area`')
        self._data["Cooling Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_cooling_design_capacity(self):
        """Get fraction_of_autosized_cooling_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_cooling_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Cooling Design Capacity"]

    @fraction_of_autosized_cooling_design_capacity.setter
    def fraction_of_autosized_cooling_design_capacity(self, value=None):
        """  Corresponds to IDD Field `Fraction of Autosized Cooling Design Capacity`
        Enter the fraction of auto-sized cooling design capacity. Required field when the cooling
        design capacity method field is FractionOfAutosizedCoolingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Cooling Design Capacity`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_cooling_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_cooling_design_capacity`')
        self._data["Fraction of Autosized Cooling Design Capacity"] = value

    @property
    def maximum_cold_water_flow(self):
        """Get maximum_cold_water_flow

        Returns:
            float: the value of `maximum_cold_water_flow` or None if not set
        """
        return self._data["Maximum Cold Water Flow"]

    @maximum_cold_water_flow.setter
    def maximum_cold_water_flow(self, value=None):
        """  Corresponds to IDD Field `Maximum Cold Water Flow`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Cold Water Flow`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Cold Water Flow"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_cold_water_flow`'.format(value))
                    self._data["Maximum Cold Water Flow"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_cold_water_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cold_water_flow`')
        self._data["Maximum Cold Water Flow"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_inlet_node_name`')
        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_outlet_node_name`')
        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def cooling_control_throttling_range(self):
        """Get cooling_control_throttling_range

        Returns:
            float: the value of `cooling_control_throttling_range` or None if not set
        """
        return self._data["Cooling Control Throttling Range"]

    @cooling_control_throttling_range.setter
    def cooling_control_throttling_range(self, value=0.5):
        """  Corresponds to IDD Field `Cooling Control Throttling Range`

        Args:
            value (float): value for IDD Field `Cooling Control Throttling Range`
                Units: deltaC
                Default value: 0.5
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_control_throttling_range`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_control_throttling_range`')
        self._data["Cooling Control Throttling Range"] = value

    @property
    def cooling_control_temperature_schedule_name(self):
        """Get cooling_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Control Temperature Schedule Name"]

    @cooling_control_temperature_schedule_name.setter
    def cooling_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_control_temperature_schedule_name`')
        self._data["Cooling Control Temperature Schedule Name"] = value

    @property
    def condensation_control_type(self):
        """Get condensation_control_type

        Returns:
            str: the value of `condensation_control_type` or None if not set
        """
        return self._data["Condensation Control Type"]

    @condensation_control_type.setter
    def condensation_control_type(self, value="SimpleOff"):
        """  Corresponds to IDD Field `Condensation Control Type`

        Args:
            value (str): value for IDD Field `Condensation Control Type`
                Accepted values are:
                      - Off
                      - SimpleOff
                      - VariableOff
                Default value: SimpleOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condensation_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensation_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensation_control_type`')
            vals = {}
            vals["off"] = "Off"
            vals["simpleoff"] = "SimpleOff"
            vals["variableoff"] = "VariableOff"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condensation_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condensation_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condensation Control Type"] = value

    @property
    def condensation_control_dewpoint_offset(self):
        """Get condensation_control_dewpoint_offset

        Returns:
            float: the value of `condensation_control_dewpoint_offset` or None if not set
        """
        return self._data["Condensation Control Dewpoint Offset"]

    @condensation_control_dewpoint_offset.setter
    def condensation_control_dewpoint_offset(self, value=1.0):
        """  Corresponds to IDD Field `Condensation Control Dewpoint Offset`

        Args:
            value (float): value for IDD Field `Condensation Control Dewpoint Offset`
                Units: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condensation_control_dewpoint_offset`'.format(value))
        self._data["Condensation Control Dewpoint Offset"] = value

    @property
    def number_of_circuits(self):
        """Get number_of_circuits

        Returns:
            str: the value of `number_of_circuits` or None if not set
        """
        return self._data["Number of Circuits"]

    @number_of_circuits.setter
    def number_of_circuits(self, value="OnePerSurface"):
        """  Corresponds to IDD Field `Number of Circuits`

        Args:
            value (str): value for IDD Field `Number of Circuits`
                Accepted values are:
                      - OnePerSurface
                      - CalculateFromCircuitLength
                Default value: OnePerSurface
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `number_of_circuits`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `number_of_circuits`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `number_of_circuits`')
            vals = {}
            vals["onepersurface"] = "OnePerSurface"
            vals["calculatefromcircuitlength"] = "CalculateFromCircuitLength"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `number_of_circuits`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `number_of_circuits`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Number of Circuits"] = value

    @property
    def circuit_length(self):
        """Get circuit_length

        Returns:
            float: the value of `circuit_length` or None if not set
        """
        return self._data["Circuit Length"]

    @circuit_length.setter
    def circuit_length(self, value=106.7):
        """  Corresponds to IDD Field `Circuit Length`

        Args:
            value (float): value for IDD Field `Circuit Length`
                Units: m
                Default value: 106.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `circuit_length`'.format(value))
        self._data["Circuit Length"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacLowTemperatureRadiantConstantFlow(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:ConstantFlow`
        Low temperature hydronic radiant heating and/or cooling system embedded in a building
        surface (wall, ceiling, or floor). Controlled by varying the hot or chilled water
        temperature circulating through the unit.
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
    field_count = 29
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:LowTemperatureRadiant:ConstantFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Hydronic Tubing Inside Diameter"] = None
        self._data["Hydronic Tubing Length"] = None
        self._data["Temperature Control Type"] = None
        self._data["Rated Flow Rate"] = None
        self._data["Pump Flow Rate Schedule Name"] = None
        self._data["Rated Pump Head"] = None
        self._data["Rated Power Consumption"] = None
        self._data["Motor Efficiency"] = None
        self._data["Fraction of Motor Inefficiencies to Fluid Stream"] = None
        self._data["Heating Water Inlet Node Name"] = None
        self._data["Heating Water Outlet Node Name"] = None
        self._data["Heating High Water Temperature Schedule Name"] = None
        self._data["Heating Low Water Temperature Schedule Name"] = None
        self._data["Heating High Control Temperature Schedule Name"] = None
        self._data["Heating Low Control Temperature Schedule Name"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Cooling High Water Temperature Schedule Name"] = None
        self._data["Cooling Low Water Temperature Schedule Name"] = None
        self._data["Cooling High Control Temperature Schedule Name"] = None
        self._data["Cooling Low Control Temperature Schedule Name"] = None
        self._data["Condensation Control Type"] = None
        self._data["Condensation Control Dewpoint Offset"] = None
        self._data["Number of Circuits"] = None
        self._data["Circuit Length"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hydronic_tubing_inside_diameter = None
        else:
            self.hydronic_tubing_inside_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hydronic_tubing_length = None
        else:
            self.hydronic_tubing_length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_flow_rate = None
        else:
            self.rated_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pump_flow_rate_schedule_name = None
        else:
            self.pump_flow_rate_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_pump_head = None
        else:
            self.rated_pump_head = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_power_consumption = None
        else:
            self.rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_motor_inefficiencies_to_fluid_stream = None
        else:
            self.fraction_of_motor_inefficiencies_to_fluid_stream = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_water_inlet_node_name = None
        else:
            self.heating_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_water_outlet_node_name = None
        else:
            self.heating_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_high_water_temperature_schedule_name = None
        else:
            self.heating_high_water_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_low_water_temperature_schedule_name = None
        else:
            self.heating_low_water_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_high_control_temperature_schedule_name = None
        else:
            self.heating_high_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_low_control_temperature_schedule_name = None
        else:
            self.heating_low_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_high_water_temperature_schedule_name = None
        else:
            self.cooling_high_water_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_low_water_temperature_schedule_name = None
        else:
            self.cooling_low_water_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_high_control_temperature_schedule_name = None
        else:
            self.cooling_high_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_low_control_temperature_schedule_name = None
        else:
            self.cooling_low_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensation_control_type = None
        else:
            self.condensation_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensation_control_dewpoint_offset = None
        else:
            self.condensation_control_dewpoint_offset = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_circuits = None
        else:
            self.number_of_circuits = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.circuit_length = None
        else:
            self.circuit_length = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `Surface Name or Radiant Surface Group Name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `Surface Name or Radiant Surface Group Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_name_or_radiant_surface_group_name`')
        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def hydronic_tubing_inside_diameter(self):
        """Get hydronic_tubing_inside_diameter

        Returns:
            float: the value of `hydronic_tubing_inside_diameter` or None if not set
        """
        return self._data["Hydronic Tubing Inside Diameter"]

    @hydronic_tubing_inside_diameter.setter
    def hydronic_tubing_inside_diameter(self, value=0.013):
        """  Corresponds to IDD Field `Hydronic Tubing Inside Diameter`

        Args:
            value (float): value for IDD Field `Hydronic Tubing Inside Diameter`
                Units: m
                Default value: 0.013
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `hydronic_tubing_inside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_inside_diameter`')
        self._data["Hydronic Tubing Inside Diameter"] = value

    @property
    def hydronic_tubing_length(self):
        """Get hydronic_tubing_length

        Returns:
            float: the value of `hydronic_tubing_length` or None if not set
        """
        return self._data["Hydronic Tubing Length"]

    @hydronic_tubing_length.setter
    def hydronic_tubing_length(self, value=None):
        """  Corresponds to IDD Field `Hydronic Tubing Length`
        Total length of pipe embedded in surface

        Args:
            value (float): value for IDD Field `Hydronic Tubing Length`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `hydronic_tubing_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_length`')
        self._data["Hydronic Tubing Length"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `Temperature Control Type`
        Temperature used to control system

        Args:
            value (str): value for IDD Field `Temperature Control Type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_control_type`')
            vals = {}
            vals["meanairtemperature"] = "MeanAirTemperature"
            vals["meanradianttemperature"] = "MeanRadiantTemperature"
            vals["operativetemperature"] = "OperativeTemperature"
            vals["outdoordrybulbtemperature"] = "OutdoorDryBulbTemperature"
            vals["outdoorwetbulbtemperature"] = "OutdoorWetBulbTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Control Type"] = value

    @property
    def rated_flow_rate(self):
        """Get rated_flow_rate

        Returns:
            float: the value of `rated_flow_rate` or None if not set
        """
        return self._data["Rated Flow Rate"]

    @rated_flow_rate.setter
    def rated_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Flow Rate`

        Args:
            value (float): value for IDD Field `Rated Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_flow_rate`'.format(value))
        self._data["Rated Flow Rate"] = value

    @property
    def pump_flow_rate_schedule_name(self):
        """Get pump_flow_rate_schedule_name

        Returns:
            str: the value of `pump_flow_rate_schedule_name` or None if not set
        """
        return self._data["Pump Flow Rate Schedule Name"]

    @pump_flow_rate_schedule_name.setter
    def pump_flow_rate_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Pump Flow Rate Schedule Name`
        Modifies the Rated Flow Rate of the pump on a time basis
        the default is that the pump is ON and runs according to its other
        operational requirements specified above.  The schedule is for special
        pump operations. Values here are between 0 and 1 and are multipliers
        on the previous field (Rated Flow Rate).

        Args:
            value (str): value for IDD Field `Pump Flow Rate Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `pump_flow_rate_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_flow_rate_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pump_flow_rate_schedule_name`')
        self._data["Pump Flow Rate Schedule Name"] = value

    @property
    def rated_pump_head(self):
        """Get rated_pump_head

        Returns:
            float: the value of `rated_pump_head` or None if not set
        """
        return self._data["Rated Pump Head"]

    @rated_pump_head.setter
    def rated_pump_head(self, value=179352.0):
        """  Corresponds to IDD Field `Rated Pump Head`
        default head is 60 feet

        Args:
            value (float): value for IDD Field `Rated Pump Head`
                Units: Pa
                Default value: 179352.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_pump_head`'.format(value))
        self._data["Rated Pump Head"] = value

    @property
    def rated_power_consumption(self):
        """Get rated_power_consumption

        Returns:
            float: the value of `rated_power_consumption` or None if not set
        """
        return self._data["Rated Power Consumption"]

    @rated_power_consumption.setter
    def rated_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Rated Power Consumption`

        Args:
            value (float): value for IDD Field `Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_power_consumption`'.format(value))
        self._data["Rated Power Consumption"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=0.9):
        """  Corresponds to IDD Field `Motor Efficiency`

        Args:
            value (float): value for IDD Field `Motor Efficiency`
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `motor_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')
        self._data["Motor Efficiency"] = value

    @property
    def fraction_of_motor_inefficiencies_to_fluid_stream(self):
        """Get fraction_of_motor_inefficiencies_to_fluid_stream

        Returns:
            float: the value of `fraction_of_motor_inefficiencies_to_fluid_stream` or None if not set
        """
        return self._data["Fraction of Motor Inefficiencies to Fluid Stream"]

    @fraction_of_motor_inefficiencies_to_fluid_stream.setter
    def fraction_of_motor_inefficiencies_to_fluid_stream(self, value=0.0):
        """  Corresponds to IDD Field `Fraction of Motor Inefficiencies to Fluid Stream`

        Args:
            value (float): value for IDD Field `Fraction of Motor Inefficiencies to Fluid Stream`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`')
        self._data["Fraction of Motor Inefficiencies to Fluid Stream"] = value

    @property
    def heating_water_inlet_node_name(self):
        """Get heating_water_inlet_node_name

        Returns:
            str: the value of `heating_water_inlet_node_name` or None if not set
        """
        return self._data["Heating Water Inlet Node Name"]

    @heating_water_inlet_node_name.setter
    def heating_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_water_inlet_node_name`')
        self._data["Heating Water Inlet Node Name"] = value

    @property
    def heating_water_outlet_node_name(self):
        """Get heating_water_outlet_node_name

        Returns:
            str: the value of `heating_water_outlet_node_name` or None if not set
        """
        return self._data["Heating Water Outlet Node Name"]

    @heating_water_outlet_node_name.setter
    def heating_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_water_outlet_node_name`')
        self._data["Heating Water Outlet Node Name"] = value

    @property
    def heating_high_water_temperature_schedule_name(self):
        """Get heating_high_water_temperature_schedule_name

        Returns:
            str: the value of `heating_high_water_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Water Temperature Schedule Name"]

    @heating_high_water_temperature_schedule_name.setter
    def heating_high_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating High Water Temperature Schedule Name`
        Water and control temperatures for heating work together to provide
        a linear function that determines the water temperature sent to the
        radiant system.  The current control temperature (see Temperature Control Type above) is
        compared to the high and low control temperatures at the current time.
        If the control temperature is above the high temperature, then the
        inlet water temperature is set to the low water temperature.  If the
        control temperature is below the low temperature, then the inlet
        water temperature is set to the high water temperature.  If the control
        temperature is between the high and low value, then the inlet water
        temperature is linearly interpolated between the low and high water
        temperature values.

        Args:
            value (str): value for IDD Field `Heating High Water Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_high_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_water_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_high_water_temperature_schedule_name`')
        self._data["Heating High Water Temperature Schedule Name"] = value

    @property
    def heating_low_water_temperature_schedule_name(self):
        """Get heating_low_water_temperature_schedule_name

        Returns:
            str: the value of `heating_low_water_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Water Temperature Schedule Name"]

    @heating_low_water_temperature_schedule_name.setter
    def heating_low_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Low Water Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Low Water Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_low_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_water_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_low_water_temperature_schedule_name`')
        self._data["Heating Low Water Temperature Schedule Name"] = value

    @property
    def heating_high_control_temperature_schedule_name(self):
        """Get heating_high_control_temperature_schedule_name

        Returns:
            str: the value of `heating_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Control Temperature Schedule Name"]

    @heating_high_control_temperature_schedule_name.setter
    def heating_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating High Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating High Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_high_control_temperature_schedule_name`')
        self._data["Heating High Control Temperature Schedule Name"] = value

    @property
    def heating_low_control_temperature_schedule_name(self):
        """Get heating_low_control_temperature_schedule_name

        Returns:
            str: the value of `heating_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Control Temperature Schedule Name"]

    @heating_low_control_temperature_schedule_name.setter
    def heating_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Low Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Low Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_low_control_temperature_schedule_name`')
        self._data["Heating Low Control Temperature Schedule Name"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_inlet_node_name`')
        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_outlet_node_name`')
        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def cooling_high_water_temperature_schedule_name(self):
        """Get cooling_high_water_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_water_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Water Temperature Schedule Name"]

    @cooling_high_water_temperature_schedule_name.setter
    def cooling_high_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling High Water Temperature Schedule Name`
        See note for Heating High Water Temperature Schedule above for
        interpretation information (or see the Input/Output Reference).

        Args:
            value (str): value for IDD Field `Cooling High Water Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_high_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_water_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_high_water_temperature_schedule_name`')
        self._data["Cooling High Water Temperature Schedule Name"] = value

    @property
    def cooling_low_water_temperature_schedule_name(self):
        """Get cooling_low_water_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_water_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Water Temperature Schedule Name"]

    @cooling_low_water_temperature_schedule_name.setter
    def cooling_low_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Low Water Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling Low Water Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_low_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_water_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_low_water_temperature_schedule_name`')
        self._data["Cooling Low Water Temperature Schedule Name"] = value

    @property
    def cooling_high_control_temperature_schedule_name(self):
        """Get cooling_high_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Control Temperature Schedule Name"]

    @cooling_high_control_temperature_schedule_name.setter
    def cooling_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling High Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling High Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_high_control_temperature_schedule_name`')
        self._data["Cooling High Control Temperature Schedule Name"] = value

    @property
    def cooling_low_control_temperature_schedule_name(self):
        """Get cooling_low_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Control Temperature Schedule Name"]

    @cooling_low_control_temperature_schedule_name.setter
    def cooling_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Low Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling Low Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_low_control_temperature_schedule_name`')
        self._data["Cooling Low Control Temperature Schedule Name"] = value

    @property
    def condensation_control_type(self):
        """Get condensation_control_type

        Returns:
            str: the value of `condensation_control_type` or None if not set
        """
        return self._data["Condensation Control Type"]

    @condensation_control_type.setter
    def condensation_control_type(self, value="SimpleOff"):
        """  Corresponds to IDD Field `Condensation Control Type`

        Args:
            value (str): value for IDD Field `Condensation Control Type`
                Accepted values are:
                      - Off
                      - SimpleOff
                      - VariableOff
                Default value: SimpleOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condensation_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensation_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensation_control_type`')
            vals = {}
            vals["off"] = "Off"
            vals["simpleoff"] = "SimpleOff"
            vals["variableoff"] = "VariableOff"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condensation_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condensation_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condensation Control Type"] = value

    @property
    def condensation_control_dewpoint_offset(self):
        """Get condensation_control_dewpoint_offset

        Returns:
            float: the value of `condensation_control_dewpoint_offset` or None if not set
        """
        return self._data["Condensation Control Dewpoint Offset"]

    @condensation_control_dewpoint_offset.setter
    def condensation_control_dewpoint_offset(self, value=1.0):
        """  Corresponds to IDD Field `Condensation Control Dewpoint Offset`

        Args:
            value (float): value for IDD Field `Condensation Control Dewpoint Offset`
                Units: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condensation_control_dewpoint_offset`'.format(value))
        self._data["Condensation Control Dewpoint Offset"] = value

    @property
    def number_of_circuits(self):
        """Get number_of_circuits

        Returns:
            str: the value of `number_of_circuits` or None if not set
        """
        return self._data["Number of Circuits"]

    @number_of_circuits.setter
    def number_of_circuits(self, value="OnePerSurface"):
        """  Corresponds to IDD Field `Number of Circuits`

        Args:
            value (str): value for IDD Field `Number of Circuits`
                Accepted values are:
                      - OnePerSurface
                      - CalculateFromCircuitLength
                Default value: OnePerSurface
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `number_of_circuits`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `number_of_circuits`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `number_of_circuits`')
            vals = {}
            vals["onepersurface"] = "OnePerSurface"
            vals["calculatefromcircuitlength"] = "CalculateFromCircuitLength"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `number_of_circuits`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `number_of_circuits`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Number of Circuits"] = value

    @property
    def circuit_length(self):
        """Get circuit_length

        Returns:
            float: the value of `circuit_length` or None if not set
        """
        return self._data["Circuit Length"]

    @circuit_length.setter
    def circuit_length(self, value=106.7):
        """  Corresponds to IDD Field `Circuit Length`

        Args:
            value (float): value for IDD Field `Circuit Length`
                Units: m
                Default value: 106.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `circuit_length`'.format(value))
        self._data["Circuit Length"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacLowTemperatureRadiantElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:Electric`
        Electric resistance low temperature radiant system
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:Electric"
    field_count = 11
    required_fields = ["Name", "Heating Design Capacity Method"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:LowTemperatureRadiant:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Throttling Range"] = None
        self._data["Heating Setpoint Temperature Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_throttling_range = None
        else:
            self.heating_throttling_range = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_setpoint_temperature_schedule_name = None
        else:
            self.heating_setpoint_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `Surface Name or Radiant Surface Group Name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `Surface Name or Radiant Surface Group Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_name_or_radiant_surface_group_name`')
        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the maximum electrical heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `Temperature Control Type`
        Temperature used to control unit

        Args:
            value (str): value for IDD Field `Temperature Control Type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_control_type`')
            vals = {}
            vals["meanairtemperature"] = "MeanAirTemperature"
            vals["meanradianttemperature"] = "MeanRadiantTemperature"
            vals["operativetemperature"] = "OperativeTemperature"
            vals["outdoordrybulbtemperature"] = "OutdoorDryBulbTemperature"
            vals["outdoorwetbulbtemperature"] = "OutdoorWetBulbTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Control Type"] = value

    @property
    def heating_throttling_range(self):
        """Get heating_throttling_range

        Returns:
            float: the value of `heating_throttling_range` or None if not set
        """
        return self._data["Heating Throttling Range"]

    @heating_throttling_range.setter
    def heating_throttling_range(self, value=0.0):
        """  Corresponds to IDD Field `Heating Throttling Range`

        Args:
            value (float): value for IDD Field `Heating Throttling Range`
                Units: deltaC
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_throttling_range`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_throttling_range`')
        self._data["Heating Throttling Range"] = value

    @property
    def heating_setpoint_temperature_schedule_name(self):
        """Get heating_setpoint_temperature_schedule_name

        Returns:
            str: the value of `heating_setpoint_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Setpoint Temperature Schedule Name"]

    @heating_setpoint_temperature_schedule_name.setter
    def heating_setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Setpoint Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Setpoint Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_setpoint_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_setpoint_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_setpoint_temperature_schedule_name`')
        self._data["Heating Setpoint Temperature Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacLowTemperatureRadiantSurfaceGroup(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:SurfaceGroup`
        This is used to allow the coordinate control of several radiant system surfaces.
        Note that the following flow fractions must sum up to 1.0
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:SurfaceGroup"
    field_count = 201
    required_fields = ["Name", "Surface 1 Name", "Flow Fraction for Surface 1"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:LowTemperatureRadiant:SurfaceGroup`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface 1 Name"] = None
        self._data["Flow Fraction for Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Flow Fraction for Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Flow Fraction for Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Flow Fraction for Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Flow Fraction for Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Flow Fraction for Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Flow Fraction for Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Flow Fraction for Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Flow Fraction for Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Flow Fraction for Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Flow Fraction for Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Flow Fraction for Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Flow Fraction for Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Flow Fraction for Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Flow Fraction for Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Flow Fraction for Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Flow Fraction for Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Flow Fraction for Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Flow Fraction for Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Flow Fraction for Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Flow Fraction for Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Flow Fraction for Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Flow Fraction for Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Flow Fraction for Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Flow Fraction for Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Flow Fraction for Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Flow Fraction for Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Flow Fraction for Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Flow Fraction for Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Flow Fraction for Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Flow Fraction for Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Flow Fraction for Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Flow Fraction for Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Flow Fraction for Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Flow Fraction for Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Flow Fraction for Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Flow Fraction for Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Flow Fraction for Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Flow Fraction for Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Flow Fraction for Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Flow Fraction for Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Flow Fraction for Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Flow Fraction for Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Flow Fraction for Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Flow Fraction for Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Flow Fraction for Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Flow Fraction for Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Flow Fraction for Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Flow Fraction for Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Flow Fraction for Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Flow Fraction for Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Flow Fraction for Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Flow Fraction for Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Flow Fraction for Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Flow Fraction for Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Flow Fraction for Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Flow Fraction for Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Flow Fraction for Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Flow Fraction for Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Flow Fraction for Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Flow Fraction for Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Flow Fraction for Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Flow Fraction for Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Flow Fraction for Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Flow Fraction for Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Flow Fraction for Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Flow Fraction for Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Flow Fraction for Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Flow Fraction for Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Flow Fraction for Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Flow Fraction for Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Flow Fraction for Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Flow Fraction for Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Flow Fraction for Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Flow Fraction for Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Flow Fraction for Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Flow Fraction for Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Flow Fraction for Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Flow Fraction for Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Flow Fraction for Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Flow Fraction for Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Flow Fraction for Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Flow Fraction for Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Flow Fraction for Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Flow Fraction for Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Flow Fraction for Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Flow Fraction for Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Flow Fraction for Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Flow Fraction for Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Flow Fraction for Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Flow Fraction for Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Flow Fraction for Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Flow Fraction for Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Flow Fraction for Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Flow Fraction for Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Flow Fraction for Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Flow Fraction for Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Flow Fraction for Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Flow Fraction for Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Flow Fraction for Surface 100"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_1 = None
        else:
            self.flow_fraction_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_2 = None
        else:
            self.flow_fraction_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_3 = None
        else:
            self.flow_fraction_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_4 = None
        else:
            self.flow_fraction_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_5 = None
        else:
            self.flow_fraction_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_6 = None
        else:
            self.flow_fraction_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_7 = None
        else:
            self.flow_fraction_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_8 = None
        else:
            self.flow_fraction_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_9 = None
        else:
            self.flow_fraction_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_10 = None
        else:
            self.flow_fraction_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_11 = None
        else:
            self.flow_fraction_for_surface_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_12 = None
        else:
            self.flow_fraction_for_surface_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_13 = None
        else:
            self.flow_fraction_for_surface_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_14 = None
        else:
            self.flow_fraction_for_surface_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_15 = None
        else:
            self.flow_fraction_for_surface_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_16 = None
        else:
            self.flow_fraction_for_surface_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_17 = None
        else:
            self.flow_fraction_for_surface_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_18 = None
        else:
            self.flow_fraction_for_surface_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_19 = None
        else:
            self.flow_fraction_for_surface_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_20 = None
        else:
            self.flow_fraction_for_surface_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_21 = None
        else:
            self.flow_fraction_for_surface_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_22 = None
        else:
            self.flow_fraction_for_surface_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_23 = None
        else:
            self.flow_fraction_for_surface_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_24 = None
        else:
            self.flow_fraction_for_surface_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_25 = None
        else:
            self.flow_fraction_for_surface_25 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_26 = None
        else:
            self.flow_fraction_for_surface_26 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_27 = None
        else:
            self.flow_fraction_for_surface_27 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_28 = None
        else:
            self.flow_fraction_for_surface_28 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_29 = None
        else:
            self.flow_fraction_for_surface_29 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_30 = None
        else:
            self.flow_fraction_for_surface_30 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_31 = None
        else:
            self.flow_fraction_for_surface_31 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_32 = None
        else:
            self.flow_fraction_for_surface_32 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_33 = None
        else:
            self.flow_fraction_for_surface_33 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_34 = None
        else:
            self.flow_fraction_for_surface_34 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_35 = None
        else:
            self.flow_fraction_for_surface_35 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_36 = None
        else:
            self.flow_fraction_for_surface_36 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_37 = None
        else:
            self.flow_fraction_for_surface_37 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_38 = None
        else:
            self.flow_fraction_for_surface_38 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_39 = None
        else:
            self.flow_fraction_for_surface_39 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_40 = None
        else:
            self.flow_fraction_for_surface_40 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_41 = None
        else:
            self.flow_fraction_for_surface_41 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_42 = None
        else:
            self.flow_fraction_for_surface_42 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_43 = None
        else:
            self.flow_fraction_for_surface_43 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_44 = None
        else:
            self.flow_fraction_for_surface_44 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_45 = None
        else:
            self.flow_fraction_for_surface_45 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_46 = None
        else:
            self.flow_fraction_for_surface_46 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_47 = None
        else:
            self.flow_fraction_for_surface_47 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_48 = None
        else:
            self.flow_fraction_for_surface_48 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_49 = None
        else:
            self.flow_fraction_for_surface_49 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_50 = None
        else:
            self.flow_fraction_for_surface_50 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_51 = None
        else:
            self.flow_fraction_for_surface_51 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_52 = None
        else:
            self.flow_fraction_for_surface_52 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_53 = None
        else:
            self.flow_fraction_for_surface_53 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_54 = None
        else:
            self.flow_fraction_for_surface_54 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_55 = None
        else:
            self.flow_fraction_for_surface_55 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_56 = None
        else:
            self.flow_fraction_for_surface_56 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_57 = None
        else:
            self.flow_fraction_for_surface_57 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_58 = None
        else:
            self.flow_fraction_for_surface_58 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_59 = None
        else:
            self.flow_fraction_for_surface_59 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_60 = None
        else:
            self.flow_fraction_for_surface_60 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_61 = None
        else:
            self.flow_fraction_for_surface_61 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_62 = None
        else:
            self.flow_fraction_for_surface_62 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_63 = None
        else:
            self.flow_fraction_for_surface_63 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_64 = None
        else:
            self.flow_fraction_for_surface_64 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_65 = None
        else:
            self.flow_fraction_for_surface_65 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_66 = None
        else:
            self.flow_fraction_for_surface_66 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_67 = None
        else:
            self.flow_fraction_for_surface_67 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_68 = None
        else:
            self.flow_fraction_for_surface_68 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_69 = None
        else:
            self.flow_fraction_for_surface_69 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_70 = None
        else:
            self.flow_fraction_for_surface_70 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_71 = None
        else:
            self.flow_fraction_for_surface_71 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_72 = None
        else:
            self.flow_fraction_for_surface_72 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_73 = None
        else:
            self.flow_fraction_for_surface_73 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_74 = None
        else:
            self.flow_fraction_for_surface_74 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_75 = None
        else:
            self.flow_fraction_for_surface_75 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_76 = None
        else:
            self.flow_fraction_for_surface_76 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_77 = None
        else:
            self.flow_fraction_for_surface_77 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_78 = None
        else:
            self.flow_fraction_for_surface_78 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_79 = None
        else:
            self.flow_fraction_for_surface_79 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_80 = None
        else:
            self.flow_fraction_for_surface_80 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_81 = None
        else:
            self.flow_fraction_for_surface_81 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_82 = None
        else:
            self.flow_fraction_for_surface_82 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_83 = None
        else:
            self.flow_fraction_for_surface_83 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_84 = None
        else:
            self.flow_fraction_for_surface_84 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_85 = None
        else:
            self.flow_fraction_for_surface_85 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_86 = None
        else:
            self.flow_fraction_for_surface_86 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_87 = None
        else:
            self.flow_fraction_for_surface_87 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_88 = None
        else:
            self.flow_fraction_for_surface_88 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_89 = None
        else:
            self.flow_fraction_for_surface_89 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_90 = None
        else:
            self.flow_fraction_for_surface_90 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_91 = None
        else:
            self.flow_fraction_for_surface_91 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_92 = None
        else:
            self.flow_fraction_for_surface_92 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_93 = None
        else:
            self.flow_fraction_for_surface_93 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_94 = None
        else:
            self.flow_fraction_for_surface_94 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_95 = None
        else:
            self.flow_fraction_for_surface_95 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_96 = None
        else:
            self.flow_fraction_for_surface_96 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_97 = None
        else:
            self.flow_fraction_for_surface_97 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_98 = None
        else:
            self.flow_fraction_for_surface_98 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_99 = None
        else:
            self.flow_fraction_for_surface_99 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_100 = None
        else:
            self.flow_fraction_for_surface_100 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def flow_fraction_for_surface_1(self):
        """Get flow_fraction_for_surface_1

        Returns:
            float: the value of `flow_fraction_for_surface_1` or None if not set
        """
        return self._data["Flow Fraction for Surface 1"]

    @flow_fraction_for_surface_1.setter
    def flow_fraction_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 1`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 1`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_1`')
        self._data["Flow Fraction for Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def flow_fraction_for_surface_2(self):
        """Get flow_fraction_for_surface_2

        Returns:
            float: the value of `flow_fraction_for_surface_2` or None if not set
        """
        return self._data["Flow Fraction for Surface 2"]

    @flow_fraction_for_surface_2.setter
    def flow_fraction_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 2`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 2`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_2`')
        self._data["Flow Fraction for Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def flow_fraction_for_surface_3(self):
        """Get flow_fraction_for_surface_3

        Returns:
            float: the value of `flow_fraction_for_surface_3` or None if not set
        """
        return self._data["Flow Fraction for Surface 3"]

    @flow_fraction_for_surface_3.setter
    def flow_fraction_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 3`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 3`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_3`')
        self._data["Flow Fraction for Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def flow_fraction_for_surface_4(self):
        """Get flow_fraction_for_surface_4

        Returns:
            float: the value of `flow_fraction_for_surface_4` or None if not set
        """
        return self._data["Flow Fraction for Surface 4"]

    @flow_fraction_for_surface_4.setter
    def flow_fraction_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 4`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 4`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_4`')
        self._data["Flow Fraction for Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def flow_fraction_for_surface_5(self):
        """Get flow_fraction_for_surface_5

        Returns:
            float: the value of `flow_fraction_for_surface_5` or None if not set
        """
        return self._data["Flow Fraction for Surface 5"]

    @flow_fraction_for_surface_5.setter
    def flow_fraction_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 5`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 5`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_5`')
        self._data["Flow Fraction for Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def flow_fraction_for_surface_6(self):
        """Get flow_fraction_for_surface_6

        Returns:
            float: the value of `flow_fraction_for_surface_6` or None if not set
        """
        return self._data["Flow Fraction for Surface 6"]

    @flow_fraction_for_surface_6.setter
    def flow_fraction_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 6`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 6`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_6`')
        self._data["Flow Fraction for Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def flow_fraction_for_surface_7(self):
        """Get flow_fraction_for_surface_7

        Returns:
            float: the value of `flow_fraction_for_surface_7` or None if not set
        """
        return self._data["Flow Fraction for Surface 7"]

    @flow_fraction_for_surface_7.setter
    def flow_fraction_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 7`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 7`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_7`')
        self._data["Flow Fraction for Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def flow_fraction_for_surface_8(self):
        """Get flow_fraction_for_surface_8

        Returns:
            float: the value of `flow_fraction_for_surface_8` or None if not set
        """
        return self._data["Flow Fraction for Surface 8"]

    @flow_fraction_for_surface_8.setter
    def flow_fraction_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 8`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 8`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_8`')
        self._data["Flow Fraction for Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def flow_fraction_for_surface_9(self):
        """Get flow_fraction_for_surface_9

        Returns:
            float: the value of `flow_fraction_for_surface_9` or None if not set
        """
        return self._data["Flow Fraction for Surface 9"]

    @flow_fraction_for_surface_9.setter
    def flow_fraction_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 9`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 9`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_9`')
        self._data["Flow Fraction for Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def flow_fraction_for_surface_10(self):
        """Get flow_fraction_for_surface_10

        Returns:
            float: the value of `flow_fraction_for_surface_10` or None if not set
        """
        return self._data["Flow Fraction for Surface 10"]

    @flow_fraction_for_surface_10.setter
    def flow_fraction_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 10`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 10`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_10`')
        self._data["Flow Fraction for Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `Surface 11 Name`

        Args:
            value (str): value for IDD Field `Surface 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_11_name`')
        self._data["Surface 11 Name"] = value

    @property
    def flow_fraction_for_surface_11(self):
        """Get flow_fraction_for_surface_11

        Returns:
            float: the value of `flow_fraction_for_surface_11` or None if not set
        """
        return self._data["Flow Fraction for Surface 11"]

    @flow_fraction_for_surface_11.setter
    def flow_fraction_for_surface_11(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 11`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 11`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_11`')
        self._data["Flow Fraction for Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `Surface 12 Name`

        Args:
            value (str): value for IDD Field `Surface 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_12_name`')
        self._data["Surface 12 Name"] = value

    @property
    def flow_fraction_for_surface_12(self):
        """Get flow_fraction_for_surface_12

        Returns:
            float: the value of `flow_fraction_for_surface_12` or None if not set
        """
        return self._data["Flow Fraction for Surface 12"]

    @flow_fraction_for_surface_12.setter
    def flow_fraction_for_surface_12(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 12`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 12`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_12`')
        self._data["Flow Fraction for Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `Surface 13 Name`

        Args:
            value (str): value for IDD Field `Surface 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_13_name`')
        self._data["Surface 13 Name"] = value

    @property
    def flow_fraction_for_surface_13(self):
        """Get flow_fraction_for_surface_13

        Returns:
            float: the value of `flow_fraction_for_surface_13` or None if not set
        """
        return self._data["Flow Fraction for Surface 13"]

    @flow_fraction_for_surface_13.setter
    def flow_fraction_for_surface_13(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 13`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 13`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_13`')
        self._data["Flow Fraction for Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `Surface 14 Name`

        Args:
            value (str): value for IDD Field `Surface 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_14_name`')
        self._data["Surface 14 Name"] = value

    @property
    def flow_fraction_for_surface_14(self):
        """Get flow_fraction_for_surface_14

        Returns:
            float: the value of `flow_fraction_for_surface_14` or None if not set
        """
        return self._data["Flow Fraction for Surface 14"]

    @flow_fraction_for_surface_14.setter
    def flow_fraction_for_surface_14(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 14`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 14`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_14`')
        self._data["Flow Fraction for Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `Surface 15 Name`

        Args:
            value (str): value for IDD Field `Surface 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_15_name`')
        self._data["Surface 15 Name"] = value

    @property
    def flow_fraction_for_surface_15(self):
        """Get flow_fraction_for_surface_15

        Returns:
            float: the value of `flow_fraction_for_surface_15` or None if not set
        """
        return self._data["Flow Fraction for Surface 15"]

    @flow_fraction_for_surface_15.setter
    def flow_fraction_for_surface_15(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 15`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 15`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_15`')
        self._data["Flow Fraction for Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `Surface 16 Name`

        Args:
            value (str): value for IDD Field `Surface 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_16_name`')
        self._data["Surface 16 Name"] = value

    @property
    def flow_fraction_for_surface_16(self):
        """Get flow_fraction_for_surface_16

        Returns:
            float: the value of `flow_fraction_for_surface_16` or None if not set
        """
        return self._data["Flow Fraction for Surface 16"]

    @flow_fraction_for_surface_16.setter
    def flow_fraction_for_surface_16(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 16`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 16`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_16`')
        self._data["Flow Fraction for Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `Surface 17 Name`

        Args:
            value (str): value for IDD Field `Surface 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_17_name`')
        self._data["Surface 17 Name"] = value

    @property
    def flow_fraction_for_surface_17(self):
        """Get flow_fraction_for_surface_17

        Returns:
            float: the value of `flow_fraction_for_surface_17` or None if not set
        """
        return self._data["Flow Fraction for Surface 17"]

    @flow_fraction_for_surface_17.setter
    def flow_fraction_for_surface_17(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 17`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 17`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_17`')
        self._data["Flow Fraction for Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `Surface 18 Name`

        Args:
            value (str): value for IDD Field `Surface 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_18_name`')
        self._data["Surface 18 Name"] = value

    @property
    def flow_fraction_for_surface_18(self):
        """Get flow_fraction_for_surface_18

        Returns:
            float: the value of `flow_fraction_for_surface_18` or None if not set
        """
        return self._data["Flow Fraction for Surface 18"]

    @flow_fraction_for_surface_18.setter
    def flow_fraction_for_surface_18(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 18`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 18`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_18`')
        self._data["Flow Fraction for Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `Surface 19 Name`

        Args:
            value (str): value for IDD Field `Surface 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_19_name`')
        self._data["Surface 19 Name"] = value

    @property
    def flow_fraction_for_surface_19(self):
        """Get flow_fraction_for_surface_19

        Returns:
            float: the value of `flow_fraction_for_surface_19` or None if not set
        """
        return self._data["Flow Fraction for Surface 19"]

    @flow_fraction_for_surface_19.setter
    def flow_fraction_for_surface_19(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 19`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 19`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_19`')
        self._data["Flow Fraction for Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `Surface 20 Name`

        Args:
            value (str): value for IDD Field `Surface 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_20_name`')
        self._data["Surface 20 Name"] = value

    @property
    def flow_fraction_for_surface_20(self):
        """Get flow_fraction_for_surface_20

        Returns:
            float: the value of `flow_fraction_for_surface_20` or None if not set
        """
        return self._data["Flow Fraction for Surface 20"]

    @flow_fraction_for_surface_20.setter
    def flow_fraction_for_surface_20(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 20`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 20`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_20`')
        self._data["Flow Fraction for Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `Surface 21 Name`

        Args:
            value (str): value for IDD Field `Surface 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_21_name`')
        self._data["Surface 21 Name"] = value

    @property
    def flow_fraction_for_surface_21(self):
        """Get flow_fraction_for_surface_21

        Returns:
            float: the value of `flow_fraction_for_surface_21` or None if not set
        """
        return self._data["Flow Fraction for Surface 21"]

    @flow_fraction_for_surface_21.setter
    def flow_fraction_for_surface_21(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 21`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 21`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_21`')
        self._data["Flow Fraction for Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `Surface 22 Name`

        Args:
            value (str): value for IDD Field `Surface 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_22_name`')
        self._data["Surface 22 Name"] = value

    @property
    def flow_fraction_for_surface_22(self):
        """Get flow_fraction_for_surface_22

        Returns:
            float: the value of `flow_fraction_for_surface_22` or None if not set
        """
        return self._data["Flow Fraction for Surface 22"]

    @flow_fraction_for_surface_22.setter
    def flow_fraction_for_surface_22(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 22`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 22`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_22`')
        self._data["Flow Fraction for Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `Surface 23 Name`

        Args:
            value (str): value for IDD Field `Surface 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_23_name`')
        self._data["Surface 23 Name"] = value

    @property
    def flow_fraction_for_surface_23(self):
        """Get flow_fraction_for_surface_23

        Returns:
            float: the value of `flow_fraction_for_surface_23` or None if not set
        """
        return self._data["Flow Fraction for Surface 23"]

    @flow_fraction_for_surface_23.setter
    def flow_fraction_for_surface_23(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 23`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 23`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_23`')
        self._data["Flow Fraction for Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `Surface 24 Name`

        Args:
            value (str): value for IDD Field `Surface 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_24_name`')
        self._data["Surface 24 Name"] = value

    @property
    def flow_fraction_for_surface_24(self):
        """Get flow_fraction_for_surface_24

        Returns:
            float: the value of `flow_fraction_for_surface_24` or None if not set
        """
        return self._data["Flow Fraction for Surface 24"]

    @flow_fraction_for_surface_24.setter
    def flow_fraction_for_surface_24(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 24`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 24`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_24`')
        self._data["Flow Fraction for Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `Surface 25 Name`

        Args:
            value (str): value for IDD Field `Surface 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_25_name`')
        self._data["Surface 25 Name"] = value

    @property
    def flow_fraction_for_surface_25(self):
        """Get flow_fraction_for_surface_25

        Returns:
            float: the value of `flow_fraction_for_surface_25` or None if not set
        """
        return self._data["Flow Fraction for Surface 25"]

    @flow_fraction_for_surface_25.setter
    def flow_fraction_for_surface_25(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 25`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 25`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_25`')
        self._data["Flow Fraction for Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `Surface 26 Name`

        Args:
            value (str): value for IDD Field `Surface 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_26_name`')
        self._data["Surface 26 Name"] = value

    @property
    def flow_fraction_for_surface_26(self):
        """Get flow_fraction_for_surface_26

        Returns:
            float: the value of `flow_fraction_for_surface_26` or None if not set
        """
        return self._data["Flow Fraction for Surface 26"]

    @flow_fraction_for_surface_26.setter
    def flow_fraction_for_surface_26(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 26`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 26`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_26`')
        self._data["Flow Fraction for Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `Surface 27 Name`

        Args:
            value (str): value for IDD Field `Surface 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_27_name`')
        self._data["Surface 27 Name"] = value

    @property
    def flow_fraction_for_surface_27(self):
        """Get flow_fraction_for_surface_27

        Returns:
            float: the value of `flow_fraction_for_surface_27` or None if not set
        """
        return self._data["Flow Fraction for Surface 27"]

    @flow_fraction_for_surface_27.setter
    def flow_fraction_for_surface_27(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 27`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 27`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_27`')
        self._data["Flow Fraction for Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `Surface 28 Name`

        Args:
            value (str): value for IDD Field `Surface 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_28_name`')
        self._data["Surface 28 Name"] = value

    @property
    def flow_fraction_for_surface_28(self):
        """Get flow_fraction_for_surface_28

        Returns:
            float: the value of `flow_fraction_for_surface_28` or None if not set
        """
        return self._data["Flow Fraction for Surface 28"]

    @flow_fraction_for_surface_28.setter
    def flow_fraction_for_surface_28(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 28`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 28`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_28`')
        self._data["Flow Fraction for Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `Surface 29 Name`

        Args:
            value (str): value for IDD Field `Surface 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_29_name`')
        self._data["Surface 29 Name"] = value

    @property
    def flow_fraction_for_surface_29(self):
        """Get flow_fraction_for_surface_29

        Returns:
            float: the value of `flow_fraction_for_surface_29` or None if not set
        """
        return self._data["Flow Fraction for Surface 29"]

    @flow_fraction_for_surface_29.setter
    def flow_fraction_for_surface_29(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 29`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 29`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_29`')
        self._data["Flow Fraction for Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `Surface 30 Name`

        Args:
            value (str): value for IDD Field `Surface 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_30_name`')
        self._data["Surface 30 Name"] = value

    @property
    def flow_fraction_for_surface_30(self):
        """Get flow_fraction_for_surface_30

        Returns:
            float: the value of `flow_fraction_for_surface_30` or None if not set
        """
        return self._data["Flow Fraction for Surface 30"]

    @flow_fraction_for_surface_30.setter
    def flow_fraction_for_surface_30(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 30`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 30`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_30`')
        self._data["Flow Fraction for Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `Surface 31 Name`

        Args:
            value (str): value for IDD Field `Surface 31 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_31_name`')
        self._data["Surface 31 Name"] = value

    @property
    def flow_fraction_for_surface_31(self):
        """Get flow_fraction_for_surface_31

        Returns:
            float: the value of `flow_fraction_for_surface_31` or None if not set
        """
        return self._data["Flow Fraction for Surface 31"]

    @flow_fraction_for_surface_31.setter
    def flow_fraction_for_surface_31(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 31`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 31`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_31`')
        self._data["Flow Fraction for Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `Surface 32 Name`

        Args:
            value (str): value for IDD Field `Surface 32 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_32_name`')
        self._data["Surface 32 Name"] = value

    @property
    def flow_fraction_for_surface_32(self):
        """Get flow_fraction_for_surface_32

        Returns:
            float: the value of `flow_fraction_for_surface_32` or None if not set
        """
        return self._data["Flow Fraction for Surface 32"]

    @flow_fraction_for_surface_32.setter
    def flow_fraction_for_surface_32(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 32`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 32`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_32`')
        self._data["Flow Fraction for Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `Surface 33 Name`

        Args:
            value (str): value for IDD Field `Surface 33 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_33_name`')
        self._data["Surface 33 Name"] = value

    @property
    def flow_fraction_for_surface_33(self):
        """Get flow_fraction_for_surface_33

        Returns:
            float: the value of `flow_fraction_for_surface_33` or None if not set
        """
        return self._data["Flow Fraction for Surface 33"]

    @flow_fraction_for_surface_33.setter
    def flow_fraction_for_surface_33(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 33`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 33`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_33`')
        self._data["Flow Fraction for Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `Surface 34 Name`

        Args:
            value (str): value for IDD Field `Surface 34 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_34_name`')
        self._data["Surface 34 Name"] = value

    @property
    def flow_fraction_for_surface_34(self):
        """Get flow_fraction_for_surface_34

        Returns:
            float: the value of `flow_fraction_for_surface_34` or None if not set
        """
        return self._data["Flow Fraction for Surface 34"]

    @flow_fraction_for_surface_34.setter
    def flow_fraction_for_surface_34(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 34`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 34`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_34`')
        self._data["Flow Fraction for Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `Surface 35 Name`

        Args:
            value (str): value for IDD Field `Surface 35 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_35_name`')
        self._data["Surface 35 Name"] = value

    @property
    def flow_fraction_for_surface_35(self):
        """Get flow_fraction_for_surface_35

        Returns:
            float: the value of `flow_fraction_for_surface_35` or None if not set
        """
        return self._data["Flow Fraction for Surface 35"]

    @flow_fraction_for_surface_35.setter
    def flow_fraction_for_surface_35(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 35`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 35`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_35`')
        self._data["Flow Fraction for Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `Surface 36 Name`

        Args:
            value (str): value for IDD Field `Surface 36 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_36_name`')
        self._data["Surface 36 Name"] = value

    @property
    def flow_fraction_for_surface_36(self):
        """Get flow_fraction_for_surface_36

        Returns:
            float: the value of `flow_fraction_for_surface_36` or None if not set
        """
        return self._data["Flow Fraction for Surface 36"]

    @flow_fraction_for_surface_36.setter
    def flow_fraction_for_surface_36(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 36`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 36`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_36`')
        self._data["Flow Fraction for Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `Surface 37 Name`

        Args:
            value (str): value for IDD Field `Surface 37 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_37_name`')
        self._data["Surface 37 Name"] = value

    @property
    def flow_fraction_for_surface_37(self):
        """Get flow_fraction_for_surface_37

        Returns:
            float: the value of `flow_fraction_for_surface_37` or None if not set
        """
        return self._data["Flow Fraction for Surface 37"]

    @flow_fraction_for_surface_37.setter
    def flow_fraction_for_surface_37(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 37`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 37`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_37`')
        self._data["Flow Fraction for Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `Surface 38 Name`

        Args:
            value (str): value for IDD Field `Surface 38 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_38_name`')
        self._data["Surface 38 Name"] = value

    @property
    def flow_fraction_for_surface_38(self):
        """Get flow_fraction_for_surface_38

        Returns:
            float: the value of `flow_fraction_for_surface_38` or None if not set
        """
        return self._data["Flow Fraction for Surface 38"]

    @flow_fraction_for_surface_38.setter
    def flow_fraction_for_surface_38(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 38`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 38`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_38`')
        self._data["Flow Fraction for Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `Surface 39 Name`

        Args:
            value (str): value for IDD Field `Surface 39 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_39_name`')
        self._data["Surface 39 Name"] = value

    @property
    def flow_fraction_for_surface_39(self):
        """Get flow_fraction_for_surface_39

        Returns:
            float: the value of `flow_fraction_for_surface_39` or None if not set
        """
        return self._data["Flow Fraction for Surface 39"]

    @flow_fraction_for_surface_39.setter
    def flow_fraction_for_surface_39(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 39`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 39`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_39`')
        self._data["Flow Fraction for Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `Surface 40 Name`

        Args:
            value (str): value for IDD Field `Surface 40 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_40_name`')
        self._data["Surface 40 Name"] = value

    @property
    def flow_fraction_for_surface_40(self):
        """Get flow_fraction_for_surface_40

        Returns:
            float: the value of `flow_fraction_for_surface_40` or None if not set
        """
        return self._data["Flow Fraction for Surface 40"]

    @flow_fraction_for_surface_40.setter
    def flow_fraction_for_surface_40(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 40`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 40`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_40`')
        self._data["Flow Fraction for Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `Surface 41 Name`

        Args:
            value (str): value for IDD Field `Surface 41 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_41_name`')
        self._data["Surface 41 Name"] = value

    @property
    def flow_fraction_for_surface_41(self):
        """Get flow_fraction_for_surface_41

        Returns:
            float: the value of `flow_fraction_for_surface_41` or None if not set
        """
        return self._data["Flow Fraction for Surface 41"]

    @flow_fraction_for_surface_41.setter
    def flow_fraction_for_surface_41(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 41`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 41`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_41`')
        self._data["Flow Fraction for Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `Surface 42 Name`

        Args:
            value (str): value for IDD Field `Surface 42 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_42_name`')
        self._data["Surface 42 Name"] = value

    @property
    def flow_fraction_for_surface_42(self):
        """Get flow_fraction_for_surface_42

        Returns:
            float: the value of `flow_fraction_for_surface_42` or None if not set
        """
        return self._data["Flow Fraction for Surface 42"]

    @flow_fraction_for_surface_42.setter
    def flow_fraction_for_surface_42(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 42`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 42`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_42`')
        self._data["Flow Fraction for Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `Surface 43 Name`

        Args:
            value (str): value for IDD Field `Surface 43 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_43_name`')
        self._data["Surface 43 Name"] = value

    @property
    def flow_fraction_for_surface_43(self):
        """Get flow_fraction_for_surface_43

        Returns:
            float: the value of `flow_fraction_for_surface_43` or None if not set
        """
        return self._data["Flow Fraction for Surface 43"]

    @flow_fraction_for_surface_43.setter
    def flow_fraction_for_surface_43(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 43`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 43`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_43`')
        self._data["Flow Fraction for Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `Surface 44 Name`

        Args:
            value (str): value for IDD Field `Surface 44 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_44_name`')
        self._data["Surface 44 Name"] = value

    @property
    def flow_fraction_for_surface_44(self):
        """Get flow_fraction_for_surface_44

        Returns:
            float: the value of `flow_fraction_for_surface_44` or None if not set
        """
        return self._data["Flow Fraction for Surface 44"]

    @flow_fraction_for_surface_44.setter
    def flow_fraction_for_surface_44(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 44`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 44`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_44`')
        self._data["Flow Fraction for Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `Surface 45 Name`

        Args:
            value (str): value for IDD Field `Surface 45 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_45_name`')
        self._data["Surface 45 Name"] = value

    @property
    def flow_fraction_for_surface_45(self):
        """Get flow_fraction_for_surface_45

        Returns:
            float: the value of `flow_fraction_for_surface_45` or None if not set
        """
        return self._data["Flow Fraction for Surface 45"]

    @flow_fraction_for_surface_45.setter
    def flow_fraction_for_surface_45(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 45`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 45`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_45`')
        self._data["Flow Fraction for Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `Surface 46 Name`

        Args:
            value (str): value for IDD Field `Surface 46 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_46_name`')
        self._data["Surface 46 Name"] = value

    @property
    def flow_fraction_for_surface_46(self):
        """Get flow_fraction_for_surface_46

        Returns:
            float: the value of `flow_fraction_for_surface_46` or None if not set
        """
        return self._data["Flow Fraction for Surface 46"]

    @flow_fraction_for_surface_46.setter
    def flow_fraction_for_surface_46(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 46`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 46`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_46`')
        self._data["Flow Fraction for Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `Surface 47 Name`

        Args:
            value (str): value for IDD Field `Surface 47 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_47_name`')
        self._data["Surface 47 Name"] = value

    @property
    def flow_fraction_for_surface_47(self):
        """Get flow_fraction_for_surface_47

        Returns:
            float: the value of `flow_fraction_for_surface_47` or None if not set
        """
        return self._data["Flow Fraction for Surface 47"]

    @flow_fraction_for_surface_47.setter
    def flow_fraction_for_surface_47(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 47`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 47`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_47`')
        self._data["Flow Fraction for Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `Surface 48 Name`

        Args:
            value (str): value for IDD Field `Surface 48 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_48_name`')
        self._data["Surface 48 Name"] = value

    @property
    def flow_fraction_for_surface_48(self):
        """Get flow_fraction_for_surface_48

        Returns:
            float: the value of `flow_fraction_for_surface_48` or None if not set
        """
        return self._data["Flow Fraction for Surface 48"]

    @flow_fraction_for_surface_48.setter
    def flow_fraction_for_surface_48(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 48`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 48`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_48`')
        self._data["Flow Fraction for Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `Surface 49 Name`

        Args:
            value (str): value for IDD Field `Surface 49 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_49_name`')
        self._data["Surface 49 Name"] = value

    @property
    def flow_fraction_for_surface_49(self):
        """Get flow_fraction_for_surface_49

        Returns:
            float: the value of `flow_fraction_for_surface_49` or None if not set
        """
        return self._data["Flow Fraction for Surface 49"]

    @flow_fraction_for_surface_49.setter
    def flow_fraction_for_surface_49(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 49`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 49`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_49`')
        self._data["Flow Fraction for Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `Surface 50 Name`

        Args:
            value (str): value for IDD Field `Surface 50 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_50_name`')
        self._data["Surface 50 Name"] = value

    @property
    def flow_fraction_for_surface_50(self):
        """Get flow_fraction_for_surface_50

        Returns:
            float: the value of `flow_fraction_for_surface_50` or None if not set
        """
        return self._data["Flow Fraction for Surface 50"]

    @flow_fraction_for_surface_50.setter
    def flow_fraction_for_surface_50(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 50`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 50`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_50`')
        self._data["Flow Fraction for Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `Surface 51 Name`

        Args:
            value (str): value for IDD Field `Surface 51 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_51_name`')
        self._data["Surface 51 Name"] = value

    @property
    def flow_fraction_for_surface_51(self):
        """Get flow_fraction_for_surface_51

        Returns:
            float: the value of `flow_fraction_for_surface_51` or None if not set
        """
        return self._data["Flow Fraction for Surface 51"]

    @flow_fraction_for_surface_51.setter
    def flow_fraction_for_surface_51(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 51`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 51`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_51`')
        self._data["Flow Fraction for Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `Surface 52 Name`

        Args:
            value (str): value for IDD Field `Surface 52 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_52_name`')
        self._data["Surface 52 Name"] = value

    @property
    def flow_fraction_for_surface_52(self):
        """Get flow_fraction_for_surface_52

        Returns:
            float: the value of `flow_fraction_for_surface_52` or None if not set
        """
        return self._data["Flow Fraction for Surface 52"]

    @flow_fraction_for_surface_52.setter
    def flow_fraction_for_surface_52(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 52`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 52`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_52`')
        self._data["Flow Fraction for Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `Surface 53 Name`

        Args:
            value (str): value for IDD Field `Surface 53 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_53_name`')
        self._data["Surface 53 Name"] = value

    @property
    def flow_fraction_for_surface_53(self):
        """Get flow_fraction_for_surface_53

        Returns:
            float: the value of `flow_fraction_for_surface_53` or None if not set
        """
        return self._data["Flow Fraction for Surface 53"]

    @flow_fraction_for_surface_53.setter
    def flow_fraction_for_surface_53(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 53`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 53`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_53`')
        self._data["Flow Fraction for Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `Surface 54 Name`

        Args:
            value (str): value for IDD Field `Surface 54 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_54_name`')
        self._data["Surface 54 Name"] = value

    @property
    def flow_fraction_for_surface_54(self):
        """Get flow_fraction_for_surface_54

        Returns:
            float: the value of `flow_fraction_for_surface_54` or None if not set
        """
        return self._data["Flow Fraction for Surface 54"]

    @flow_fraction_for_surface_54.setter
    def flow_fraction_for_surface_54(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 54`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 54`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_54`')
        self._data["Flow Fraction for Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `Surface 55 Name`

        Args:
            value (str): value for IDD Field `Surface 55 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_55_name`')
        self._data["Surface 55 Name"] = value

    @property
    def flow_fraction_for_surface_55(self):
        """Get flow_fraction_for_surface_55

        Returns:
            float: the value of `flow_fraction_for_surface_55` or None if not set
        """
        return self._data["Flow Fraction for Surface 55"]

    @flow_fraction_for_surface_55.setter
    def flow_fraction_for_surface_55(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 55`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 55`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_55`')
        self._data["Flow Fraction for Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `Surface 56 Name`

        Args:
            value (str): value for IDD Field `Surface 56 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_56_name`')
        self._data["Surface 56 Name"] = value

    @property
    def flow_fraction_for_surface_56(self):
        """Get flow_fraction_for_surface_56

        Returns:
            float: the value of `flow_fraction_for_surface_56` or None if not set
        """
        return self._data["Flow Fraction for Surface 56"]

    @flow_fraction_for_surface_56.setter
    def flow_fraction_for_surface_56(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 56`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 56`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_56`')
        self._data["Flow Fraction for Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `Surface 57 Name`

        Args:
            value (str): value for IDD Field `Surface 57 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_57_name`')
        self._data["Surface 57 Name"] = value

    @property
    def flow_fraction_for_surface_57(self):
        """Get flow_fraction_for_surface_57

        Returns:
            float: the value of `flow_fraction_for_surface_57` or None if not set
        """
        return self._data["Flow Fraction for Surface 57"]

    @flow_fraction_for_surface_57.setter
    def flow_fraction_for_surface_57(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 57`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 57`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_57`')
        self._data["Flow Fraction for Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `Surface 58 Name`

        Args:
            value (str): value for IDD Field `Surface 58 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_58_name`')
        self._data["Surface 58 Name"] = value

    @property
    def flow_fraction_for_surface_58(self):
        """Get flow_fraction_for_surface_58

        Returns:
            float: the value of `flow_fraction_for_surface_58` or None if not set
        """
        return self._data["Flow Fraction for Surface 58"]

    @flow_fraction_for_surface_58.setter
    def flow_fraction_for_surface_58(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 58`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 58`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_58`')
        self._data["Flow Fraction for Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `Surface 59 Name`

        Args:
            value (str): value for IDD Field `Surface 59 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_59_name`')
        self._data["Surface 59 Name"] = value

    @property
    def flow_fraction_for_surface_59(self):
        """Get flow_fraction_for_surface_59

        Returns:
            float: the value of `flow_fraction_for_surface_59` or None if not set
        """
        return self._data["Flow Fraction for Surface 59"]

    @flow_fraction_for_surface_59.setter
    def flow_fraction_for_surface_59(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 59`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 59`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_59`')
        self._data["Flow Fraction for Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `Surface 60 Name`

        Args:
            value (str): value for IDD Field `Surface 60 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_60_name`')
        self._data["Surface 60 Name"] = value

    @property
    def flow_fraction_for_surface_60(self):
        """Get flow_fraction_for_surface_60

        Returns:
            float: the value of `flow_fraction_for_surface_60` or None if not set
        """
        return self._data["Flow Fraction for Surface 60"]

    @flow_fraction_for_surface_60.setter
    def flow_fraction_for_surface_60(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 60`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 60`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_60`')
        self._data["Flow Fraction for Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `Surface 61 Name`

        Args:
            value (str): value for IDD Field `Surface 61 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_61_name`')
        self._data["Surface 61 Name"] = value

    @property
    def flow_fraction_for_surface_61(self):
        """Get flow_fraction_for_surface_61

        Returns:
            float: the value of `flow_fraction_for_surface_61` or None if not set
        """
        return self._data["Flow Fraction for Surface 61"]

    @flow_fraction_for_surface_61.setter
    def flow_fraction_for_surface_61(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 61`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 61`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_61`')
        self._data["Flow Fraction for Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `Surface 62 Name`

        Args:
            value (str): value for IDD Field `Surface 62 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_62_name`')
        self._data["Surface 62 Name"] = value

    @property
    def flow_fraction_for_surface_62(self):
        """Get flow_fraction_for_surface_62

        Returns:
            float: the value of `flow_fraction_for_surface_62` or None if not set
        """
        return self._data["Flow Fraction for Surface 62"]

    @flow_fraction_for_surface_62.setter
    def flow_fraction_for_surface_62(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 62`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 62`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_62`')
        self._data["Flow Fraction for Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `Surface 63 Name`

        Args:
            value (str): value for IDD Field `Surface 63 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_63_name`')
        self._data["Surface 63 Name"] = value

    @property
    def flow_fraction_for_surface_63(self):
        """Get flow_fraction_for_surface_63

        Returns:
            float: the value of `flow_fraction_for_surface_63` or None if not set
        """
        return self._data["Flow Fraction for Surface 63"]

    @flow_fraction_for_surface_63.setter
    def flow_fraction_for_surface_63(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 63`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 63`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_63`')
        self._data["Flow Fraction for Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `Surface 64 Name`

        Args:
            value (str): value for IDD Field `Surface 64 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_64_name`')
        self._data["Surface 64 Name"] = value

    @property
    def flow_fraction_for_surface_64(self):
        """Get flow_fraction_for_surface_64

        Returns:
            float: the value of `flow_fraction_for_surface_64` or None if not set
        """
        return self._data["Flow Fraction for Surface 64"]

    @flow_fraction_for_surface_64.setter
    def flow_fraction_for_surface_64(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 64`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 64`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_64`')
        self._data["Flow Fraction for Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `Surface 65 Name`

        Args:
            value (str): value for IDD Field `Surface 65 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_65_name`')
        self._data["Surface 65 Name"] = value

    @property
    def flow_fraction_for_surface_65(self):
        """Get flow_fraction_for_surface_65

        Returns:
            float: the value of `flow_fraction_for_surface_65` or None if not set
        """
        return self._data["Flow Fraction for Surface 65"]

    @flow_fraction_for_surface_65.setter
    def flow_fraction_for_surface_65(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 65`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 65`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_65`')
        self._data["Flow Fraction for Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `Surface 66 Name`

        Args:
            value (str): value for IDD Field `Surface 66 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_66_name`')
        self._data["Surface 66 Name"] = value

    @property
    def flow_fraction_for_surface_66(self):
        """Get flow_fraction_for_surface_66

        Returns:
            float: the value of `flow_fraction_for_surface_66` or None if not set
        """
        return self._data["Flow Fraction for Surface 66"]

    @flow_fraction_for_surface_66.setter
    def flow_fraction_for_surface_66(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 66`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 66`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_66`')
        self._data["Flow Fraction for Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `Surface 67 Name`

        Args:
            value (str): value for IDD Field `Surface 67 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_67_name`')
        self._data["Surface 67 Name"] = value

    @property
    def flow_fraction_for_surface_67(self):
        """Get flow_fraction_for_surface_67

        Returns:
            float: the value of `flow_fraction_for_surface_67` or None if not set
        """
        return self._data["Flow Fraction for Surface 67"]

    @flow_fraction_for_surface_67.setter
    def flow_fraction_for_surface_67(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 67`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 67`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_67`')
        self._data["Flow Fraction for Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `Surface 68 Name`

        Args:
            value (str): value for IDD Field `Surface 68 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_68_name`')
        self._data["Surface 68 Name"] = value

    @property
    def flow_fraction_for_surface_68(self):
        """Get flow_fraction_for_surface_68

        Returns:
            float: the value of `flow_fraction_for_surface_68` or None if not set
        """
        return self._data["Flow Fraction for Surface 68"]

    @flow_fraction_for_surface_68.setter
    def flow_fraction_for_surface_68(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 68`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 68`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_68`')
        self._data["Flow Fraction for Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `Surface 69 Name`

        Args:
            value (str): value for IDD Field `Surface 69 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_69_name`')
        self._data["Surface 69 Name"] = value

    @property
    def flow_fraction_for_surface_69(self):
        """Get flow_fraction_for_surface_69

        Returns:
            float: the value of `flow_fraction_for_surface_69` or None if not set
        """
        return self._data["Flow Fraction for Surface 69"]

    @flow_fraction_for_surface_69.setter
    def flow_fraction_for_surface_69(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 69`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 69`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_69`')
        self._data["Flow Fraction for Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `Surface 70 Name`

        Args:
            value (str): value for IDD Field `Surface 70 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_70_name`')
        self._data["Surface 70 Name"] = value

    @property
    def flow_fraction_for_surface_70(self):
        """Get flow_fraction_for_surface_70

        Returns:
            float: the value of `flow_fraction_for_surface_70` or None if not set
        """
        return self._data["Flow Fraction for Surface 70"]

    @flow_fraction_for_surface_70.setter
    def flow_fraction_for_surface_70(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 70`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 70`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_70`')
        self._data["Flow Fraction for Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `Surface 71 Name`

        Args:
            value (str): value for IDD Field `Surface 71 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_71_name`')
        self._data["Surface 71 Name"] = value

    @property
    def flow_fraction_for_surface_71(self):
        """Get flow_fraction_for_surface_71

        Returns:
            float: the value of `flow_fraction_for_surface_71` or None if not set
        """
        return self._data["Flow Fraction for Surface 71"]

    @flow_fraction_for_surface_71.setter
    def flow_fraction_for_surface_71(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 71`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 71`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_71`')
        self._data["Flow Fraction for Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `Surface 72 Name`

        Args:
            value (str): value for IDD Field `Surface 72 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_72_name`')
        self._data["Surface 72 Name"] = value

    @property
    def flow_fraction_for_surface_72(self):
        """Get flow_fraction_for_surface_72

        Returns:
            float: the value of `flow_fraction_for_surface_72` or None if not set
        """
        return self._data["Flow Fraction for Surface 72"]

    @flow_fraction_for_surface_72.setter
    def flow_fraction_for_surface_72(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 72`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 72`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_72`')
        self._data["Flow Fraction for Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `Surface 73 Name`

        Args:
            value (str): value for IDD Field `Surface 73 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_73_name`')
        self._data["Surface 73 Name"] = value

    @property
    def flow_fraction_for_surface_73(self):
        """Get flow_fraction_for_surface_73

        Returns:
            float: the value of `flow_fraction_for_surface_73` or None if not set
        """
        return self._data["Flow Fraction for Surface 73"]

    @flow_fraction_for_surface_73.setter
    def flow_fraction_for_surface_73(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 73`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 73`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_73`')
        self._data["Flow Fraction for Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `Surface 74 Name`

        Args:
            value (str): value for IDD Field `Surface 74 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_74_name`')
        self._data["Surface 74 Name"] = value

    @property
    def flow_fraction_for_surface_74(self):
        """Get flow_fraction_for_surface_74

        Returns:
            float: the value of `flow_fraction_for_surface_74` or None if not set
        """
        return self._data["Flow Fraction for Surface 74"]

    @flow_fraction_for_surface_74.setter
    def flow_fraction_for_surface_74(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 74`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 74`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_74`')
        self._data["Flow Fraction for Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `Surface 75 Name`

        Args:
            value (str): value for IDD Field `Surface 75 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_75_name`')
        self._data["Surface 75 Name"] = value

    @property
    def flow_fraction_for_surface_75(self):
        """Get flow_fraction_for_surface_75

        Returns:
            float: the value of `flow_fraction_for_surface_75` or None if not set
        """
        return self._data["Flow Fraction for Surface 75"]

    @flow_fraction_for_surface_75.setter
    def flow_fraction_for_surface_75(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 75`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 75`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_75`')
        self._data["Flow Fraction for Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `Surface 76 Name`

        Args:
            value (str): value for IDD Field `Surface 76 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_76_name`')
        self._data["Surface 76 Name"] = value

    @property
    def flow_fraction_for_surface_76(self):
        """Get flow_fraction_for_surface_76

        Returns:
            float: the value of `flow_fraction_for_surface_76` or None if not set
        """
        return self._data["Flow Fraction for Surface 76"]

    @flow_fraction_for_surface_76.setter
    def flow_fraction_for_surface_76(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 76`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 76`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_76`')
        self._data["Flow Fraction for Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `Surface 77 Name`

        Args:
            value (str): value for IDD Field `Surface 77 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_77_name`')
        self._data["Surface 77 Name"] = value

    @property
    def flow_fraction_for_surface_77(self):
        """Get flow_fraction_for_surface_77

        Returns:
            float: the value of `flow_fraction_for_surface_77` or None if not set
        """
        return self._data["Flow Fraction for Surface 77"]

    @flow_fraction_for_surface_77.setter
    def flow_fraction_for_surface_77(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 77`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 77`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_77`')
        self._data["Flow Fraction for Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `Surface 78 Name`

        Args:
            value (str): value for IDD Field `Surface 78 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_78_name`')
        self._data["Surface 78 Name"] = value

    @property
    def flow_fraction_for_surface_78(self):
        """Get flow_fraction_for_surface_78

        Returns:
            float: the value of `flow_fraction_for_surface_78` or None if not set
        """
        return self._data["Flow Fraction for Surface 78"]

    @flow_fraction_for_surface_78.setter
    def flow_fraction_for_surface_78(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 78`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 78`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_78`')
        self._data["Flow Fraction for Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `Surface 79 Name`

        Args:
            value (str): value for IDD Field `Surface 79 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_79_name`')
        self._data["Surface 79 Name"] = value

    @property
    def flow_fraction_for_surface_79(self):
        """Get flow_fraction_for_surface_79

        Returns:
            float: the value of `flow_fraction_for_surface_79` or None if not set
        """
        return self._data["Flow Fraction for Surface 79"]

    @flow_fraction_for_surface_79.setter
    def flow_fraction_for_surface_79(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 79`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 79`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_79`')
        self._data["Flow Fraction for Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `Surface 80 Name`

        Args:
            value (str): value for IDD Field `Surface 80 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_80_name`')
        self._data["Surface 80 Name"] = value

    @property
    def flow_fraction_for_surface_80(self):
        """Get flow_fraction_for_surface_80

        Returns:
            float: the value of `flow_fraction_for_surface_80` or None if not set
        """
        return self._data["Flow Fraction for Surface 80"]

    @flow_fraction_for_surface_80.setter
    def flow_fraction_for_surface_80(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 80`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 80`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_80`')
        self._data["Flow Fraction for Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `Surface 81 Name`

        Args:
            value (str): value for IDD Field `Surface 81 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_81_name`')
        self._data["Surface 81 Name"] = value

    @property
    def flow_fraction_for_surface_81(self):
        """Get flow_fraction_for_surface_81

        Returns:
            float: the value of `flow_fraction_for_surface_81` or None if not set
        """
        return self._data["Flow Fraction for Surface 81"]

    @flow_fraction_for_surface_81.setter
    def flow_fraction_for_surface_81(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 81`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 81`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_81`')
        self._data["Flow Fraction for Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `Surface 82 Name`

        Args:
            value (str): value for IDD Field `Surface 82 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_82_name`')
        self._data["Surface 82 Name"] = value

    @property
    def flow_fraction_for_surface_82(self):
        """Get flow_fraction_for_surface_82

        Returns:
            float: the value of `flow_fraction_for_surface_82` or None if not set
        """
        return self._data["Flow Fraction for Surface 82"]

    @flow_fraction_for_surface_82.setter
    def flow_fraction_for_surface_82(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 82`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 82`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_82`')
        self._data["Flow Fraction for Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `Surface 83 Name`

        Args:
            value (str): value for IDD Field `Surface 83 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_83_name`')
        self._data["Surface 83 Name"] = value

    @property
    def flow_fraction_for_surface_83(self):
        """Get flow_fraction_for_surface_83

        Returns:
            float: the value of `flow_fraction_for_surface_83` or None if not set
        """
        return self._data["Flow Fraction for Surface 83"]

    @flow_fraction_for_surface_83.setter
    def flow_fraction_for_surface_83(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 83`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 83`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_83`')
        self._data["Flow Fraction for Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `Surface 84 Name`

        Args:
            value (str): value for IDD Field `Surface 84 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_84_name`')
        self._data["Surface 84 Name"] = value

    @property
    def flow_fraction_for_surface_84(self):
        """Get flow_fraction_for_surface_84

        Returns:
            float: the value of `flow_fraction_for_surface_84` or None if not set
        """
        return self._data["Flow Fraction for Surface 84"]

    @flow_fraction_for_surface_84.setter
    def flow_fraction_for_surface_84(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 84`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 84`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_84`')
        self._data["Flow Fraction for Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `Surface 85 Name`

        Args:
            value (str): value for IDD Field `Surface 85 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_85_name`')
        self._data["Surface 85 Name"] = value

    @property
    def flow_fraction_for_surface_85(self):
        """Get flow_fraction_for_surface_85

        Returns:
            float: the value of `flow_fraction_for_surface_85` or None if not set
        """
        return self._data["Flow Fraction for Surface 85"]

    @flow_fraction_for_surface_85.setter
    def flow_fraction_for_surface_85(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 85`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 85`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_85`')
        self._data["Flow Fraction for Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `Surface 86 Name`

        Args:
            value (str): value for IDD Field `Surface 86 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_86_name`')
        self._data["Surface 86 Name"] = value

    @property
    def flow_fraction_for_surface_86(self):
        """Get flow_fraction_for_surface_86

        Returns:
            float: the value of `flow_fraction_for_surface_86` or None if not set
        """
        return self._data["Flow Fraction for Surface 86"]

    @flow_fraction_for_surface_86.setter
    def flow_fraction_for_surface_86(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 86`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 86`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_86`')
        self._data["Flow Fraction for Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `Surface 87 Name`

        Args:
            value (str): value for IDD Field `Surface 87 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_87_name`')
        self._data["Surface 87 Name"] = value

    @property
    def flow_fraction_for_surface_87(self):
        """Get flow_fraction_for_surface_87

        Returns:
            float: the value of `flow_fraction_for_surface_87` or None if not set
        """
        return self._data["Flow Fraction for Surface 87"]

    @flow_fraction_for_surface_87.setter
    def flow_fraction_for_surface_87(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 87`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 87`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_87`')
        self._data["Flow Fraction for Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `Surface 88 Name`

        Args:
            value (str): value for IDD Field `Surface 88 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_88_name`')
        self._data["Surface 88 Name"] = value

    @property
    def flow_fraction_for_surface_88(self):
        """Get flow_fraction_for_surface_88

        Returns:
            float: the value of `flow_fraction_for_surface_88` or None if not set
        """
        return self._data["Flow Fraction for Surface 88"]

    @flow_fraction_for_surface_88.setter
    def flow_fraction_for_surface_88(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 88`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 88`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_88`')
        self._data["Flow Fraction for Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `Surface 89 Name`

        Args:
            value (str): value for IDD Field `Surface 89 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_89_name`')
        self._data["Surface 89 Name"] = value

    @property
    def flow_fraction_for_surface_89(self):
        """Get flow_fraction_for_surface_89

        Returns:
            float: the value of `flow_fraction_for_surface_89` or None if not set
        """
        return self._data["Flow Fraction for Surface 89"]

    @flow_fraction_for_surface_89.setter
    def flow_fraction_for_surface_89(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 89`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 89`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_89`')
        self._data["Flow Fraction for Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `Surface 90 Name`

        Args:
            value (str): value for IDD Field `Surface 90 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_90_name`')
        self._data["Surface 90 Name"] = value

    @property
    def flow_fraction_for_surface_90(self):
        """Get flow_fraction_for_surface_90

        Returns:
            float: the value of `flow_fraction_for_surface_90` or None if not set
        """
        return self._data["Flow Fraction for Surface 90"]

    @flow_fraction_for_surface_90.setter
    def flow_fraction_for_surface_90(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 90`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 90`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_90`')
        self._data["Flow Fraction for Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `Surface 91 Name`

        Args:
            value (str): value for IDD Field `Surface 91 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_91_name`')
        self._data["Surface 91 Name"] = value

    @property
    def flow_fraction_for_surface_91(self):
        """Get flow_fraction_for_surface_91

        Returns:
            float: the value of `flow_fraction_for_surface_91` or None if not set
        """
        return self._data["Flow Fraction for Surface 91"]

    @flow_fraction_for_surface_91.setter
    def flow_fraction_for_surface_91(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 91`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 91`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_91`')
        self._data["Flow Fraction for Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `Surface 92 Name`

        Args:
            value (str): value for IDD Field `Surface 92 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_92_name`')
        self._data["Surface 92 Name"] = value

    @property
    def flow_fraction_for_surface_92(self):
        """Get flow_fraction_for_surface_92

        Returns:
            float: the value of `flow_fraction_for_surface_92` or None if not set
        """
        return self._data["Flow Fraction for Surface 92"]

    @flow_fraction_for_surface_92.setter
    def flow_fraction_for_surface_92(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 92`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 92`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_92`')
        self._data["Flow Fraction for Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `Surface 93 Name`

        Args:
            value (str): value for IDD Field `Surface 93 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_93_name`')
        self._data["Surface 93 Name"] = value

    @property
    def flow_fraction_for_surface_93(self):
        """Get flow_fraction_for_surface_93

        Returns:
            float: the value of `flow_fraction_for_surface_93` or None if not set
        """
        return self._data["Flow Fraction for Surface 93"]

    @flow_fraction_for_surface_93.setter
    def flow_fraction_for_surface_93(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 93`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 93`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_93`')
        self._data["Flow Fraction for Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `Surface 94 Name`

        Args:
            value (str): value for IDD Field `Surface 94 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_94_name`')
        self._data["Surface 94 Name"] = value

    @property
    def flow_fraction_for_surface_94(self):
        """Get flow_fraction_for_surface_94

        Returns:
            float: the value of `flow_fraction_for_surface_94` or None if not set
        """
        return self._data["Flow Fraction for Surface 94"]

    @flow_fraction_for_surface_94.setter
    def flow_fraction_for_surface_94(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 94`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 94`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_94`')
        self._data["Flow Fraction for Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `Surface 95 Name`

        Args:
            value (str): value for IDD Field `Surface 95 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_95_name`')
        self._data["Surface 95 Name"] = value

    @property
    def flow_fraction_for_surface_95(self):
        """Get flow_fraction_for_surface_95

        Returns:
            float: the value of `flow_fraction_for_surface_95` or None if not set
        """
        return self._data["Flow Fraction for Surface 95"]

    @flow_fraction_for_surface_95.setter
    def flow_fraction_for_surface_95(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 95`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 95`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_95`')
        self._data["Flow Fraction for Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `Surface 96 Name`

        Args:
            value (str): value for IDD Field `Surface 96 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_96_name`')
        self._data["Surface 96 Name"] = value

    @property
    def flow_fraction_for_surface_96(self):
        """Get flow_fraction_for_surface_96

        Returns:
            float: the value of `flow_fraction_for_surface_96` or None if not set
        """
        return self._data["Flow Fraction for Surface 96"]

    @flow_fraction_for_surface_96.setter
    def flow_fraction_for_surface_96(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 96`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 96`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_96`')
        self._data["Flow Fraction for Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `Surface 97 Name`

        Args:
            value (str): value for IDD Field `Surface 97 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_97_name`')
        self._data["Surface 97 Name"] = value

    @property
    def flow_fraction_for_surface_97(self):
        """Get flow_fraction_for_surface_97

        Returns:
            float: the value of `flow_fraction_for_surface_97` or None if not set
        """
        return self._data["Flow Fraction for Surface 97"]

    @flow_fraction_for_surface_97.setter
    def flow_fraction_for_surface_97(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 97`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 97`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_97`')
        self._data["Flow Fraction for Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `Surface 98 Name`

        Args:
            value (str): value for IDD Field `Surface 98 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_98_name`')
        self._data["Surface 98 Name"] = value

    @property
    def flow_fraction_for_surface_98(self):
        """Get flow_fraction_for_surface_98

        Returns:
            float: the value of `flow_fraction_for_surface_98` or None if not set
        """
        return self._data["Flow Fraction for Surface 98"]

    @flow_fraction_for_surface_98.setter
    def flow_fraction_for_surface_98(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 98`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 98`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_98`')
        self._data["Flow Fraction for Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `Surface 99 Name`

        Args:
            value (str): value for IDD Field `Surface 99 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_99_name`')
        self._data["Surface 99 Name"] = value

    @property
    def flow_fraction_for_surface_99(self):
        """Get flow_fraction_for_surface_99

        Returns:
            float: the value of `flow_fraction_for_surface_99` or None if not set
        """
        return self._data["Flow Fraction for Surface 99"]

    @flow_fraction_for_surface_99.setter
    def flow_fraction_for_surface_99(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 99`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 99`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_99`')
        self._data["Flow Fraction for Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `Surface 100 Name`

        Args:
            value (str): value for IDD Field `Surface 100 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_100_name`')
        self._data["Surface 100 Name"] = value

    @property
    def flow_fraction_for_surface_100(self):
        """Get flow_fraction_for_surface_100

        Returns:
            float: the value of `flow_fraction_for_surface_100` or None if not set
        """
        return self._data["Flow Fraction for Surface 100"]

    @flow_fraction_for_surface_100.setter
    def flow_fraction_for_surface_100(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction for Surface 100`

        Args:
            value (float): value for IDD Field `Flow Fraction for Surface 100`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `flow_fraction_for_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_100`')
        self._data["Flow Fraction for Surface 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacHighTemperatureRadiant(object):
    """ Corresponds to IDD object `ZoneHVAC:HighTemperatureRadiant`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:HighTemperatureRadiant"
    field_count = 216
    required_fields = ["Name", "Zone Name", "Heating Design Capacity Method", "Fuel Type", "Combustion Efficiency", "Fraction of Input Converted to Radiant Energy", "Fraction of Input Converted to Latent Energy", "Fraction of Input that Is Lost", "Heating Throttling Range"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:HighTemperatureRadiant`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Fuel Type"] = None
        self._data["Combustion Efficiency"] = None
        self._data["Fraction of Input Converted to Radiant Energy"] = None
        self._data["Fraction of Input Converted to Latent Energy"] = None
        self._data["Fraction of Input that Is Lost"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Throttling Range"] = None
        self._data["Heating Setpoint Temperature Schedule Name"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.combustion_efficiency = None
        else:
            self.combustion_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_input_converted_to_radiant_energy = None
        else:
            self.fraction_of_input_converted_to_radiant_energy = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_input_converted_to_latent_energy = None
        else:
            self.fraction_of_input_converted_to_latent_energy = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_input_that_is_lost = None
        else:
            self.fraction_of_input_that_is_lost = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_throttling_range = None
        else:
            self.heating_throttling_range = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_setpoint_temperature_schedule_name = None
        else:
            self.heating_setpoint_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `Heating Design Capacity Method`
        Enter the method used to determine the maximum heating power input capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `Heating Design Capacity Method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_design_capacity_method`')
            vals = {}
            vals["heatingdesigncapacity"] = "HeatingDesignCapacity"
            vals["capacityperfloorarea"] = "CapacityPerFloorArea"
            vals["fractionofautosizedheatingcapacity"] = "FractionOfAutosizedHeatingCapacity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_design_capacity_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_design_capacity_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Heating Design Capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Design Capacity`
                Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `heating_design_capacity`'.format(value))
                    self._data["Heating Design Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')
        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `Heating Design Capacity Per Floor Area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `Heating Design Capacity Per Floor Area`
                Units: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')
        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Autosized Heating Design Capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `Fraction of Autosized Heating Design Capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')
        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`
        Natural gas or electricity

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - Electricity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["electricity"] = "Electricity"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def combustion_efficiency(self):
        """Get combustion_efficiency

        Returns:
            float: the value of `combustion_efficiency` or None if not set
        """
        return self._data["Combustion Efficiency"]

    @combustion_efficiency.setter
    def combustion_efficiency(self, value=0.9):
        """  Corresponds to IDD Field `Combustion Efficiency`
        Not used for non-gas radiant heaters

        Args:
            value (float): value for IDD Field `Combustion Efficiency`
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `combustion_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `combustion_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `combustion_efficiency`')
        self._data["Combustion Efficiency"] = value

    @property
    def fraction_of_input_converted_to_radiant_energy(self):
        """Get fraction_of_input_converted_to_radiant_energy

        Returns:
            float: the value of `fraction_of_input_converted_to_radiant_energy` or None if not set
        """
        return self._data["Fraction of Input Converted to Radiant Energy"]

    @fraction_of_input_converted_to_radiant_energy.setter
    def fraction_of_input_converted_to_radiant_energy(self, value=0.7):
        """  Corresponds to IDD Field `Fraction of Input Converted to Radiant Energy`
        Radiant+latent+lost fractions must sum to 1 or less, remainder is considered convective heat

        Args:
            value (float): value for IDD Field `Fraction of Input Converted to Radiant Energy`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_input_converted_to_radiant_energy`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_converted_to_radiant_energy`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_converted_to_radiant_energy`')
        self._data["Fraction of Input Converted to Radiant Energy"] = value

    @property
    def fraction_of_input_converted_to_latent_energy(self):
        """Get fraction_of_input_converted_to_latent_energy

        Returns:
            float: the value of `fraction_of_input_converted_to_latent_energy` or None if not set
        """
        return self._data["Fraction of Input Converted to Latent Energy"]

    @fraction_of_input_converted_to_latent_energy.setter
    def fraction_of_input_converted_to_latent_energy(self, value=0.0):
        """  Corresponds to IDD Field `Fraction of Input Converted to Latent Energy`

        Args:
            value (float): value for IDD Field `Fraction of Input Converted to Latent Energy`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_input_converted_to_latent_energy`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_converted_to_latent_energy`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_converted_to_latent_energy`')
        self._data["Fraction of Input Converted to Latent Energy"] = value

    @property
    def fraction_of_input_that_is_lost(self):
        """Get fraction_of_input_that_is_lost

        Returns:
            float: the value of `fraction_of_input_that_is_lost` or None if not set
        """
        return self._data["Fraction of Input that Is Lost"]

    @fraction_of_input_that_is_lost.setter
    def fraction_of_input_that_is_lost(self, value=0.0):
        """  Corresponds to IDD Field `Fraction of Input that Is Lost`
        Fraction of input vented to outdoor environment

        Args:
            value (float): value for IDD Field `Fraction of Input that Is Lost`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_input_that_is_lost`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_that_is_lost`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_that_is_lost`')
        self._data["Fraction of Input that Is Lost"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="OperativeTemperature"):
        """  Corresponds to IDD Field `Temperature Control Type`
        Temperature type used to control unit

        Args:
            value (str): value for IDD Field `Temperature Control Type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - MeanAirTemperatureSetpoint
                      - MeanRadiantTemperatureSetpoint
                      - OperativeTemperatureSetpoint
                Default value: OperativeTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_control_type`')
            vals = {}
            vals["meanairtemperature"] = "MeanAirTemperature"
            vals["meanradianttemperature"] = "MeanRadiantTemperature"
            vals["operativetemperature"] = "OperativeTemperature"
            vals["meanairtemperaturesetpoint"] = "MeanAirTemperatureSetpoint"
            vals["meanradianttemperaturesetpoint"] = "MeanRadiantTemperatureSetpoint"
            vals["operativetemperaturesetpoint"] = "OperativeTemperatureSetpoint"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Control Type"] = value

    @property
    def heating_throttling_range(self):
        """Get heating_throttling_range

        Returns:
            float: the value of `heating_throttling_range` or None if not set
        """
        return self._data["Heating Throttling Range"]

    @heating_throttling_range.setter
    def heating_throttling_range(self, value=2.0):
        """  Corresponds to IDD Field `Heating Throttling Range`

        Args:
            value (float): value for IDD Field `Heating Throttling Range`
                Units: deltaC
                Default value: 2.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_throttling_range`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_throttling_range`')
        self._data["Heating Throttling Range"] = value

    @property
    def heating_setpoint_temperature_schedule_name(self):
        """Get heating_setpoint_temperature_schedule_name

        Returns:
            str: the value of `heating_setpoint_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Setpoint Temperature Schedule Name"]

    @heating_setpoint_temperature_schedule_name.setter
    def heating_setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Setpoint Temperature Schedule Name`
        This setpoint is an "operative temperature" setpoint

        Args:
            value (str): value for IDD Field `Heating Setpoint Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_setpoint_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_setpoint_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_setpoint_temperature_schedule_name`')
        self._data["Heating Setpoint Temperature Schedule Name"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy Incident on People`
        This will affect thermal comfort but from an energy balance standpoint this value
        gets added to the convective gains from the radiant heater

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy Incident on People`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 1`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 2`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 3`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 4`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 5`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 6`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 7`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 8`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 9`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 10`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `Surface 11 Name`

        Args:
            value (str): value for IDD Field `Surface 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_11_name`')
        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 11`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `Surface 12 Name`

        Args:
            value (str): value for IDD Field `Surface 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_12_name`')
        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 12`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `Surface 13 Name`

        Args:
            value (str): value for IDD Field `Surface 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_13_name`')
        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 13`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `Surface 14 Name`

        Args:
            value (str): value for IDD Field `Surface 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_14_name`')
        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 14`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `Surface 15 Name`

        Args:
            value (str): value for IDD Field `Surface 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_15_name`')
        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 15`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `Surface 16 Name`

        Args:
            value (str): value for IDD Field `Surface 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_16_name`')
        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 16`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `Surface 17 Name`

        Args:
            value (str): value for IDD Field `Surface 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_17_name`')
        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 17`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `Surface 18 Name`

        Args:
            value (str): value for IDD Field `Surface 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_18_name`')
        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 18`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `Surface 19 Name`

        Args:
            value (str): value for IDD Field `Surface 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_19_name`')
        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 19`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `Surface 20 Name`

        Args:
            value (str): value for IDD Field `Surface 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_20_name`')
        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 20`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `Surface 21 Name`

        Args:
            value (str): value for IDD Field `Surface 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_21_name`')
        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 21`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `Surface 22 Name`

        Args:
            value (str): value for IDD Field `Surface 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_22_name`')
        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 22`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `Surface 23 Name`

        Args:
            value (str): value for IDD Field `Surface 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_23_name`')
        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 23`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `Surface 24 Name`

        Args:
            value (str): value for IDD Field `Surface 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_24_name`')
        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 24`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `Surface 25 Name`

        Args:
            value (str): value for IDD Field `Surface 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_25_name`')
        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 25`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `Surface 26 Name`

        Args:
            value (str): value for IDD Field `Surface 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_26_name`')
        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 26`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `Surface 27 Name`

        Args:
            value (str): value for IDD Field `Surface 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_27_name`')
        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 27`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `Surface 28 Name`

        Args:
            value (str): value for IDD Field `Surface 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_28_name`')
        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 28`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `Surface 29 Name`

        Args:
            value (str): value for IDD Field `Surface 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_29_name`')
        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 29`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `Surface 30 Name`

        Args:
            value (str): value for IDD Field `Surface 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_30_name`')
        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 30`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `Surface 31 Name`

        Args:
            value (str): value for IDD Field `Surface 31 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_31_name`')
        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 31`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `Surface 32 Name`

        Args:
            value (str): value for IDD Field `Surface 32 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_32_name`')
        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 32`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `Surface 33 Name`

        Args:
            value (str): value for IDD Field `Surface 33 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_33_name`')
        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 33`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `Surface 34 Name`

        Args:
            value (str): value for IDD Field `Surface 34 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_34_name`')
        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 34`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `Surface 35 Name`

        Args:
            value (str): value for IDD Field `Surface 35 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_35_name`')
        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 35`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `Surface 36 Name`

        Args:
            value (str): value for IDD Field `Surface 36 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_36_name`')
        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 36`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `Surface 37 Name`

        Args:
            value (str): value for IDD Field `Surface 37 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_37_name`')
        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 37`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `Surface 38 Name`

        Args:
            value (str): value for IDD Field `Surface 38 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_38_name`')
        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 38`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `Surface 39 Name`

        Args:
            value (str): value for IDD Field `Surface 39 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_39_name`')
        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 39`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `Surface 40 Name`

        Args:
            value (str): value for IDD Field `Surface 40 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_40_name`')
        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 40`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `Surface 41 Name`

        Args:
            value (str): value for IDD Field `Surface 41 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_41_name`')
        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 41`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `Surface 42 Name`

        Args:
            value (str): value for IDD Field `Surface 42 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_42_name`')
        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 42`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `Surface 43 Name`

        Args:
            value (str): value for IDD Field `Surface 43 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_43_name`')
        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 43`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `Surface 44 Name`

        Args:
            value (str): value for IDD Field `Surface 44 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_44_name`')
        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 44`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `Surface 45 Name`

        Args:
            value (str): value for IDD Field `Surface 45 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_45_name`')
        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 45`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `Surface 46 Name`

        Args:
            value (str): value for IDD Field `Surface 46 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_46_name`')
        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 46`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `Surface 47 Name`

        Args:
            value (str): value for IDD Field `Surface 47 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_47_name`')
        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 47`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `Surface 48 Name`

        Args:
            value (str): value for IDD Field `Surface 48 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_48_name`')
        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 48`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `Surface 49 Name`

        Args:
            value (str): value for IDD Field `Surface 49 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_49_name`')
        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 49`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `Surface 50 Name`

        Args:
            value (str): value for IDD Field `Surface 50 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_50_name`')
        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 50`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `Surface 51 Name`

        Args:
            value (str): value for IDD Field `Surface 51 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_51_name`')
        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 51`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `Surface 52 Name`

        Args:
            value (str): value for IDD Field `Surface 52 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_52_name`')
        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 52`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `Surface 53 Name`

        Args:
            value (str): value for IDD Field `Surface 53 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_53_name`')
        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 53`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `Surface 54 Name`

        Args:
            value (str): value for IDD Field `Surface 54 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_54_name`')
        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 54`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `Surface 55 Name`

        Args:
            value (str): value for IDD Field `Surface 55 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_55_name`')
        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 55`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `Surface 56 Name`

        Args:
            value (str): value for IDD Field `Surface 56 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_56_name`')
        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 56`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `Surface 57 Name`

        Args:
            value (str): value for IDD Field `Surface 57 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_57_name`')
        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 57`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `Surface 58 Name`

        Args:
            value (str): value for IDD Field `Surface 58 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_58_name`')
        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 58`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `Surface 59 Name`

        Args:
            value (str): value for IDD Field `Surface 59 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_59_name`')
        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 59`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `Surface 60 Name`

        Args:
            value (str): value for IDD Field `Surface 60 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_60_name`')
        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 60`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `Surface 61 Name`

        Args:
            value (str): value for IDD Field `Surface 61 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_61_name`')
        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 61`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `Surface 62 Name`

        Args:
            value (str): value for IDD Field `Surface 62 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_62_name`')
        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 62`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `Surface 63 Name`

        Args:
            value (str): value for IDD Field `Surface 63 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_63_name`')
        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 63`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `Surface 64 Name`

        Args:
            value (str): value for IDD Field `Surface 64 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_64_name`')
        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 64`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `Surface 65 Name`

        Args:
            value (str): value for IDD Field `Surface 65 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_65_name`')
        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 65`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `Surface 66 Name`

        Args:
            value (str): value for IDD Field `Surface 66 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_66_name`')
        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 66`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `Surface 67 Name`

        Args:
            value (str): value for IDD Field `Surface 67 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_67_name`')
        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 67`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `Surface 68 Name`

        Args:
            value (str): value for IDD Field `Surface 68 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_68_name`')
        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 68`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `Surface 69 Name`

        Args:
            value (str): value for IDD Field `Surface 69 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_69_name`')
        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 69`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `Surface 70 Name`

        Args:
            value (str): value for IDD Field `Surface 70 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_70_name`')
        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 70`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `Surface 71 Name`

        Args:
            value (str): value for IDD Field `Surface 71 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_71_name`')
        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 71`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `Surface 72 Name`

        Args:
            value (str): value for IDD Field `Surface 72 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_72_name`')
        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 72`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `Surface 73 Name`

        Args:
            value (str): value for IDD Field `Surface 73 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_73_name`')
        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 73`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `Surface 74 Name`

        Args:
            value (str): value for IDD Field `Surface 74 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_74_name`')
        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 74`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `Surface 75 Name`

        Args:
            value (str): value for IDD Field `Surface 75 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_75_name`')
        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 75`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `Surface 76 Name`

        Args:
            value (str): value for IDD Field `Surface 76 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_76_name`')
        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 76`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `Surface 77 Name`

        Args:
            value (str): value for IDD Field `Surface 77 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_77_name`')
        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 77`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `Surface 78 Name`

        Args:
            value (str): value for IDD Field `Surface 78 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_78_name`')
        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 78`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `Surface 79 Name`

        Args:
            value (str): value for IDD Field `Surface 79 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_79_name`')
        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 79`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `Surface 80 Name`

        Args:
            value (str): value for IDD Field `Surface 80 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_80_name`')
        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 80`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `Surface 81 Name`

        Args:
            value (str): value for IDD Field `Surface 81 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_81_name`')
        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 81`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `Surface 82 Name`

        Args:
            value (str): value for IDD Field `Surface 82 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_82_name`')
        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 82`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `Surface 83 Name`

        Args:
            value (str): value for IDD Field `Surface 83 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_83_name`')
        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 83`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `Surface 84 Name`

        Args:
            value (str): value for IDD Field `Surface 84 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_84_name`')
        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 84`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `Surface 85 Name`

        Args:
            value (str): value for IDD Field `Surface 85 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_85_name`')
        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 85`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `Surface 86 Name`

        Args:
            value (str): value for IDD Field `Surface 86 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_86_name`')
        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 86`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `Surface 87 Name`

        Args:
            value (str): value for IDD Field `Surface 87 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_87_name`')
        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 87`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `Surface 88 Name`

        Args:
            value (str): value for IDD Field `Surface 88 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_88_name`')
        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 88`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `Surface 89 Name`

        Args:
            value (str): value for IDD Field `Surface 89 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_89_name`')
        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 89`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `Surface 90 Name`

        Args:
            value (str): value for IDD Field `Surface 90 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_90_name`')
        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 90`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `Surface 91 Name`

        Args:
            value (str): value for IDD Field `Surface 91 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_91_name`')
        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 91`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `Surface 92 Name`

        Args:
            value (str): value for IDD Field `Surface 92 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_92_name`')
        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 92`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `Surface 93 Name`

        Args:
            value (str): value for IDD Field `Surface 93 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_93_name`')
        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 93`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `Surface 94 Name`

        Args:
            value (str): value for IDD Field `Surface 94 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_94_name`')
        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 94`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `Surface 95 Name`

        Args:
            value (str): value for IDD Field `Surface 95 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_95_name`')
        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 95`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `Surface 96 Name`

        Args:
            value (str): value for IDD Field `Surface 96 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_96_name`')
        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 96`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `Surface 97 Name`

        Args:
            value (str): value for IDD Field `Surface 97 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_97_name`')
        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 97`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `Surface 98 Name`

        Args:
            value (str): value for IDD Field `Surface 98 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_98_name`')
        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 98`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `Surface 99 Name`

        Args:
            value (str): value for IDD Field `Surface 99 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_99_name`')
        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 99`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `Surface 100 Name`

        Args:
            value (str): value for IDD Field `Surface 100 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_100_name`')
        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `Fraction of Radiant Energy to Surface 100`

        Args:
            value (float): value for IDD Field `Fraction of Radiant Energy to Surface 100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
        self._data["Fraction of Radiant Energy to Surface 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacVentilatedSlab(object):
    """ Corresponds to IDD object `ZoneHVAC:VentilatedSlab`
        Ventilated slab system where outdoor air flows through hollow cores in a building
        surface (wall, ceiling, or floor).
    """
    internal_name = "ZoneHVAC:VentilatedSlab"
    field_count = 40
    required_fields = ["Name", "Zone Name", "Maximum Air Flow Rate", "Outdoor Air Control Type", "Minimum Outdoor Air Flow Rate", "Minimum Outdoor Air Schedule Name", "Maximum Outdoor Air Flow Rate", "Maximum Outdoor Air Fraction or Temperature Schedule Name", "System Configuration Type", "Temperature Control Type", "Heating High Air Temperature Schedule Name", "Heating Low Air Temperature Schedule Name", "Heating High Control Temperature Schedule Name", "Heating Low Control Temperature Schedule Name", "Cooling High Air Temperature Schedule Name", "Cooling Low Air Temperature Schedule Name", "Cooling High Control Temperature Schedule Name", "Cooling Low Control Temperature Schedule Name", "Return Air Node Name", "Slab In Node Name", "Outdoor Air Node Name", "Relief Air Node Name", "Outdoor Air Mixer Outlet Node Name", "Fan Outlet Node Name", "Fan Name", "Coil Option Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:VentilatedSlab`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Maximum Air Flow Rate"] = None
        self._data["Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = None
        self._data["System Configuration Type"] = None
        self._data["Hollow Core Inside Diameter"] = None
        self._data["Hollow Core Length"] = None
        self._data["Number of Cores"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating High Air Temperature Schedule Name"] = None
        self._data["Heating Low Air Temperature Schedule Name"] = None
        self._data["Heating High Control Temperature Schedule Name"] = None
        self._data["Heating Low Control Temperature Schedule Name"] = None
        self._data["Cooling High Air Temperature Schedule Name"] = None
        self._data["Cooling Low Air Temperature Schedule Name"] = None
        self._data["Cooling High Control Temperature Schedule Name"] = None
        self._data["Cooling Low Control Temperature Schedule Name"] = None
        self._data["Return Air Node Name"] = None
        self._data["Slab In Node Name"] = None
        self._data["Zone Supply Air Node Name"] = None
        self._data["Outdoor Air Node Name"] = None
        self._data["Relief Air Node Name"] = None
        self._data["Outdoor Air Mixer Outlet Node Name"] = None
        self._data["Fan Outlet Node Name"] = None
        self._data["Fan Name"] = None
        self._data["Coil Option Type"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Hot Water or Steam Inlet Node Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Cold Water Inlet Node Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_air_flow_rate = None
        else:
            self.maximum_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_air_control_type = None
        else:
            self.outdoor_air_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = None
        else:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.system_configuration_type = None
        else:
            self.system_configuration_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hollow_core_inside_diameter = None
        else:
            self.hollow_core_inside_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hollow_core_length = None
        else:
            self.hollow_core_length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_cores = None
        else:
            self.number_of_cores = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_high_air_temperature_schedule_name = None
        else:
            self.heating_high_air_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_low_air_temperature_schedule_name = None
        else:
            self.heating_low_air_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_high_control_temperature_schedule_name = None
        else:
            self.heating_high_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_low_control_temperature_schedule_name = None
        else:
            self.heating_low_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_high_air_temperature_schedule_name = None
        else:
            self.cooling_high_air_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_low_air_temperature_schedule_name = None
        else:
            self.cooling_low_air_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_high_control_temperature_schedule_name = None
        else:
            self.cooling_high_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_low_control_temperature_schedule_name = None
        else:
            self.cooling_low_control_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.return_air_node_name = None
        else:
            self.return_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_in_node_name = None
        else:
            self.slab_in_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_supply_air_node_name = None
        else:
            self.zone_supply_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_air_node_name = None
        else:
            self.outdoor_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.relief_air_node_name = None
        else:
            self.relief_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_outlet_node_name = None
        else:
            self.outdoor_air_mixer_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_outlet_node_name = None
        else:
            self.fan_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_name = None
        else:
            self.fan_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_option_type = None
        else:
            self.coil_option_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_or_steam_inlet_node_name = None
        else:
            self.hot_water_or_steam_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cold_water_inlet_node_name = None
        else:
            self.cold_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        (name of zone system is serving)

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `Surface Name or Radiant Surface Group Name`
        (name of surface system is embedded in) or list of surfaces

        Args:
            value (str): value for IDD Field `Surface Name or Radiant Surface Group Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_name_or_radiant_surface_group_name`')
        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def maximum_air_flow_rate(self):
        """Get maximum_air_flow_rate

        Returns:
            float: the value of `maximum_air_flow_rate` or None if not set
        """
        return self._data["Maximum Air Flow Rate"]

    @maximum_air_flow_rate.setter
    def maximum_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Air Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_air_flow_rate`'.format(value))
                    self._data["Maximum Air Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_air_flow_rate`')
        self._data["Maximum Air Flow Rate"] = value

    @property
    def outdoor_air_control_type(self):
        """Get outdoor_air_control_type

        Returns:
            str: the value of `outdoor_air_control_type` or None if not set
        """
        return self._data["Outdoor Air Control Type"]

    @outdoor_air_control_type.setter
    def outdoor_air_control_type(self, value=None):
        """  Corresponds to IDD Field `Outdoor Air Control Type`

        Args:
            value (str): value for IDD Field `Outdoor Air Control Type`
                Accepted values are:
                      - VariablePercent
                      - FixedTemperature
                      - FixedAmount
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outdoor_air_control_type`')
            vals = {}
            vals["variablepercent"] = "VariablePercent"
            vals["fixedtemperature"] = "FixedTemperature"
            vals["fixedamount"] = "FixedAmount"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `outdoor_air_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `outdoor_air_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Minimum Outdoor Air Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
                    self._data["Minimum Outdoor Air Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')
        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Minimum Outdoor Air Schedule Name`

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `minimum_outdoor_air_schedule_name`')
        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Outdoor Air Flow Rate`
        schedule values multiply the minimum outdoor air flow rate

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Maximum Outdoor Air Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
                    self._data["Maximum Outdoor Air Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')
        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self):
        """Get maximum_outdoor_air_fraction_or_temperature_schedule_name

        Returns:
            str: the value of `maximum_outdoor_air_fraction_or_temperature_schedule_name` or None if not set
        """
        return self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"]

    @maximum_outdoor_air_fraction_or_temperature_schedule_name.setter
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Maximum Outdoor Air Fraction or Temperature Schedule Name`
        Note that this depends on the control type as to whether schedule values are a fraction or temperature

        Args:
            value (str): value for IDD Field `Maximum Outdoor Air Fraction or Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`')
        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = value

    @property
    def system_configuration_type(self):
        """Get system_configuration_type

        Returns:
            str: the value of `system_configuration_type` or None if not set
        """
        return self._data["System Configuration Type"]

    @system_configuration_type.setter
    def system_configuration_type(self, value="SlabOnly"):
        """  Corresponds to IDD Field `System Configuration Type`

        Args:
            value (str): value for IDD Field `System Configuration Type`
                Accepted values are:
                      - SlabOnly
                      - SlabAndZone
                      - SeriesSlabs
                Default value: SlabOnly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `system_configuration_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_configuration_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `system_configuration_type`')
            vals = {}
            vals["slabonly"] = "SlabOnly"
            vals["slabandzone"] = "SlabAndZone"
            vals["seriesslabs"] = "SeriesSlabs"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `system_configuration_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `system_configuration_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["System Configuration Type"] = value

    @property
    def hollow_core_inside_diameter(self):
        """Get hollow_core_inside_diameter

        Returns:
            float: the value of `hollow_core_inside_diameter` or None if not set
        """
        return self._data["Hollow Core Inside Diameter"]

    @hollow_core_inside_diameter.setter
    def hollow_core_inside_diameter(self, value=0.05):
        """  Corresponds to IDD Field `Hollow Core Inside Diameter`

        Args:
            value (float): value for IDD Field `Hollow Core Inside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.05
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `hollow_core_inside_diameter`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hollow_core_inside_diameter`')
        self._data["Hollow Core Inside Diameter"] = value

    @property
    def hollow_core_length(self):
        """Get hollow_core_length

        Returns:
            float: the value of `hollow_core_length` or None if not set
        """
        return self._data["Hollow Core Length"]

    @hollow_core_length.setter
    def hollow_core_length(self, value=None):
        """  Corresponds to IDD Field `Hollow Core Length`
        (length of core cavity embedded in surface)

        Args:
            value (float): value for IDD Field `Hollow Core Length`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `hollow_core_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hollow_core_length`')
        self._data["Hollow Core Length"] = value

    @property
    def number_of_cores(self):
        """Get number_of_cores

        Returns:
            float: the value of `number_of_cores` or None if not set
        """
        return self._data["Number of Cores"]

    @number_of_cores.setter
    def number_of_cores(self, value=None):
        """  Corresponds to IDD Field `Number of Cores`
        flow will be divided evenly among the cores

        Args:
            value (float): value for IDD Field `Number of Cores`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_cores`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_cores`')
        self._data["Number of Cores"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="OutdoorDryBulbTemperature"):
        """  Corresponds to IDD Field `Temperature Control Type`
        (temperature on which unit is controlled)

        Args:
            value (str): value for IDD Field `Temperature Control Type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                      - SurfaceTemperature
                      - ZoneAirDewPointTemperature
                Default value: OutdoorDryBulbTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_control_type`')
            vals = {}
            vals["meanairtemperature"] = "MeanAirTemperature"
            vals["meanradianttemperature"] = "MeanRadiantTemperature"
            vals["operativetemperature"] = "OperativeTemperature"
            vals["outdoordrybulbtemperature"] = "OutdoorDryBulbTemperature"
            vals["outdoorwetbulbtemperature"] = "OutdoorWetBulbTemperature"
            vals["surfacetemperature"] = "SurfaceTemperature"
            vals["zoneairdewpointtemperature"] = "ZoneAirDewPointTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_control_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_control_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Control Type"] = value

    @property
    def heating_high_air_temperature_schedule_name(self):
        """Get heating_high_air_temperature_schedule_name

        Returns:
            str: the value of `heating_high_air_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Air Temperature Schedule Name"]

    @heating_high_air_temperature_schedule_name.setter
    def heating_high_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating High Air Temperature Schedule Name`
        Air and control temperatures for heating work together to provide
        a linear function that determines the air temperature sent to the
        radiant system. The current control temperature (see A14) is
        compared to the high and low control temperatures at the current time.
        If the control temperature is above the high temperature, then the
        inlet air temperature is set to the low air temperature. If the
        control temperature is below the low temperature, then the inlet
        air temperature is set to the high air temperature. If the control
        temperature is between the high and low value, then the inlet air
        temperature is linearly interpolated between the low and high air
        temperature values.

        Args:
            value (str): value for IDD Field `Heating High Air Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_high_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_air_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_high_air_temperature_schedule_name`')
        self._data["Heating High Air Temperature Schedule Name"] = value

    @property
    def heating_low_air_temperature_schedule_name(self):
        """Get heating_low_air_temperature_schedule_name

        Returns:
            str: the value of `heating_low_air_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Air Temperature Schedule Name"]

    @heating_low_air_temperature_schedule_name.setter
    def heating_low_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Low Air Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Low Air Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_low_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_air_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_low_air_temperature_schedule_name`')
        self._data["Heating Low Air Temperature Schedule Name"] = value

    @property
    def heating_high_control_temperature_schedule_name(self):
        """Get heating_high_control_temperature_schedule_name

        Returns:
            str: the value of `heating_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Control Temperature Schedule Name"]

    @heating_high_control_temperature_schedule_name.setter
    def heating_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating High Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating High Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_high_control_temperature_schedule_name`')
        self._data["Heating High Control Temperature Schedule Name"] = value

    @property
    def heating_low_control_temperature_schedule_name(self):
        """Get heating_low_control_temperature_schedule_name

        Returns:
            str: the value of `heating_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Control Temperature Schedule Name"]

    @heating_low_control_temperature_schedule_name.setter
    def heating_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heating Low Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Heating Low Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_low_control_temperature_schedule_name`')
        self._data["Heating Low Control Temperature Schedule Name"] = value

    @property
    def cooling_high_air_temperature_schedule_name(self):
        """Get cooling_high_air_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_air_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Air Temperature Schedule Name"]

    @cooling_high_air_temperature_schedule_name.setter
    def cooling_high_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling High Air Temperature Schedule Name`
        See note for heating high air temperature schedule above for
        interpretation information (or see the Input/Output Reference).

        Args:
            value (str): value for IDD Field `Cooling High Air Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_high_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_air_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_high_air_temperature_schedule_name`')
        self._data["Cooling High Air Temperature Schedule Name"] = value

    @property
    def cooling_low_air_temperature_schedule_name(self):
        """Get cooling_low_air_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_air_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Air Temperature Schedule Name"]

    @cooling_low_air_temperature_schedule_name.setter
    def cooling_low_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Low Air Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling Low Air Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_low_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_air_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_low_air_temperature_schedule_name`')
        self._data["Cooling Low Air Temperature Schedule Name"] = value

    @property
    def cooling_high_control_temperature_schedule_name(self):
        """Get cooling_high_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Control Temperature Schedule Name"]

    @cooling_high_control_temperature_schedule_name.setter
    def cooling_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling High Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling High Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_high_control_temperature_schedule_name`')
        self._data["Cooling High Control Temperature Schedule Name"] = value

    @property
    def cooling_low_control_temperature_schedule_name(self):
        """Get cooling_low_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Control Temperature Schedule Name"]

    @cooling_low_control_temperature_schedule_name.setter
    def cooling_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Low Control Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Cooling Low Control Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_control_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_low_control_temperature_schedule_name`')
        self._data["Cooling Low Control Temperature Schedule Name"] = value

    @property
    def return_air_node_name(self):
        """Get return_air_node_name

        Returns:
            str: the value of `return_air_node_name` or None if not set
        """
        return self._data["Return Air Node Name"]

    @return_air_node_name.setter
    def return_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Return Air Node Name`
        This is the zone return air inlet to the ventilated slab system outdoor air mixer.
        This node is typically a zone exhaust node (do not connect to "Zone Return Air Node").

        Args:
            value (str): value for IDD Field `Return Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `return_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `return_air_node_name`')
        self._data["Return Air Node Name"] = value

    @property
    def slab_in_node_name(self):
        """Get slab_in_node_name

        Returns:
            str: the value of `slab_in_node_name` or None if not set
        """
        return self._data["Slab In Node Name"]

    @slab_in_node_name.setter
    def slab_in_node_name(self, value=None):
        """  Corresponds to IDD Field `Slab In Node Name`
        This is the node entering the slab or series of slabs after the fan and coil(s).

        Args:
            value (str): value for IDD Field `Slab In Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_in_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_in_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_in_node_name`')
        self._data["Slab In Node Name"] = value

    @property
    def zone_supply_air_node_name(self):
        """Get zone_supply_air_node_name

        Returns:
            str: the value of `zone_supply_air_node_name` or None if not set
        """
        return self._data["Zone Supply Air Node Name"]

    @zone_supply_air_node_name.setter
    def zone_supply_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Zone Supply Air Node Name`
        This is the node name exiting the slab.
        This node is typically a zone inlet node.
        Leave blank when the system configuration is SlabOnly or SeriesSlabs.

        Args:
            value (str): value for IDD Field `Zone Supply Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_supply_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_supply_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_supply_air_node_name`')
        self._data["Zone Supply Air Node Name"] = value

    @property
    def outdoor_air_node_name(self):
        """Get outdoor_air_node_name

        Returns:
            str: the value of `outdoor_air_node_name` or None if not set
        """
        return self._data["Outdoor Air Node Name"]

    @outdoor_air_node_name.setter
    def outdoor_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Outdoor Air Node Name`
        This node is the outdoor air inlet to the ventilated slab oa mixer.
        This node should also be specified in an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Outdoor Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outdoor_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outdoor_air_node_name`')
        self._data["Outdoor Air Node Name"] = value

    @property
    def relief_air_node_name(self):
        """Get relief_air_node_name

        Returns:
            str: the value of `relief_air_node_name` or None if not set
        """
        return self._data["Relief Air Node Name"]

    @relief_air_node_name.setter
    def relief_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Relief Air Node Name`
        This node is the relief air node from the ventilated slab outdoor air mixer.

        Args:
            value (str): value for IDD Field `Relief Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `relief_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `relief_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `relief_air_node_name`')
        self._data["Relief Air Node Name"] = value

    @property
    def outdoor_air_mixer_outlet_node_name(self):
        """Get outdoor_air_mixer_outlet_node_name

        Returns:
            str: the value of `outdoor_air_mixer_outlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Outlet Node Name"]

    @outdoor_air_mixer_outlet_node_name.setter
    def outdoor_air_mixer_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Outdoor Air Mixer Outlet Node Name`
        This is the node name leaving the outdoor air mixer and entering the fan and coil(s).

        Args:
            value (str): value for IDD Field `Outdoor Air Mixer Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outdoor_air_mixer_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outdoor_air_mixer_outlet_node_name`')
        self._data["Outdoor Air Mixer Outlet Node Name"] = value

    @property
    def fan_outlet_node_name(self):
        """Get fan_outlet_node_name

        Returns:
            str: the value of `fan_outlet_node_name` or None if not set
        """
        return self._data["Fan Outlet Node Name"]

    @fan_outlet_node_name.setter
    def fan_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Fan Outlet Node Name`
        This is the node name of the fan outlet.

        Args:
            value (str): value for IDD Field `Fan Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fan_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_outlet_node_name`')
        self._data["Fan Outlet Node Name"] = value

    @property
    def fan_name(self):
        """Get fan_name

        Returns:
            str: the value of `fan_name` or None if not set
        """
        return self._data["Fan Name"]

    @fan_name.setter
    def fan_name(self, value=None):
        """  Corresponds to IDD Field `Fan Name`
        Allowable fan type is Fan:ConstantVolume

        Args:
            value (str): value for IDD Field `Fan Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_name`')
        self._data["Fan Name"] = value

    @property
    def coil_option_type(self):
        """Get coil_option_type

        Returns:
            str: the value of `coil_option_type` or None if not set
        """
        return self._data["Coil Option Type"]

    @coil_option_type.setter
    def coil_option_type(self, value=None):
        """  Corresponds to IDD Field `Coil Option Type`

        Args:
            value (str): value for IDD Field `Coil Option Type`
                Accepted values are:
                      - None
                      - Heating
                      - Cooling
                      - HeatingAndCooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `coil_option_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_option_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_option_type`')
            vals = {}
            vals["none"] = "None"
            vals["heating"] = "Heating"
            vals["cooling"] = "Cooling"
            vals["heatingandcooling"] = "HeatingAndCooling"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `coil_option_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `coil_option_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Coil Option Type"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Heating Coil Object Type`

        Args:
            value (str): value for IDD Field `Heating Coil Object Type`
                Accepted values are:
                      - Coil:Heating:Water
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_coil_object_type`')
            vals = {}
            vals["coil:heating:water"] = "Coil:Heating:Water"
            vals["coil:heating:electric"] = "Coil:Heating:Electric"
            vals["coil:heating:gas"] = "Coil:Heating:Gas"
            vals["coil:heating:steam"] = "Coil:Heating:Steam"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_coil_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_coil_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `Heating Coil Name`

        Args:
            value (str): value for IDD Field `Heating Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_coil_name`')
        self._data["Heating Coil Name"] = value

    @property
    def hot_water_or_steam_inlet_node_name(self):
        """Get hot_water_or_steam_inlet_node_name

        Returns:
            str: the value of `hot_water_or_steam_inlet_node_name` or None if not set
        """
        return self._data["Hot Water or Steam Inlet Node Name"]

    @hot_water_or_steam_inlet_node_name.setter
    def hot_water_or_steam_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water or Steam Inlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water or Steam Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_or_steam_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_or_steam_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_or_steam_inlet_node_name`')
        self._data["Hot Water or Steam Inlet Node Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Object Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                Accepted values are:
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_object_type`')
            vals = {}
            vals["coil:cooling:water"] = "Coil:Cooling:Water"
            vals["coil:cooling:water:detailedgeometry"] = "Coil:Cooling:Water:DetailedGeometry"
            vals["coilsystem:cooling:water:heatexchangerassisted"] = "CoilSystem:Cooling:Water:HeatExchangerAssisted"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_coil_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `cooling_coil_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Name`

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_name`')
        self._data["Cooling Coil Name"] = value

    @property
    def cold_water_inlet_node_name(self):
        """Get cold_water_inlet_node_name

        Returns:
            str: the value of `cold_water_inlet_node_name` or None if not set
        """
        return self._data["Cold Water Inlet Node Name"]

    @cold_water_inlet_node_name.setter
    def cold_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cold Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Cold Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cold_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cold_water_inlet_node_name`')
        self._data["Cold Water Inlet Node Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `Availability Manager List Name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `Availability Manager List Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_manager_list_name`')
        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `Design Specification ZoneHVAC Sizing Object Name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `Design Specification ZoneHVAC Sizing Object Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `design_specification_zonehvac_sizing_object_name`')
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacVentilatedSlabSlabGroup(object):
    """ Corresponds to IDD object `ZoneHVAC:VentilatedSlab:SlabGroup`
        This is used to allow the coordinate control of several ventilad slab system
        surfaces. Note that the flow fractions must sum up to 1.0.
        The number of surfaces can be expanded beyond 10, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:VentilatedSlab:SlabGroup"
    field_count = 71
    required_fields = ["Name", "Zone 1 Name", "Surface 1 Name", "Core Diameter for Surface 1", "Core Length for Surface 1", "Core Numbers for Surface 1", "Slab Inlet Node Name for Surface 1", "Slab Outlet Node Name for Surface 1"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:VentilatedSlab:SlabGroup`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone 1 Name"] = None
        self._data["Surface 1 Name"] = None
        self._data["Core Diameter for Surface 1"] = None
        self._data["Core Length for Surface 1"] = None
        self._data["Core Numbers for Surface 1"] = None
        self._data["Slab Inlet Node Name for Surface 1"] = None
        self._data["Slab Outlet Node Name for Surface 1"] = None
        self._data["Zone 2 Name"] = None
        self._data["Surface 2 Name"] = None
        self._data["Core Diameter for Surface 2"] = None
        self._data["Core Length for Surface 2"] = None
        self._data["Core Numbers for Surface 2"] = None
        self._data["Slab Inlet Node Name for Surface 2"] = None
        self._data["Slab Outlet Node Name for Surface 2"] = None
        self._data["Zone 3 Name"] = None
        self._data["Surface 3 Name"] = None
        self._data["Core Diameter for Surface 3"] = None
        self._data["Core Length for Surface 3"] = None
        self._data["Core Numbers for Surface 3"] = None
        self._data["Slab Inlet Node Name for Surface 3"] = None
        self._data["Slab Outlet Node Name for Surface 3"] = None
        self._data["Zone 4 Name"] = None
        self._data["Surface 4 Name"] = None
        self._data["Core Diameter for Surface 4"] = None
        self._data["Core Length for Surface 4"] = None
        self._data["Core Numbers for Surface 4"] = None
        self._data["Slab Inlet Node Name for Surface 4"] = None
        self._data["Slab Outlet Node Name for Surface 4"] = None
        self._data["Zone 5 Name"] = None
        self._data["Surface 5 Name"] = None
        self._data["Core Diameter for Surface 5"] = None
        self._data["Core Length for Surface 5"] = None
        self._data["Core Numbers for Surface 5"] = None
        self._data["Slab Inlet Node Name for Surface 5"] = None
        self._data["Slab Outlet Node Name for Surface 5"] = None
        self._data["Zone 6 Name"] = None
        self._data["Surface 6 Name"] = None
        self._data["Core Diameter for Surface 6"] = None
        self._data["Core Length for Surface 6"] = None
        self._data["Core Numbers for Surface 6"] = None
        self._data["Slab Inlet Node Name for Surface 6"] = None
        self._data["Slab Outlet Node Name for Surface 6"] = None
        self._data["Zone 7 Name"] = None
        self._data["Surface 7 Name"] = None
        self._data["Core Diameter for Surface 7"] = None
        self._data["Core Length for Surface 7"] = None
        self._data["Core Numbers for Surface 7"] = None
        self._data["Slab Inlet Node Name for Surface 7"] = None
        self._data["Slab Outlet Node Name for Surface 7"] = None
        self._data["Zone 8 Name"] = None
        self._data["Surface 8 Name"] = None
        self._data["Core Diameter for Surface 8"] = None
        self._data["Core Length for Surface 8"] = None
        self._data["Core Numbers for Surface 8"] = None
        self._data["Slab Inlet Node Name for Surface 8"] = None
        self._data["Slab Outlet Node Name for Surface 8"] = None
        self._data["Zone 9 Name"] = None
        self._data["Surface 9 Name"] = None
        self._data["Core Diameter for Surface 9"] = None
        self._data["Core Length for Surface 9"] = None
        self._data["Core Numbers for Surface 9"] = None
        self._data["Slab Inlet Node Name for Surface 9"] = None
        self._data["Slab Outlet Node Name for Surface 9"] = None
        self._data["Zone 10 Name"] = None
        self._data["Surface 10 Name"] = None
        self._data["Core Diameter for Surface 10"] = None
        self._data["Core Length for Surface 10"] = None
        self._data["Core Numbers for Surface 10"] = None
        self._data["Slab Inlet Node Name for Surface 10"] = None
        self._data["Slab Outlet Node Name for Surface 10"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_1_name = None
        else:
            self.zone_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_1 = None
        else:
            self.core_diameter_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_1 = None
        else:
            self.core_length_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_1 = None
        else:
            self.core_numbers_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_1 = None
        else:
            self.slab_inlet_node_name_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_1 = None
        else:
            self.slab_outlet_node_name_for_surface_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_2_name = None
        else:
            self.zone_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_2 = None
        else:
            self.core_diameter_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_2 = None
        else:
            self.core_length_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_2 = None
        else:
            self.core_numbers_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_2 = None
        else:
            self.slab_inlet_node_name_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_2 = None
        else:
            self.slab_outlet_node_name_for_surface_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_3_name = None
        else:
            self.zone_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_3 = None
        else:
            self.core_diameter_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_3 = None
        else:
            self.core_length_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_3 = None
        else:
            self.core_numbers_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_3 = None
        else:
            self.slab_inlet_node_name_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_3 = None
        else:
            self.slab_outlet_node_name_for_surface_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_4_name = None
        else:
            self.zone_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_4 = None
        else:
            self.core_diameter_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_4 = None
        else:
            self.core_length_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_4 = None
        else:
            self.core_numbers_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_4 = None
        else:
            self.slab_inlet_node_name_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_4 = None
        else:
            self.slab_outlet_node_name_for_surface_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_5_name = None
        else:
            self.zone_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_5 = None
        else:
            self.core_diameter_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_5 = None
        else:
            self.core_length_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_5 = None
        else:
            self.core_numbers_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_5 = None
        else:
            self.slab_inlet_node_name_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_5 = None
        else:
            self.slab_outlet_node_name_for_surface_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_6_name = None
        else:
            self.zone_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_6 = None
        else:
            self.core_diameter_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_6 = None
        else:
            self.core_length_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_6 = None
        else:
            self.core_numbers_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_6 = None
        else:
            self.slab_inlet_node_name_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_6 = None
        else:
            self.slab_outlet_node_name_for_surface_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_7_name = None
        else:
            self.zone_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_7 = None
        else:
            self.core_diameter_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_7 = None
        else:
            self.core_length_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_7 = None
        else:
            self.core_numbers_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_7 = None
        else:
            self.slab_inlet_node_name_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_7 = None
        else:
            self.slab_outlet_node_name_for_surface_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_8_name = None
        else:
            self.zone_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_8 = None
        else:
            self.core_diameter_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_8 = None
        else:
            self.core_length_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_8 = None
        else:
            self.core_numbers_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_8 = None
        else:
            self.slab_inlet_node_name_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_8 = None
        else:
            self.slab_outlet_node_name_for_surface_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_9_name = None
        else:
            self.zone_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_9 = None
        else:
            self.core_diameter_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_9 = None
        else:
            self.core_length_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_9 = None
        else:
            self.core_numbers_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_9 = None
        else:
            self.slab_inlet_node_name_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_9 = None
        else:
            self.slab_outlet_node_name_for_surface_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_10_name = None
        else:
            self.zone_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_10 = None
        else:
            self.core_diameter_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_length_for_surface_10 = None
        else:
            self.core_length_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_10 = None
        else:
            self.core_numbers_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_10 = None
        else:
            self.slab_inlet_node_name_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_10 = None
        else:
            self.slab_outlet_node_name_for_surface_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def zone_1_name(self):
        """Get zone_1_name

        Returns:
            str: the value of `zone_1_name` or None if not set
        """
        return self._data["Zone 1 Name"]

    @zone_1_name.setter
    def zone_1_name(self, value=None):
        """  Corresponds to IDD Field `Zone 1 Name`

        Args:
            value (str): value for IDD Field `Zone 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_1_name`')
        self._data["Zone 1 Name"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `Surface 1 Name`

        Args:
            value (str): value for IDD Field `Surface 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_1_name`')
        self._data["Surface 1 Name"] = value

    @property
    def core_diameter_for_surface_1(self):
        """Get core_diameter_for_surface_1

        Returns:
            float: the value of `core_diameter_for_surface_1` or None if not set
        """
        return self._data["Core Diameter for Surface 1"]

    @core_diameter_for_surface_1.setter
    def core_diameter_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 1`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 1`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_1`')
        self._data["Core Diameter for Surface 1"] = value

    @property
    def core_length_for_surface_1(self):
        """Get core_length_for_surface_1

        Returns:
            float: the value of `core_length_for_surface_1` or None if not set
        """
        return self._data["Core Length for Surface 1"]

    @core_length_for_surface_1.setter
    def core_length_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 1`

        Args:
            value (float): value for IDD Field `Core Length for Surface 1`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_1`')
        self._data["Core Length for Surface 1"] = value

    @property
    def core_numbers_for_surface_1(self):
        """Get core_numbers_for_surface_1

        Returns:
            float: the value of `core_numbers_for_surface_1` or None if not set
        """
        return self._data["Core Numbers for Surface 1"]

    @core_numbers_for_surface_1.setter
    def core_numbers_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 1`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 1`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_1`')
        self._data["Core Numbers for Surface 1"] = value

    @property
    def slab_inlet_node_name_for_surface_1(self):
        """Get slab_inlet_node_name_for_surface_1

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_1` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 1"]

    @slab_inlet_node_name_for_surface_1.setter
    def slab_inlet_node_name_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 1`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_1`')
        self._data["Slab Inlet Node Name for Surface 1"] = value

    @property
    def slab_outlet_node_name_for_surface_1(self):
        """Get slab_outlet_node_name_for_surface_1

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_1` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 1"]

    @slab_outlet_node_name_for_surface_1.setter
    def slab_outlet_node_name_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 1`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_1`')
        self._data["Slab Outlet Node Name for Surface 1"] = value

    @property
    def zone_2_name(self):
        """Get zone_2_name

        Returns:
            str: the value of `zone_2_name` or None if not set
        """
        return self._data["Zone 2 Name"]

    @zone_2_name.setter
    def zone_2_name(self, value=None):
        """  Corresponds to IDD Field `Zone 2 Name`

        Args:
            value (str): value for IDD Field `Zone 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_2_name`')
        self._data["Zone 2 Name"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `Surface 2 Name`

        Args:
            value (str): value for IDD Field `Surface 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_2_name`')
        self._data["Surface 2 Name"] = value

    @property
    def core_diameter_for_surface_2(self):
        """Get core_diameter_for_surface_2

        Returns:
            float: the value of `core_diameter_for_surface_2` or None if not set
        """
        return self._data["Core Diameter for Surface 2"]

    @core_diameter_for_surface_2.setter
    def core_diameter_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 2`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 2`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_2`')
        self._data["Core Diameter for Surface 2"] = value

    @property
    def core_length_for_surface_2(self):
        """Get core_length_for_surface_2

        Returns:
            float: the value of `core_length_for_surface_2` or None if not set
        """
        return self._data["Core Length for Surface 2"]

    @core_length_for_surface_2.setter
    def core_length_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 2`

        Args:
            value (float): value for IDD Field `Core Length for Surface 2`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_2`')
        self._data["Core Length for Surface 2"] = value

    @property
    def core_numbers_for_surface_2(self):
        """Get core_numbers_for_surface_2

        Returns:
            float: the value of `core_numbers_for_surface_2` or None if not set
        """
        return self._data["Core Numbers for Surface 2"]

    @core_numbers_for_surface_2.setter
    def core_numbers_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 2`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 2`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_2`')
        self._data["Core Numbers for Surface 2"] = value

    @property
    def slab_inlet_node_name_for_surface_2(self):
        """Get slab_inlet_node_name_for_surface_2

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_2` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 2"]

    @slab_inlet_node_name_for_surface_2.setter
    def slab_inlet_node_name_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 2`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_2`')
        self._data["Slab Inlet Node Name for Surface 2"] = value

    @property
    def slab_outlet_node_name_for_surface_2(self):
        """Get slab_outlet_node_name_for_surface_2

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_2` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 2"]

    @slab_outlet_node_name_for_surface_2.setter
    def slab_outlet_node_name_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 2`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_2`')
        self._data["Slab Outlet Node Name for Surface 2"] = value

    @property
    def zone_3_name(self):
        """Get zone_3_name

        Returns:
            str: the value of `zone_3_name` or None if not set
        """
        return self._data["Zone 3 Name"]

    @zone_3_name.setter
    def zone_3_name(self, value=None):
        """  Corresponds to IDD Field `Zone 3 Name`

        Args:
            value (str): value for IDD Field `Zone 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_3_name`')
        self._data["Zone 3 Name"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `Surface 3 Name`

        Args:
            value (str): value for IDD Field `Surface 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_3_name`')
        self._data["Surface 3 Name"] = value

    @property
    def core_diameter_for_surface_3(self):
        """Get core_diameter_for_surface_3

        Returns:
            float: the value of `core_diameter_for_surface_3` or None if not set
        """
        return self._data["Core Diameter for Surface 3"]

    @core_diameter_for_surface_3.setter
    def core_diameter_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 3`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 3`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_3`')
        self._data["Core Diameter for Surface 3"] = value

    @property
    def core_length_for_surface_3(self):
        """Get core_length_for_surface_3

        Returns:
            float: the value of `core_length_for_surface_3` or None if not set
        """
        return self._data["Core Length for Surface 3"]

    @core_length_for_surface_3.setter
    def core_length_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 3`

        Args:
            value (float): value for IDD Field `Core Length for Surface 3`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_3`')
        self._data["Core Length for Surface 3"] = value

    @property
    def core_numbers_for_surface_3(self):
        """Get core_numbers_for_surface_3

        Returns:
            float: the value of `core_numbers_for_surface_3` or None if not set
        """
        return self._data["Core Numbers for Surface 3"]

    @core_numbers_for_surface_3.setter
    def core_numbers_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 3`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 3`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_3`')
        self._data["Core Numbers for Surface 3"] = value

    @property
    def slab_inlet_node_name_for_surface_3(self):
        """Get slab_inlet_node_name_for_surface_3

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_3` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 3"]

    @slab_inlet_node_name_for_surface_3.setter
    def slab_inlet_node_name_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 3`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_3`')
        self._data["Slab Inlet Node Name for Surface 3"] = value

    @property
    def slab_outlet_node_name_for_surface_3(self):
        """Get slab_outlet_node_name_for_surface_3

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_3` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 3"]

    @slab_outlet_node_name_for_surface_3.setter
    def slab_outlet_node_name_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 3`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_3`')
        self._data["Slab Outlet Node Name for Surface 3"] = value

    @property
    def zone_4_name(self):
        """Get zone_4_name

        Returns:
            str: the value of `zone_4_name` or None if not set
        """
        return self._data["Zone 4 Name"]

    @zone_4_name.setter
    def zone_4_name(self, value=None):
        """  Corresponds to IDD Field `Zone 4 Name`

        Args:
            value (str): value for IDD Field `Zone 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_4_name`')
        self._data["Zone 4 Name"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `Surface 4 Name`

        Args:
            value (str): value for IDD Field `Surface 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_4_name`')
        self._data["Surface 4 Name"] = value

    @property
    def core_diameter_for_surface_4(self):
        """Get core_diameter_for_surface_4

        Returns:
            float: the value of `core_diameter_for_surface_4` or None if not set
        """
        return self._data["Core Diameter for Surface 4"]

    @core_diameter_for_surface_4.setter
    def core_diameter_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 4`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 4`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_4`')
        self._data["Core Diameter for Surface 4"] = value

    @property
    def core_length_for_surface_4(self):
        """Get core_length_for_surface_4

        Returns:
            float: the value of `core_length_for_surface_4` or None if not set
        """
        return self._data["Core Length for Surface 4"]

    @core_length_for_surface_4.setter
    def core_length_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 4`

        Args:
            value (float): value for IDD Field `Core Length for Surface 4`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_4`')
        self._data["Core Length for Surface 4"] = value

    @property
    def core_numbers_for_surface_4(self):
        """Get core_numbers_for_surface_4

        Returns:
            float: the value of `core_numbers_for_surface_4` or None if not set
        """
        return self._data["Core Numbers for Surface 4"]

    @core_numbers_for_surface_4.setter
    def core_numbers_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 4`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 4`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_4`')
        self._data["Core Numbers for Surface 4"] = value

    @property
    def slab_inlet_node_name_for_surface_4(self):
        """Get slab_inlet_node_name_for_surface_4

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_4` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 4"]

    @slab_inlet_node_name_for_surface_4.setter
    def slab_inlet_node_name_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 4`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_4`')
        self._data["Slab Inlet Node Name for Surface 4"] = value

    @property
    def slab_outlet_node_name_for_surface_4(self):
        """Get slab_outlet_node_name_for_surface_4

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_4` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 4"]

    @slab_outlet_node_name_for_surface_4.setter
    def slab_outlet_node_name_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 4`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_4`')
        self._data["Slab Outlet Node Name for Surface 4"] = value

    @property
    def zone_5_name(self):
        """Get zone_5_name

        Returns:
            str: the value of `zone_5_name` or None if not set
        """
        return self._data["Zone 5 Name"]

    @zone_5_name.setter
    def zone_5_name(self, value=None):
        """  Corresponds to IDD Field `Zone 5 Name`

        Args:
            value (str): value for IDD Field `Zone 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_5_name`')
        self._data["Zone 5 Name"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `Surface 5 Name`

        Args:
            value (str): value for IDD Field `Surface 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_5_name`')
        self._data["Surface 5 Name"] = value

    @property
    def core_diameter_for_surface_5(self):
        """Get core_diameter_for_surface_5

        Returns:
            float: the value of `core_diameter_for_surface_5` or None if not set
        """
        return self._data["Core Diameter for Surface 5"]

    @core_diameter_for_surface_5.setter
    def core_diameter_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 5`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 5`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_5`')
        self._data["Core Diameter for Surface 5"] = value

    @property
    def core_length_for_surface_5(self):
        """Get core_length_for_surface_5

        Returns:
            float: the value of `core_length_for_surface_5` or None if not set
        """
        return self._data["Core Length for Surface 5"]

    @core_length_for_surface_5.setter
    def core_length_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 5`

        Args:
            value (float): value for IDD Field `Core Length for Surface 5`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_5`')
        self._data["Core Length for Surface 5"] = value

    @property
    def core_numbers_for_surface_5(self):
        """Get core_numbers_for_surface_5

        Returns:
            float: the value of `core_numbers_for_surface_5` or None if not set
        """
        return self._data["Core Numbers for Surface 5"]

    @core_numbers_for_surface_5.setter
    def core_numbers_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 5`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 5`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_5`')
        self._data["Core Numbers for Surface 5"] = value

    @property
    def slab_inlet_node_name_for_surface_5(self):
        """Get slab_inlet_node_name_for_surface_5

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_5` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 5"]

    @slab_inlet_node_name_for_surface_5.setter
    def slab_inlet_node_name_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 5`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_5`')
        self._data["Slab Inlet Node Name for Surface 5"] = value

    @property
    def slab_outlet_node_name_for_surface_5(self):
        """Get slab_outlet_node_name_for_surface_5

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_5` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 5"]

    @slab_outlet_node_name_for_surface_5.setter
    def slab_outlet_node_name_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 5`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_5`')
        self._data["Slab Outlet Node Name for Surface 5"] = value

    @property
    def zone_6_name(self):
        """Get zone_6_name

        Returns:
            str: the value of `zone_6_name` or None if not set
        """
        return self._data["Zone 6 Name"]

    @zone_6_name.setter
    def zone_6_name(self, value=None):
        """  Corresponds to IDD Field `Zone 6 Name`

        Args:
            value (str): value for IDD Field `Zone 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_6_name`')
        self._data["Zone 6 Name"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `Surface 6 Name`

        Args:
            value (str): value for IDD Field `Surface 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_6_name`')
        self._data["Surface 6 Name"] = value

    @property
    def core_diameter_for_surface_6(self):
        """Get core_diameter_for_surface_6

        Returns:
            float: the value of `core_diameter_for_surface_6` or None if not set
        """
        return self._data["Core Diameter for Surface 6"]

    @core_diameter_for_surface_6.setter
    def core_diameter_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 6`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 6`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_6`')
        self._data["Core Diameter for Surface 6"] = value

    @property
    def core_length_for_surface_6(self):
        """Get core_length_for_surface_6

        Returns:
            float: the value of `core_length_for_surface_6` or None if not set
        """
        return self._data["Core Length for Surface 6"]

    @core_length_for_surface_6.setter
    def core_length_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 6`

        Args:
            value (float): value for IDD Field `Core Length for Surface 6`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_6`')
        self._data["Core Length for Surface 6"] = value

    @property
    def core_numbers_for_surface_6(self):
        """Get core_numbers_for_surface_6

        Returns:
            float: the value of `core_numbers_for_surface_6` or None if not set
        """
        return self._data["Core Numbers for Surface 6"]

    @core_numbers_for_surface_6.setter
    def core_numbers_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 6`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 6`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_6`')
        self._data["Core Numbers for Surface 6"] = value

    @property
    def slab_inlet_node_name_for_surface_6(self):
        """Get slab_inlet_node_name_for_surface_6

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_6` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 6"]

    @slab_inlet_node_name_for_surface_6.setter
    def slab_inlet_node_name_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 6`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_6`')
        self._data["Slab Inlet Node Name for Surface 6"] = value

    @property
    def slab_outlet_node_name_for_surface_6(self):
        """Get slab_outlet_node_name_for_surface_6

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_6` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 6"]

    @slab_outlet_node_name_for_surface_6.setter
    def slab_outlet_node_name_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 6`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_6`')
        self._data["Slab Outlet Node Name for Surface 6"] = value

    @property
    def zone_7_name(self):
        """Get zone_7_name

        Returns:
            str: the value of `zone_7_name` or None if not set
        """
        return self._data["Zone 7 Name"]

    @zone_7_name.setter
    def zone_7_name(self, value=None):
        """  Corresponds to IDD Field `Zone 7 Name`

        Args:
            value (str): value for IDD Field `Zone 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_7_name`')
        self._data["Zone 7 Name"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `Surface 7 Name`

        Args:
            value (str): value for IDD Field `Surface 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_7_name`')
        self._data["Surface 7 Name"] = value

    @property
    def core_diameter_for_surface_7(self):
        """Get core_diameter_for_surface_7

        Returns:
            float: the value of `core_diameter_for_surface_7` or None if not set
        """
        return self._data["Core Diameter for Surface 7"]

    @core_diameter_for_surface_7.setter
    def core_diameter_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 7`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 7`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_7`')
        self._data["Core Diameter for Surface 7"] = value

    @property
    def core_length_for_surface_7(self):
        """Get core_length_for_surface_7

        Returns:
            float: the value of `core_length_for_surface_7` or None if not set
        """
        return self._data["Core Length for Surface 7"]

    @core_length_for_surface_7.setter
    def core_length_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 7`

        Args:
            value (float): value for IDD Field `Core Length for Surface 7`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_7`')
        self._data["Core Length for Surface 7"] = value

    @property
    def core_numbers_for_surface_7(self):
        """Get core_numbers_for_surface_7

        Returns:
            float: the value of `core_numbers_for_surface_7` or None if not set
        """
        return self._data["Core Numbers for Surface 7"]

    @core_numbers_for_surface_7.setter
    def core_numbers_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 7`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 7`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_7`')
        self._data["Core Numbers for Surface 7"] = value

    @property
    def slab_inlet_node_name_for_surface_7(self):
        """Get slab_inlet_node_name_for_surface_7

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_7` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 7"]

    @slab_inlet_node_name_for_surface_7.setter
    def slab_inlet_node_name_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 7`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_7`')
        self._data["Slab Inlet Node Name for Surface 7"] = value

    @property
    def slab_outlet_node_name_for_surface_7(self):
        """Get slab_outlet_node_name_for_surface_7

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_7` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 7"]

    @slab_outlet_node_name_for_surface_7.setter
    def slab_outlet_node_name_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 7`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_7`')
        self._data["Slab Outlet Node Name for Surface 7"] = value

    @property
    def zone_8_name(self):
        """Get zone_8_name

        Returns:
            str: the value of `zone_8_name` or None if not set
        """
        return self._data["Zone 8 Name"]

    @zone_8_name.setter
    def zone_8_name(self, value=None):
        """  Corresponds to IDD Field `Zone 8 Name`

        Args:
            value (str): value for IDD Field `Zone 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_8_name`')
        self._data["Zone 8 Name"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `Surface 8 Name`

        Args:
            value (str): value for IDD Field `Surface 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_8_name`')
        self._data["Surface 8 Name"] = value

    @property
    def core_diameter_for_surface_8(self):
        """Get core_diameter_for_surface_8

        Returns:
            float: the value of `core_diameter_for_surface_8` or None if not set
        """
        return self._data["Core Diameter for Surface 8"]

    @core_diameter_for_surface_8.setter
    def core_diameter_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 8`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 8`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_8`')
        self._data["Core Diameter for Surface 8"] = value

    @property
    def core_length_for_surface_8(self):
        """Get core_length_for_surface_8

        Returns:
            float: the value of `core_length_for_surface_8` or None if not set
        """
        return self._data["Core Length for Surface 8"]

    @core_length_for_surface_8.setter
    def core_length_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 8`

        Args:
            value (float): value for IDD Field `Core Length for Surface 8`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_8`')
        self._data["Core Length for Surface 8"] = value

    @property
    def core_numbers_for_surface_8(self):
        """Get core_numbers_for_surface_8

        Returns:
            float: the value of `core_numbers_for_surface_8` or None if not set
        """
        return self._data["Core Numbers for Surface 8"]

    @core_numbers_for_surface_8.setter
    def core_numbers_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 8`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 8`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_8`')
        self._data["Core Numbers for Surface 8"] = value

    @property
    def slab_inlet_node_name_for_surface_8(self):
        """Get slab_inlet_node_name_for_surface_8

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_8` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 8"]

    @slab_inlet_node_name_for_surface_8.setter
    def slab_inlet_node_name_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 8`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_8`')
        self._data["Slab Inlet Node Name for Surface 8"] = value

    @property
    def slab_outlet_node_name_for_surface_8(self):
        """Get slab_outlet_node_name_for_surface_8

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_8` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 8"]

    @slab_outlet_node_name_for_surface_8.setter
    def slab_outlet_node_name_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 8`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_8`')
        self._data["Slab Outlet Node Name for Surface 8"] = value

    @property
    def zone_9_name(self):
        """Get zone_9_name

        Returns:
            str: the value of `zone_9_name` or None if not set
        """
        return self._data["Zone 9 Name"]

    @zone_9_name.setter
    def zone_9_name(self, value=None):
        """  Corresponds to IDD Field `Zone 9 Name`

        Args:
            value (str): value for IDD Field `Zone 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_9_name`')
        self._data["Zone 9 Name"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `Surface 9 Name`

        Args:
            value (str): value for IDD Field `Surface 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_9_name`')
        self._data["Surface 9 Name"] = value

    @property
    def core_diameter_for_surface_9(self):
        """Get core_diameter_for_surface_9

        Returns:
            float: the value of `core_diameter_for_surface_9` or None if not set
        """
        return self._data["Core Diameter for Surface 9"]

    @core_diameter_for_surface_9.setter
    def core_diameter_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 9`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 9`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_9`')
        self._data["Core Diameter for Surface 9"] = value

    @property
    def core_length_for_surface_9(self):
        """Get core_length_for_surface_9

        Returns:
            float: the value of `core_length_for_surface_9` or None if not set
        """
        return self._data["Core Length for Surface 9"]

    @core_length_for_surface_9.setter
    def core_length_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 9`

        Args:
            value (float): value for IDD Field `Core Length for Surface 9`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_9`')
        self._data["Core Length for Surface 9"] = value

    @property
    def core_numbers_for_surface_9(self):
        """Get core_numbers_for_surface_9

        Returns:
            float: the value of `core_numbers_for_surface_9` or None if not set
        """
        return self._data["Core Numbers for Surface 9"]

    @core_numbers_for_surface_9.setter
    def core_numbers_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 9`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 9`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_9`')
        self._data["Core Numbers for Surface 9"] = value

    @property
    def slab_inlet_node_name_for_surface_9(self):
        """Get slab_inlet_node_name_for_surface_9

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_9` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 9"]

    @slab_inlet_node_name_for_surface_9.setter
    def slab_inlet_node_name_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 9`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_9`')
        self._data["Slab Inlet Node Name for Surface 9"] = value

    @property
    def slab_outlet_node_name_for_surface_9(self):
        """Get slab_outlet_node_name_for_surface_9

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_9` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 9"]

    @slab_outlet_node_name_for_surface_9.setter
    def slab_outlet_node_name_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 9`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_9`')
        self._data["Slab Outlet Node Name for Surface 9"] = value

    @property
    def zone_10_name(self):
        """Get zone_10_name

        Returns:
            str: the value of `zone_10_name` or None if not set
        """
        return self._data["Zone 10 Name"]

    @zone_10_name.setter
    def zone_10_name(self, value=None):
        """  Corresponds to IDD Field `Zone 10 Name`

        Args:
            value (str): value for IDD Field `Zone 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_10_name`')
        self._data["Zone 10 Name"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `Surface 10 Name`

        Args:
            value (str): value for IDD Field `Surface 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_10_name`')
        self._data["Surface 10 Name"] = value

    @property
    def core_diameter_for_surface_10(self):
        """Get core_diameter_for_surface_10

        Returns:
            float: the value of `core_diameter_for_surface_10` or None if not set
        """
        return self._data["Core Diameter for Surface 10"]

    @core_diameter_for_surface_10.setter
    def core_diameter_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Core Diameter for Surface 10`

        Args:
            value (float): value for IDD Field `Core Diameter for Surface 10`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_diameter_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_10`')
        self._data["Core Diameter for Surface 10"] = value

    @property
    def core_length_for_surface_10(self):
        """Get core_length_for_surface_10

        Returns:
            float: the value of `core_length_for_surface_10` or None if not set
        """
        return self._data["Core Length for Surface 10"]

    @core_length_for_surface_10.setter
    def core_length_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Core Length for Surface 10`

        Args:
            value (float): value for IDD Field `Core Length for Surface 10`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_length_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_10`')
        self._data["Core Length for Surface 10"] = value

    @property
    def core_numbers_for_surface_10(self):
        """Get core_numbers_for_surface_10

        Returns:
            float: the value of `core_numbers_for_surface_10` or None if not set
        """
        return self._data["Core Numbers for Surface 10"]

    @core_numbers_for_surface_10.setter
    def core_numbers_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Core Numbers for Surface 10`

        Args:
            value (float): value for IDD Field `Core Numbers for Surface 10`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `core_numbers_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_10`')
        self._data["Core Numbers for Surface 10"] = value

    @property
    def slab_inlet_node_name_for_surface_10(self):
        """Get slab_inlet_node_name_for_surface_10

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_10` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 10"]

    @slab_inlet_node_name_for_surface_10.setter
    def slab_inlet_node_name_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Slab Inlet Node Name for Surface 10`

        Args:
            value (str): value for IDD Field `Slab Inlet Node Name for Surface 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_inlet_node_name_for_surface_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_inlet_node_name_for_surface_10`')
        self._data["Slab Inlet Node Name for Surface 10"] = value

    @property
    def slab_outlet_node_name_for_surface_10(self):
        """Get slab_outlet_node_name_for_surface_10

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_10` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 10"]

    @slab_outlet_node_name_for_surface_10.setter
    def slab_outlet_node_name_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `Slab Outlet Node Name for Surface 10`

        Args:
            value (str): value for IDD Field `Slab Outlet Node Name for Surface 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `slab_outlet_node_name_for_surface_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slab_outlet_node_name_for_surface_10`')
        self._data["Slab Outlet Node Name for Surface 10"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])