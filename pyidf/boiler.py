from collections import OrderedDict

class BoilerHotWater(object):
    """ Corresponds to IDD object `Boiler:HotWater`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to polynomial equations.
        A constant efficiency boiler may be modeled by leaving the normalized
        boiler efficiency curve name input blank.
    """
    internal_name = "Boiler:HotWater"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Boiler:HotWater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Thermal Efficiency"] = None
        self._data["Efficiency Curve Temperature Evaluation Variable"] = None
        self._data["Normalized Boiler Efficiency Curve Name"] = None
        self._data["Design Water Outlet Temperature"] = None
        self._data["Design Water Flow Rate"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Boiler Water Inlet Node Name"] = None
        self._data["Boiler Water Outlet Node Name"] = None
        self._data["Water Outlet Upper Temperature Limit"] = None
        self._data["Boiler Flow Mode"] = None
        self._data["Parasitic Electric Load"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_thermal_efficiency = None
        else:
            self.nominal_thermal_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_temperature_evaluation_variable = None
        else:
            self.efficiency_curve_temperature_evaluation_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.normalized_boiler_efficiency_curve_name = None
        else:
            self.normalized_boiler_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_water_outlet_temperature = None
        else:
            self.design_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_water_flow_rate = None
        else:
            self.design_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_water_inlet_node_name = None
        else:
            self.boiler_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_water_outlet_node_name = None
        else:
            self.boiler_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_outlet_upper_temperature_limit = None
        else:
            self.water_outlet_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_flow_mode = None
        else:
            self.boiler_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parasitic_electric_load = None
        else:
            self.parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_thermal_efficiency(self):
        """Get nominal_thermal_efficiency

        Returns:
            float: the value of `nominal_thermal_efficiency` or None if not set
        """
        return self._data["Nominal Thermal Efficiency"]

    @nominal_thermal_efficiency.setter
    def nominal_thermal_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_thermal_efficiency`
        Based on the higher heating value of fuel.

        Args:
            value (float): value for IDD Field `nominal_thermal_efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_thermal_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_thermal_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_thermal_efficiency`')

        self._data["Nominal Thermal Efficiency"] = value

    @property
    def efficiency_curve_temperature_evaluation_variable(self):
        """Get efficiency_curve_temperature_evaluation_variable

        Returns:
            str: the value of `efficiency_curve_temperature_evaluation_variable` or None if not set
        """
        return self._data["Efficiency Curve Temperature Evaluation Variable"]

    @efficiency_curve_temperature_evaluation_variable.setter
    def efficiency_curve_temperature_evaluation_variable(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_temperature_evaluation_variable`

        Args:
            value (str): value for IDD Field `efficiency_curve_temperature_evaluation_variable`
                Accepted values are:
                      - EnteringBoiler
                      - LeavingBoiler
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_temperature_evaluation_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_temperature_evaluation_variable`')
            vals = set()
            vals.add("EnteringBoiler")
            vals.add("LeavingBoiler")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `efficiency_curve_temperature_evaluation_variable`'.format(value))

        self._data["Efficiency Curve Temperature Evaluation Variable"] = value

    @property
    def normalized_boiler_efficiency_curve_name(self):
        """Get normalized_boiler_efficiency_curve_name

        Returns:
            str: the value of `normalized_boiler_efficiency_curve_name` or None if not set
        """
        return self._data["Normalized Boiler Efficiency Curve Name"]

    @normalized_boiler_efficiency_curve_name.setter
    def normalized_boiler_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `normalized_boiler_efficiency_curve_name`
        Linear, Quadratic and Cubic efficiency curves are solely a function of PLR.
        All other efficiency curve types are a function of PLR and boiler water temperature.
        Linear = C1 + C2*PLR
        Quadratic = C1 + C2*PLR + C3*PLR^2
        Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3
        Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T
        QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T
        BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2
        TriQuadratic curves are not allowed.
        Table:OneIndependentVariable Table:TwoIndependentVariables
        PLR = part-load ratio
        T = boiler water temperature (either entering or leaving).

        Args:
            value (str): value for IDD Field `normalized_boiler_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_boiler_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_boiler_efficiency_curve_name`')

        self._data["Normalized Boiler Efficiency Curve Name"] = value

    @property
    def design_water_outlet_temperature(self):
        """Get design_water_outlet_temperature

        Returns:
            float: the value of `design_water_outlet_temperature` or None if not set
        """
        return self._data["Design Water Outlet Temperature"]

    @design_water_outlet_temperature.setter
    def design_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `design_water_outlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_water_outlet_temperature`'.format(value))

        self._data["Design Water Outlet Temperature"] = value

    @property
    def design_water_flow_rate(self):
        """Get design_water_flow_rate

        Returns:
            float: the value of `design_water_flow_rate` or None if not set
        """
        return self._data["Design Water Flow Rate"]

    @design_water_flow_rate.setter
    def design_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_water_flow_rate`')

        self._data["Design Water Flow Rate"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def boiler_water_inlet_node_name(self):
        """Get boiler_water_inlet_node_name

        Returns:
            str: the value of `boiler_water_inlet_node_name` or None if not set
        """
        return self._data["Boiler Water Inlet Node Name"]

    @boiler_water_inlet_node_name.setter
    def boiler_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `boiler_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `boiler_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_inlet_node_name`')

        self._data["Boiler Water Inlet Node Name"] = value

    @property
    def boiler_water_outlet_node_name(self):
        """Get boiler_water_outlet_node_name

        Returns:
            str: the value of `boiler_water_outlet_node_name` or None if not set
        """
        return self._data["Boiler Water Outlet Node Name"]

    @boiler_water_outlet_node_name.setter
    def boiler_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `boiler_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `boiler_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_outlet_node_name`')

        self._data["Boiler Water Outlet Node Name"] = value

    @property
    def water_outlet_upper_temperature_limit(self):
        """Get water_outlet_upper_temperature_limit

        Returns:
            float: the value of `water_outlet_upper_temperature_limit` or None if not set
        """
        return self._data["Water Outlet Upper Temperature Limit"]

    @water_outlet_upper_temperature_limit.setter
    def water_outlet_upper_temperature_limit(self, value=99.9 ):
        """  Corresponds to IDD Field `water_outlet_upper_temperature_limit`

        Args:
            value (float): value for IDD Field `water_outlet_upper_temperature_limit`
                Unit: C
                Default value: 99.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_outlet_upper_temperature_limit`'.format(value))

        self._data["Water Outlet Upper Temperature Limit"] = value

    @property
    def boiler_flow_mode(self):
        """Get boiler_flow_mode

        Returns:
            str: the value of `boiler_flow_mode` or None if not set
        """
        return self._data["Boiler Flow Mode"]

    @boiler_flow_mode.setter
    def boiler_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `boiler_flow_mode`
        Select operating mode for fluid flow through the boiler. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by boiler to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by boiler to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `boiler_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `boiler_flow_mode`'.format(value))

        self._data["Boiler Flow Mode"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load

        Returns:
            float: the value of `parasitic_electric_load` or None if not set
        """
        return self._data["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `parasitic_electric_load`

        Args:
            value (float): value for IDD Field `parasitic_electric_load`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `parasitic_electric_load`')

        self._data["Parasitic Electric Load"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_thermal_efficiency))
        out.append(self._to_str(self.efficiency_curve_temperature_evaluation_variable))
        out.append(self._to_str(self.normalized_boiler_efficiency_curve_name))
        out.append(self._to_str(self.design_water_outlet_temperature))
        out.append(self._to_str(self.design_water_flow_rate))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.boiler_water_inlet_node_name))
        out.append(self._to_str(self.boiler_water_outlet_node_name))
        out.append(self._to_str(self.water_outlet_upper_temperature_limit))
        out.append(self._to_str(self.boiler_flow_mode))
        out.append(self._to_str(self.parasitic_electric_load))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class BoilerSteam(object):
    """ Corresponds to IDD object `Boiler:Steam`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  A constant efficiency boiler is modeled by setting
        the fuel use coefficients as follows: N9=1, N10=0, N11=0
    """
    internal_name = "Boiler:Steam"
    field_count = 15

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Boiler:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Maximum Operating Pressure"] = None
        self._data["Theoretical Efficiency"] = None
        self._data["Design Outlet Steam Temperature"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Steam Outlet Node Name"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_operating_pressure = None
        else:
            self.maximum_operating_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.theoretical_efficiency = None
        else:
            self.theoretical_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_outlet_steam_temperature = None
        else:
            self.design_outlet_steam_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.steam_outlet_node_name = None
        else:
            self.steam_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def maximum_operating_pressure(self):
        """Get maximum_operating_pressure

        Returns:
            float: the value of `maximum_operating_pressure` or None if not set
        """
        return self._data["Maximum Operating Pressure"]

    @maximum_operating_pressure.setter
    def maximum_operating_pressure(self, value=None):
        """  Corresponds to IDD Field `maximum_operating_pressure`

        Args:
            value (float): value for IDD Field `maximum_operating_pressure`
                Unit: Kpa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_operating_pressure`'.format(value))

        self._data["Maximum Operating Pressure"] = value

    @property
    def theoretical_efficiency(self):
        """Get theoretical_efficiency

        Returns:
            float: the value of `theoretical_efficiency` or None if not set
        """
        return self._data["Theoretical Efficiency"]

    @theoretical_efficiency.setter
    def theoretical_efficiency(self, value=None):
        """  Corresponds to IDD Field `theoretical_efficiency`

        Args:
            value (float): value for IDD Field `theoretical_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `theoretical_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `theoretical_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `theoretical_efficiency`')

        self._data["Theoretical Efficiency"] = value

    @property
    def design_outlet_steam_temperature(self):
        """Get design_outlet_steam_temperature

        Returns:
            float: the value of `design_outlet_steam_temperature` or None if not set
        """
        return self._data["Design Outlet Steam Temperature"]

    @design_outlet_steam_temperature.setter
    def design_outlet_steam_temperature(self, value=None):
        """  Corresponds to IDD Field `design_outlet_steam_temperature`

        Args:
            value (float): value for IDD Field `design_outlet_steam_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_outlet_steam_temperature`'.format(value))

        self._data["Design Outlet Steam Temperature"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))

        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_1_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_1_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_2_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_2_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_3_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_3_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `water_inlet_node_name`

        Args:
            value (str): value for IDD Field `water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')

        self._data["Water Inlet Node Name"] = value

    @property
    def steam_outlet_node_name(self):
        """Get steam_outlet_node_name

        Returns:
            str: the value of `steam_outlet_node_name` or None if not set
        """
        return self._data["Steam Outlet Node Name"]

    @steam_outlet_node_name.setter
    def steam_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `steam_outlet_node_name`

        Args:
            value (str): value for IDD Field `steam_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `steam_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `steam_outlet_node_name`')

        self._data["Steam Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.maximum_operating_pressure))
        out.append(self._to_str(self.theoretical_efficiency))
        out.append(self._to_str(self.design_outlet_steam_temperature))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.water_inlet_node_name))
        out.append(self._to_str(self.steam_outlet_node_name))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)