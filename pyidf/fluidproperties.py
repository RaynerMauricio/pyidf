from collections import OrderedDict

class FluidPropertiesName(object):
    """ Corresponds to IDD object `FluidProperties:Name`
        potential fluid name/type in the input file
        repeat this object for each fluid
    """
    internal_name = "FluidProperties:Name"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:Name`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value=None):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Refrigerant
                      - Glycol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Refrigerant")
            vals.add("Glycol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_type))
        return ",".join(out)

class FluidPropertiesGlycolConcentration(object):
    """ Corresponds to IDD object `FluidProperties:GlycolConcentration`
        glycol and what concentration it is
    """
    internal_name = "FluidProperties:GlycolConcentration"
    field_count = 4

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:GlycolConcentration`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Glycol Type"] = None
        self._data["User Defined Glycol Name"] = None
        self._data["Glycol Concentration"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glycol_type = None
        else:
            self.glycol_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.user_defined_glycol_name = None
        else:
            self.user_defined_glycol_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glycol_concentration = None
        else:
            self.glycol_concentration = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def glycol_type(self):
        """Get glycol_type

        Returns:
            str: the value of `glycol_type` or None if not set
        """
        return self._data["Glycol Type"]

    @glycol_type.setter
    def glycol_type(self, value=None):
        """  Corresponds to IDD Field `glycol_type`
        or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)

        Args:
            value (str): value for IDD Field `glycol_type`
                Accepted values are:
                      - EthyleneGlycol
                      - PropyleneGlycol
                      - UserDefinedGlycolType
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `glycol_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glycol_type`')
            vals = set()
            vals.add("EthyleneGlycol")
            vals.add("PropyleneGlycol")
            vals.add("UserDefinedGlycolType")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `glycol_type`'.format(value))

        self._data["Glycol Type"] = value

    @property
    def user_defined_glycol_name(self):
        """Get user_defined_glycol_name

        Returns:
            str: the value of `user_defined_glycol_name` or None if not set
        """
        return self._data["User Defined Glycol Name"]

    @user_defined_glycol_name.setter
    def user_defined_glycol_name(self, value=None):
        """  Corresponds to IDD Field `user_defined_glycol_name`

        Args:
            value (str): value for IDD Field `user_defined_glycol_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `user_defined_glycol_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `user_defined_glycol_name`')

        self._data["User Defined Glycol Name"] = value

    @property
    def glycol_concentration(self):
        """Get glycol_concentration

        Returns:
            float: the value of `glycol_concentration` or None if not set
        """
        return self._data["Glycol Concentration"]

    @glycol_concentration.setter
    def glycol_concentration(self, value=None):
        """  Corresponds to IDD Field `glycol_concentration`

        Args:
            value (float): value for IDD Field `glycol_concentration`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `glycol_concentration`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `glycol_concentration`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `glycol_concentration`')

        self._data["Glycol Concentration"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.glycol_type))
        out.append(self._to_str(self.user_defined_glycol_name))
        out.append(self._to_str(self.glycol_concentration))
        return ",".join(out)

class FluidPropertiesTemperatures(object):
    """ Corresponds to IDD object `FluidProperties:Temperatures`
        property values for fluid properties
        list of up to 250 temperatures, note that number of property values must match the number of properties
        in other words, there must be a one-to-one correspondence between the property values in this list and
        the actual properties list in other syntax
        degrees C (for all temperature inputs)
    """
    internal_name = "FluidProperties:Temperatures"
    field_count = 251

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:Temperatures`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Temperature 1"] = None
        self._data["Temperature 2"] = None
        self._data["Temperature 3"] = None
        self._data["Temperature 4"] = None
        self._data["Temperature 5"] = None
        self._data["Temperature 6"] = None
        self._data["Temperature 7"] = None
        self._data["Temperature 8"] = None
        self._data["Temperature 9"] = None
        self._data["Temperature 10"] = None
        self._data["Temperature 11"] = None
        self._data["Temperature 12"] = None
        self._data["Temperature 13"] = None
        self._data["Temperature 14"] = None
        self._data["Temperature 15"] = None
        self._data["Temperature 16"] = None
        self._data["Temperature 17"] = None
        self._data["Temperature 18"] = None
        self._data["Temperature 19"] = None
        self._data["Temperature 20"] = None
        self._data["Temperature 21"] = None
        self._data["Temperature 22"] = None
        self._data["Temperature 23"] = None
        self._data["Temperature 24"] = None
        self._data["Temperature 25"] = None
        self._data["Temperature 26"] = None
        self._data["Temperature 27"] = None
        self._data["Temperature 28"] = None
        self._data["Temperature 29"] = None
        self._data["Temperature 30"] = None
        self._data["Temperature 31"] = None
        self._data["Temperature 32"] = None
        self._data["Temperature 33"] = None
        self._data["Temperature 34"] = None
        self._data["Temperature 35"] = None
        self._data["Temperature 36"] = None
        self._data["Temperature 37"] = None
        self._data["Temperature 38"] = None
        self._data["Temperature 39"] = None
        self._data["Temperature 40"] = None
        self._data["Temperature 41"] = None
        self._data["Temperature 42"] = None
        self._data["Temperature 43"] = None
        self._data["Temperature 44"] = None
        self._data["Temperature 45"] = None
        self._data["Temperature 46"] = None
        self._data["Temperature 47"] = None
        self._data["Temperature 48"] = None
        self._data["Temperature 49"] = None
        self._data["Temperature 50"] = None
        self._data["Temperature 51"] = None
        self._data["Temperature 52"] = None
        self._data["Temperature 53"] = None
        self._data["Temperature 54"] = None
        self._data["Temperature 55"] = None
        self._data["Temperature 56"] = None
        self._data["Temperature 57"] = None
        self._data["Temperature 58"] = None
        self._data["Temperature 59"] = None
        self._data["Temperature 60"] = None
        self._data["Temperature 61"] = None
        self._data["Temperature 62"] = None
        self._data["Temperature 63"] = None
        self._data["Temperature 64"] = None
        self._data["Temperature 65"] = None
        self._data["Temperature 66"] = None
        self._data["Temperature 67"] = None
        self._data["Temperature 68"] = None
        self._data["Temperature 69"] = None
        self._data["Temperature 70"] = None
        self._data["Temperature 71"] = None
        self._data["Temperature 72"] = None
        self._data["Temperature 73"] = None
        self._data["Temperature 74"] = None
        self._data["Temperature 75"] = None
        self._data["Temperature 76"] = None
        self._data["Temperature 77"] = None
        self._data["Temperature 78"] = None
        self._data["Temperature 79"] = None
        self._data["Temperature 80"] = None
        self._data["Temperature 81"] = None
        self._data["Temperature 82"] = None
        self._data["Temperature 83"] = None
        self._data["Temperature 84"] = None
        self._data["Temperature 85"] = None
        self._data["Temperature 86"] = None
        self._data["Temperature 87"] = None
        self._data["Temperature 88"] = None
        self._data["Temperature 89"] = None
        self._data["Temperature 90"] = None
        self._data["Temperature 91"] = None
        self._data["Temperature 92"] = None
        self._data["Temperature 93"] = None
        self._data["Temperature 94"] = None
        self._data["Temperature 95"] = None
        self._data["Temperature 96"] = None
        self._data["Temperature 97"] = None
        self._data["Temperature 98"] = None
        self._data["Temperature 99"] = None
        self._data["Temperature 100"] = None
        self._data["Temperature 101"] = None
        self._data["Temperature 102"] = None
        self._data["Temperature 103"] = None
        self._data["Temperature 104"] = None
        self._data["Temperature 105"] = None
        self._data["Temperature 106"] = None
        self._data["Temperature 107"] = None
        self._data["Temperature 108"] = None
        self._data["Temperature 109"] = None
        self._data["Temperature 110"] = None
        self._data["Temperature 111"] = None
        self._data["Temperature 112"] = None
        self._data["Temperature 113"] = None
        self._data["Temperature 114"] = None
        self._data["Temperature 115"] = None
        self._data["Temperature 116"] = None
        self._data["Temperature 117"] = None
        self._data["Temperature 118"] = None
        self._data["Temperature 119"] = None
        self._data["Temperature 120"] = None
        self._data["Temperature 121"] = None
        self._data["Temperature 122"] = None
        self._data["Temperature 123"] = None
        self._data["Temperature 124"] = None
        self._data["Temperature 125"] = None
        self._data["Temperature 126"] = None
        self._data["Temperature 127"] = None
        self._data["Temperature 128"] = None
        self._data["Temperature 129"] = None
        self._data["Temperature 130"] = None
        self._data["Temperature 131"] = None
        self._data["Temperature 132"] = None
        self._data["Temperature 133"] = None
        self._data["Temperature 134"] = None
        self._data["Temperature 135"] = None
        self._data["Temperature 136"] = None
        self._data["Temperature 137"] = None
        self._data["Temperature 138"] = None
        self._data["Temperature 139"] = None
        self._data["Temperature 140"] = None
        self._data["Temperature 141"] = None
        self._data["Temperature 142"] = None
        self._data["Temperature 143"] = None
        self._data["Temperature 144"] = None
        self._data["Temperature 145"] = None
        self._data["Temperature 146"] = None
        self._data["Temperature 147"] = None
        self._data["Temperature 148"] = None
        self._data["Temperature 149"] = None
        self._data["Temperature 150"] = None
        self._data["Temperature 151"] = None
        self._data["Temperature 152"] = None
        self._data["Temperature 153"] = None
        self._data["Temperature 154"] = None
        self._data["Temperature 155"] = None
        self._data["Temperature 156"] = None
        self._data["Temperature 157"] = None
        self._data["Temperature 158"] = None
        self._data["Temperature 159"] = None
        self._data["Temperature 160"] = None
        self._data["Temperature 161"] = None
        self._data["Temperature 162"] = None
        self._data["Temperature 163"] = None
        self._data["Temperature 164"] = None
        self._data["Temperature 165"] = None
        self._data["Temperature 166"] = None
        self._data["Temperature 167"] = None
        self._data["Temperature 168"] = None
        self._data["Temperature 169"] = None
        self._data["Temperature 170"] = None
        self._data["Temperature 171"] = None
        self._data["Temperature 172"] = None
        self._data["Temperature 173"] = None
        self._data["Temperature 174"] = None
        self._data["Temperature 175"] = None
        self._data["Temperature 176"] = None
        self._data["Temperature 177"] = None
        self._data["Temperature 178"] = None
        self._data["Temperature 179"] = None
        self._data["Temperature 180"] = None
        self._data["Temperature 181"] = None
        self._data["Temperature 182"] = None
        self._data["Temperature 183"] = None
        self._data["Temperature 184"] = None
        self._data["Temperature 185"] = None
        self._data["Temperature 186"] = None
        self._data["Temperature 187"] = None
        self._data["Temperature 188"] = None
        self._data["Temperature 189"] = None
        self._data["Temperature 190"] = None
        self._data["Temperature 191"] = None
        self._data["Temperature 192"] = None
        self._data["Temperature 193"] = None
        self._data["Temperature 194"] = None
        self._data["Temperature 195"] = None
        self._data["Temperature 196"] = None
        self._data["Temperature 197"] = None
        self._data["Temperature 198"] = None
        self._data["Temperature 199"] = None
        self._data["Temperature 200"] = None
        self._data["Temperature 201"] = None
        self._data["Temperature 202"] = None
        self._data["Temperature 203"] = None
        self._data["Temperature 204"] = None
        self._data["Temperature 205"] = None
        self._data["Temperature 206"] = None
        self._data["Temperature 207"] = None
        self._data["Temperature 208"] = None
        self._data["Temperature 209"] = None
        self._data["Temperature 210"] = None
        self._data["Temperature 211"] = None
        self._data["Temperature 212"] = None
        self._data["Temperature 213"] = None
        self._data["Temperature 214"] = None
        self._data["Temperature 215"] = None
        self._data["Temperature 216"] = None
        self._data["Temperature 217"] = None
        self._data["Temperature 218"] = None
        self._data["Temperature 219"] = None
        self._data["Temperature 220"] = None
        self._data["Temperature 221"] = None
        self._data["Temperature 222"] = None
        self._data["Temperature 223"] = None
        self._data["Temperature 224"] = None
        self._data["Temperature 225"] = None
        self._data["Temperature 226"] = None
        self._data["Temperature 227"] = None
        self._data["Temperature 228"] = None
        self._data["Temperature 229"] = None
        self._data["Temperature 230"] = None
        self._data["Temperature 231"] = None
        self._data["Temperature 232"] = None
        self._data["Temperature 233"] = None
        self._data["Temperature 234"] = None
        self._data["Temperature 235"] = None
        self._data["Temperature 236"] = None
        self._data["Temperature 237"] = None
        self._data["Temperature 238"] = None
        self._data["Temperature 239"] = None
        self._data["Temperature 240"] = None
        self._data["Temperature 241"] = None
        self._data["Temperature 242"] = None
        self._data["Temperature 243"] = None
        self._data["Temperature 244"] = None
        self._data["Temperature 245"] = None
        self._data["Temperature 246"] = None
        self._data["Temperature 247"] = None
        self._data["Temperature 248"] = None
        self._data["Temperature 249"] = None
        self._data["Temperature 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_1 = None
        else:
            self.temperature_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_2 = None
        else:
            self.temperature_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_3 = None
        else:
            self.temperature_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_4 = None
        else:
            self.temperature_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_5 = None
        else:
            self.temperature_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_6 = None
        else:
            self.temperature_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_7 = None
        else:
            self.temperature_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_8 = None
        else:
            self.temperature_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_9 = None
        else:
            self.temperature_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_10 = None
        else:
            self.temperature_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_11 = None
        else:
            self.temperature_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_12 = None
        else:
            self.temperature_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_13 = None
        else:
            self.temperature_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_14 = None
        else:
            self.temperature_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_15 = None
        else:
            self.temperature_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_16 = None
        else:
            self.temperature_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_17 = None
        else:
            self.temperature_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_18 = None
        else:
            self.temperature_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_19 = None
        else:
            self.temperature_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_20 = None
        else:
            self.temperature_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_21 = None
        else:
            self.temperature_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_22 = None
        else:
            self.temperature_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_23 = None
        else:
            self.temperature_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_24 = None
        else:
            self.temperature_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_25 = None
        else:
            self.temperature_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_26 = None
        else:
            self.temperature_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_27 = None
        else:
            self.temperature_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_28 = None
        else:
            self.temperature_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_29 = None
        else:
            self.temperature_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_30 = None
        else:
            self.temperature_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_31 = None
        else:
            self.temperature_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_32 = None
        else:
            self.temperature_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_33 = None
        else:
            self.temperature_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_34 = None
        else:
            self.temperature_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_35 = None
        else:
            self.temperature_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_36 = None
        else:
            self.temperature_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_37 = None
        else:
            self.temperature_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_38 = None
        else:
            self.temperature_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_39 = None
        else:
            self.temperature_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_40 = None
        else:
            self.temperature_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_41 = None
        else:
            self.temperature_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_42 = None
        else:
            self.temperature_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_43 = None
        else:
            self.temperature_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_44 = None
        else:
            self.temperature_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_45 = None
        else:
            self.temperature_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_46 = None
        else:
            self.temperature_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_47 = None
        else:
            self.temperature_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_48 = None
        else:
            self.temperature_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_49 = None
        else:
            self.temperature_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_50 = None
        else:
            self.temperature_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_51 = None
        else:
            self.temperature_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_52 = None
        else:
            self.temperature_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_53 = None
        else:
            self.temperature_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_54 = None
        else:
            self.temperature_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_55 = None
        else:
            self.temperature_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_56 = None
        else:
            self.temperature_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_57 = None
        else:
            self.temperature_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_58 = None
        else:
            self.temperature_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_59 = None
        else:
            self.temperature_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_60 = None
        else:
            self.temperature_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_61 = None
        else:
            self.temperature_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_62 = None
        else:
            self.temperature_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_63 = None
        else:
            self.temperature_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_64 = None
        else:
            self.temperature_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_65 = None
        else:
            self.temperature_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_66 = None
        else:
            self.temperature_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_67 = None
        else:
            self.temperature_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_68 = None
        else:
            self.temperature_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_69 = None
        else:
            self.temperature_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_70 = None
        else:
            self.temperature_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_71 = None
        else:
            self.temperature_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_72 = None
        else:
            self.temperature_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_73 = None
        else:
            self.temperature_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_74 = None
        else:
            self.temperature_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_75 = None
        else:
            self.temperature_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_76 = None
        else:
            self.temperature_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_77 = None
        else:
            self.temperature_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_78 = None
        else:
            self.temperature_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_79 = None
        else:
            self.temperature_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_80 = None
        else:
            self.temperature_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_81 = None
        else:
            self.temperature_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_82 = None
        else:
            self.temperature_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_83 = None
        else:
            self.temperature_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_84 = None
        else:
            self.temperature_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_85 = None
        else:
            self.temperature_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_86 = None
        else:
            self.temperature_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_87 = None
        else:
            self.temperature_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_88 = None
        else:
            self.temperature_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_89 = None
        else:
            self.temperature_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_90 = None
        else:
            self.temperature_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_91 = None
        else:
            self.temperature_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_92 = None
        else:
            self.temperature_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_93 = None
        else:
            self.temperature_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_94 = None
        else:
            self.temperature_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_95 = None
        else:
            self.temperature_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_96 = None
        else:
            self.temperature_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_97 = None
        else:
            self.temperature_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_98 = None
        else:
            self.temperature_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_99 = None
        else:
            self.temperature_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_100 = None
        else:
            self.temperature_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_101 = None
        else:
            self.temperature_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_102 = None
        else:
            self.temperature_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_103 = None
        else:
            self.temperature_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_104 = None
        else:
            self.temperature_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_105 = None
        else:
            self.temperature_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_106 = None
        else:
            self.temperature_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_107 = None
        else:
            self.temperature_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_108 = None
        else:
            self.temperature_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_109 = None
        else:
            self.temperature_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_110 = None
        else:
            self.temperature_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_111 = None
        else:
            self.temperature_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_112 = None
        else:
            self.temperature_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_113 = None
        else:
            self.temperature_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_114 = None
        else:
            self.temperature_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_115 = None
        else:
            self.temperature_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_116 = None
        else:
            self.temperature_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_117 = None
        else:
            self.temperature_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_118 = None
        else:
            self.temperature_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_119 = None
        else:
            self.temperature_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_120 = None
        else:
            self.temperature_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_121 = None
        else:
            self.temperature_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_122 = None
        else:
            self.temperature_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_123 = None
        else:
            self.temperature_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_124 = None
        else:
            self.temperature_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_125 = None
        else:
            self.temperature_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_126 = None
        else:
            self.temperature_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_127 = None
        else:
            self.temperature_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_128 = None
        else:
            self.temperature_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_129 = None
        else:
            self.temperature_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_130 = None
        else:
            self.temperature_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_131 = None
        else:
            self.temperature_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_132 = None
        else:
            self.temperature_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_133 = None
        else:
            self.temperature_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_134 = None
        else:
            self.temperature_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_135 = None
        else:
            self.temperature_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_136 = None
        else:
            self.temperature_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_137 = None
        else:
            self.temperature_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_138 = None
        else:
            self.temperature_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_139 = None
        else:
            self.temperature_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_140 = None
        else:
            self.temperature_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_141 = None
        else:
            self.temperature_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_142 = None
        else:
            self.temperature_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_143 = None
        else:
            self.temperature_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_144 = None
        else:
            self.temperature_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_145 = None
        else:
            self.temperature_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_146 = None
        else:
            self.temperature_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_147 = None
        else:
            self.temperature_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_148 = None
        else:
            self.temperature_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_149 = None
        else:
            self.temperature_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_150 = None
        else:
            self.temperature_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_151 = None
        else:
            self.temperature_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_152 = None
        else:
            self.temperature_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_153 = None
        else:
            self.temperature_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_154 = None
        else:
            self.temperature_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_155 = None
        else:
            self.temperature_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_156 = None
        else:
            self.temperature_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_157 = None
        else:
            self.temperature_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_158 = None
        else:
            self.temperature_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_159 = None
        else:
            self.temperature_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_160 = None
        else:
            self.temperature_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_161 = None
        else:
            self.temperature_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_162 = None
        else:
            self.temperature_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_163 = None
        else:
            self.temperature_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_164 = None
        else:
            self.temperature_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_165 = None
        else:
            self.temperature_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_166 = None
        else:
            self.temperature_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_167 = None
        else:
            self.temperature_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_168 = None
        else:
            self.temperature_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_169 = None
        else:
            self.temperature_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_170 = None
        else:
            self.temperature_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_171 = None
        else:
            self.temperature_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_172 = None
        else:
            self.temperature_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_173 = None
        else:
            self.temperature_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_174 = None
        else:
            self.temperature_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_175 = None
        else:
            self.temperature_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_176 = None
        else:
            self.temperature_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_177 = None
        else:
            self.temperature_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_178 = None
        else:
            self.temperature_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_179 = None
        else:
            self.temperature_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_180 = None
        else:
            self.temperature_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_181 = None
        else:
            self.temperature_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_182 = None
        else:
            self.temperature_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_183 = None
        else:
            self.temperature_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_184 = None
        else:
            self.temperature_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_185 = None
        else:
            self.temperature_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_186 = None
        else:
            self.temperature_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_187 = None
        else:
            self.temperature_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_188 = None
        else:
            self.temperature_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_189 = None
        else:
            self.temperature_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_190 = None
        else:
            self.temperature_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_191 = None
        else:
            self.temperature_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_192 = None
        else:
            self.temperature_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_193 = None
        else:
            self.temperature_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_194 = None
        else:
            self.temperature_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_195 = None
        else:
            self.temperature_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_196 = None
        else:
            self.temperature_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_197 = None
        else:
            self.temperature_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_198 = None
        else:
            self.temperature_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_199 = None
        else:
            self.temperature_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_200 = None
        else:
            self.temperature_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_201 = None
        else:
            self.temperature_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_202 = None
        else:
            self.temperature_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_203 = None
        else:
            self.temperature_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_204 = None
        else:
            self.temperature_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_205 = None
        else:
            self.temperature_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_206 = None
        else:
            self.temperature_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_207 = None
        else:
            self.temperature_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_208 = None
        else:
            self.temperature_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_209 = None
        else:
            self.temperature_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_210 = None
        else:
            self.temperature_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_211 = None
        else:
            self.temperature_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_212 = None
        else:
            self.temperature_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_213 = None
        else:
            self.temperature_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_214 = None
        else:
            self.temperature_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_215 = None
        else:
            self.temperature_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_216 = None
        else:
            self.temperature_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_217 = None
        else:
            self.temperature_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_218 = None
        else:
            self.temperature_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_219 = None
        else:
            self.temperature_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_220 = None
        else:
            self.temperature_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_221 = None
        else:
            self.temperature_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_222 = None
        else:
            self.temperature_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_223 = None
        else:
            self.temperature_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_224 = None
        else:
            self.temperature_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_225 = None
        else:
            self.temperature_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_226 = None
        else:
            self.temperature_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_227 = None
        else:
            self.temperature_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_228 = None
        else:
            self.temperature_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_229 = None
        else:
            self.temperature_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_230 = None
        else:
            self.temperature_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_231 = None
        else:
            self.temperature_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_232 = None
        else:
            self.temperature_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_233 = None
        else:
            self.temperature_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_234 = None
        else:
            self.temperature_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_235 = None
        else:
            self.temperature_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_236 = None
        else:
            self.temperature_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_237 = None
        else:
            self.temperature_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_238 = None
        else:
            self.temperature_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_239 = None
        else:
            self.temperature_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_240 = None
        else:
            self.temperature_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_241 = None
        else:
            self.temperature_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_242 = None
        else:
            self.temperature_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_243 = None
        else:
            self.temperature_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_244 = None
        else:
            self.temperature_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_245 = None
        else:
            self.temperature_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_246 = None
        else:
            self.temperature_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_247 = None
        else:
            self.temperature_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_248 = None
        else:
            self.temperature_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_249 = None
        else:
            self.temperature_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_250 = None
        else:
            self.temperature_250 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def temperature_1(self):
        """Get temperature_1

        Returns:
            float: the value of `temperature_1` or None if not set
        """
        return self._data["Temperature 1"]

    @temperature_1.setter
    def temperature_1(self, value=None):
        """  Corresponds to IDD Field `temperature_1`

        Args:
            value (float): value for IDD Field `temperature_1`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_1`'.format(value))

        self._data["Temperature 1"] = value

    @property
    def temperature_2(self):
        """Get temperature_2

        Returns:
            float: the value of `temperature_2` or None if not set
        """
        return self._data["Temperature 2"]

    @temperature_2.setter
    def temperature_2(self, value=None):
        """  Corresponds to IDD Field `temperature_2`

        Args:
            value (float): value for IDD Field `temperature_2`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_2`'.format(value))

        self._data["Temperature 2"] = value

    @property
    def temperature_3(self):
        """Get temperature_3

        Returns:
            float: the value of `temperature_3` or None if not set
        """
        return self._data["Temperature 3"]

    @temperature_3.setter
    def temperature_3(self, value=None):
        """  Corresponds to IDD Field `temperature_3`

        Args:
            value (float): value for IDD Field `temperature_3`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_3`'.format(value))

        self._data["Temperature 3"] = value

    @property
    def temperature_4(self):
        """Get temperature_4

        Returns:
            float: the value of `temperature_4` or None if not set
        """
        return self._data["Temperature 4"]

    @temperature_4.setter
    def temperature_4(self, value=None):
        """  Corresponds to IDD Field `temperature_4`

        Args:
            value (float): value for IDD Field `temperature_4`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_4`'.format(value))

        self._data["Temperature 4"] = value

    @property
    def temperature_5(self):
        """Get temperature_5

        Returns:
            float: the value of `temperature_5` or None if not set
        """
        return self._data["Temperature 5"]

    @temperature_5.setter
    def temperature_5(self, value=None):
        """  Corresponds to IDD Field `temperature_5`

        Args:
            value (float): value for IDD Field `temperature_5`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_5`'.format(value))

        self._data["Temperature 5"] = value

    @property
    def temperature_6(self):
        """Get temperature_6

        Returns:
            float: the value of `temperature_6` or None if not set
        """
        return self._data["Temperature 6"]

    @temperature_6.setter
    def temperature_6(self, value=None):
        """  Corresponds to IDD Field `temperature_6`

        Args:
            value (float): value for IDD Field `temperature_6`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_6`'.format(value))

        self._data["Temperature 6"] = value

    @property
    def temperature_7(self):
        """Get temperature_7

        Returns:
            float: the value of `temperature_7` or None if not set
        """
        return self._data["Temperature 7"]

    @temperature_7.setter
    def temperature_7(self, value=None):
        """  Corresponds to IDD Field `temperature_7`

        Args:
            value (float): value for IDD Field `temperature_7`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_7`'.format(value))

        self._data["Temperature 7"] = value

    @property
    def temperature_8(self):
        """Get temperature_8

        Returns:
            float: the value of `temperature_8` or None if not set
        """
        return self._data["Temperature 8"]

    @temperature_8.setter
    def temperature_8(self, value=None):
        """  Corresponds to IDD Field `temperature_8`

        Args:
            value (float): value for IDD Field `temperature_8`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_8`'.format(value))

        self._data["Temperature 8"] = value

    @property
    def temperature_9(self):
        """Get temperature_9

        Returns:
            float: the value of `temperature_9` or None if not set
        """
        return self._data["Temperature 9"]

    @temperature_9.setter
    def temperature_9(self, value=None):
        """  Corresponds to IDD Field `temperature_9`

        Args:
            value (float): value for IDD Field `temperature_9`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_9`'.format(value))

        self._data["Temperature 9"] = value

    @property
    def temperature_10(self):
        """Get temperature_10

        Returns:
            float: the value of `temperature_10` or None if not set
        """
        return self._data["Temperature 10"]

    @temperature_10.setter
    def temperature_10(self, value=None):
        """  Corresponds to IDD Field `temperature_10`

        Args:
            value (float): value for IDD Field `temperature_10`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_10`'.format(value))

        self._data["Temperature 10"] = value

    @property
    def temperature_11(self):
        """Get temperature_11

        Returns:
            float: the value of `temperature_11` or None if not set
        """
        return self._data["Temperature 11"]

    @temperature_11.setter
    def temperature_11(self, value=None):
        """  Corresponds to IDD Field `temperature_11`

        Args:
            value (float): value for IDD Field `temperature_11`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_11`'.format(value))

        self._data["Temperature 11"] = value

    @property
    def temperature_12(self):
        """Get temperature_12

        Returns:
            float: the value of `temperature_12` or None if not set
        """
        return self._data["Temperature 12"]

    @temperature_12.setter
    def temperature_12(self, value=None):
        """  Corresponds to IDD Field `temperature_12`

        Args:
            value (float): value for IDD Field `temperature_12`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_12`'.format(value))

        self._data["Temperature 12"] = value

    @property
    def temperature_13(self):
        """Get temperature_13

        Returns:
            float: the value of `temperature_13` or None if not set
        """
        return self._data["Temperature 13"]

    @temperature_13.setter
    def temperature_13(self, value=None):
        """  Corresponds to IDD Field `temperature_13`

        Args:
            value (float): value for IDD Field `temperature_13`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_13`'.format(value))

        self._data["Temperature 13"] = value

    @property
    def temperature_14(self):
        """Get temperature_14

        Returns:
            float: the value of `temperature_14` or None if not set
        """
        return self._data["Temperature 14"]

    @temperature_14.setter
    def temperature_14(self, value=None):
        """  Corresponds to IDD Field `temperature_14`

        Args:
            value (float): value for IDD Field `temperature_14`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_14`'.format(value))

        self._data["Temperature 14"] = value

    @property
    def temperature_15(self):
        """Get temperature_15

        Returns:
            float: the value of `temperature_15` or None if not set
        """
        return self._data["Temperature 15"]

    @temperature_15.setter
    def temperature_15(self, value=None):
        """  Corresponds to IDD Field `temperature_15`

        Args:
            value (float): value for IDD Field `temperature_15`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_15`'.format(value))

        self._data["Temperature 15"] = value

    @property
    def temperature_16(self):
        """Get temperature_16

        Returns:
            float: the value of `temperature_16` or None if not set
        """
        return self._data["Temperature 16"]

    @temperature_16.setter
    def temperature_16(self, value=None):
        """  Corresponds to IDD Field `temperature_16`

        Args:
            value (float): value for IDD Field `temperature_16`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_16`'.format(value))

        self._data["Temperature 16"] = value

    @property
    def temperature_17(self):
        """Get temperature_17

        Returns:
            float: the value of `temperature_17` or None if not set
        """
        return self._data["Temperature 17"]

    @temperature_17.setter
    def temperature_17(self, value=None):
        """  Corresponds to IDD Field `temperature_17`

        Args:
            value (float): value for IDD Field `temperature_17`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_17`'.format(value))

        self._data["Temperature 17"] = value

    @property
    def temperature_18(self):
        """Get temperature_18

        Returns:
            float: the value of `temperature_18` or None if not set
        """
        return self._data["Temperature 18"]

    @temperature_18.setter
    def temperature_18(self, value=None):
        """  Corresponds to IDD Field `temperature_18`

        Args:
            value (float): value for IDD Field `temperature_18`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_18`'.format(value))

        self._data["Temperature 18"] = value

    @property
    def temperature_19(self):
        """Get temperature_19

        Returns:
            float: the value of `temperature_19` or None if not set
        """
        return self._data["Temperature 19"]

    @temperature_19.setter
    def temperature_19(self, value=None):
        """  Corresponds to IDD Field `temperature_19`

        Args:
            value (float): value for IDD Field `temperature_19`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_19`'.format(value))

        self._data["Temperature 19"] = value

    @property
    def temperature_20(self):
        """Get temperature_20

        Returns:
            float: the value of `temperature_20` or None if not set
        """
        return self._data["Temperature 20"]

    @temperature_20.setter
    def temperature_20(self, value=None):
        """  Corresponds to IDD Field `temperature_20`

        Args:
            value (float): value for IDD Field `temperature_20`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_20`'.format(value))

        self._data["Temperature 20"] = value

    @property
    def temperature_21(self):
        """Get temperature_21

        Returns:
            float: the value of `temperature_21` or None if not set
        """
        return self._data["Temperature 21"]

    @temperature_21.setter
    def temperature_21(self, value=None):
        """  Corresponds to IDD Field `temperature_21`

        Args:
            value (float): value for IDD Field `temperature_21`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_21`'.format(value))

        self._data["Temperature 21"] = value

    @property
    def temperature_22(self):
        """Get temperature_22

        Returns:
            float: the value of `temperature_22` or None if not set
        """
        return self._data["Temperature 22"]

    @temperature_22.setter
    def temperature_22(self, value=None):
        """  Corresponds to IDD Field `temperature_22`

        Args:
            value (float): value for IDD Field `temperature_22`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_22`'.format(value))

        self._data["Temperature 22"] = value

    @property
    def temperature_23(self):
        """Get temperature_23

        Returns:
            float: the value of `temperature_23` or None if not set
        """
        return self._data["Temperature 23"]

    @temperature_23.setter
    def temperature_23(self, value=None):
        """  Corresponds to IDD Field `temperature_23`

        Args:
            value (float): value for IDD Field `temperature_23`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_23`'.format(value))

        self._data["Temperature 23"] = value

    @property
    def temperature_24(self):
        """Get temperature_24

        Returns:
            float: the value of `temperature_24` or None if not set
        """
        return self._data["Temperature 24"]

    @temperature_24.setter
    def temperature_24(self, value=None):
        """  Corresponds to IDD Field `temperature_24`

        Args:
            value (float): value for IDD Field `temperature_24`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_24`'.format(value))

        self._data["Temperature 24"] = value

    @property
    def temperature_25(self):
        """Get temperature_25

        Returns:
            float: the value of `temperature_25` or None if not set
        """
        return self._data["Temperature 25"]

    @temperature_25.setter
    def temperature_25(self, value=None):
        """  Corresponds to IDD Field `temperature_25`

        Args:
            value (float): value for IDD Field `temperature_25`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_25`'.format(value))

        self._data["Temperature 25"] = value

    @property
    def temperature_26(self):
        """Get temperature_26

        Returns:
            float: the value of `temperature_26` or None if not set
        """
        return self._data["Temperature 26"]

    @temperature_26.setter
    def temperature_26(self, value=None):
        """  Corresponds to IDD Field `temperature_26`

        Args:
            value (float): value for IDD Field `temperature_26`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_26`'.format(value))

        self._data["Temperature 26"] = value

    @property
    def temperature_27(self):
        """Get temperature_27

        Returns:
            float: the value of `temperature_27` or None if not set
        """
        return self._data["Temperature 27"]

    @temperature_27.setter
    def temperature_27(self, value=None):
        """  Corresponds to IDD Field `temperature_27`

        Args:
            value (float): value for IDD Field `temperature_27`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_27`'.format(value))

        self._data["Temperature 27"] = value

    @property
    def temperature_28(self):
        """Get temperature_28

        Returns:
            float: the value of `temperature_28` or None if not set
        """
        return self._data["Temperature 28"]

    @temperature_28.setter
    def temperature_28(self, value=None):
        """  Corresponds to IDD Field `temperature_28`

        Args:
            value (float): value for IDD Field `temperature_28`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_28`'.format(value))

        self._data["Temperature 28"] = value

    @property
    def temperature_29(self):
        """Get temperature_29

        Returns:
            float: the value of `temperature_29` or None if not set
        """
        return self._data["Temperature 29"]

    @temperature_29.setter
    def temperature_29(self, value=None):
        """  Corresponds to IDD Field `temperature_29`

        Args:
            value (float): value for IDD Field `temperature_29`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_29`'.format(value))

        self._data["Temperature 29"] = value

    @property
    def temperature_30(self):
        """Get temperature_30

        Returns:
            float: the value of `temperature_30` or None if not set
        """
        return self._data["Temperature 30"]

    @temperature_30.setter
    def temperature_30(self, value=None):
        """  Corresponds to IDD Field `temperature_30`

        Args:
            value (float): value for IDD Field `temperature_30`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_30`'.format(value))

        self._data["Temperature 30"] = value

    @property
    def temperature_31(self):
        """Get temperature_31

        Returns:
            float: the value of `temperature_31` or None if not set
        """
        return self._data["Temperature 31"]

    @temperature_31.setter
    def temperature_31(self, value=None):
        """  Corresponds to IDD Field `temperature_31`

        Args:
            value (float): value for IDD Field `temperature_31`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_31`'.format(value))

        self._data["Temperature 31"] = value

    @property
    def temperature_32(self):
        """Get temperature_32

        Returns:
            float: the value of `temperature_32` or None if not set
        """
        return self._data["Temperature 32"]

    @temperature_32.setter
    def temperature_32(self, value=None):
        """  Corresponds to IDD Field `temperature_32`

        Args:
            value (float): value for IDD Field `temperature_32`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_32`'.format(value))

        self._data["Temperature 32"] = value

    @property
    def temperature_33(self):
        """Get temperature_33

        Returns:
            float: the value of `temperature_33` or None if not set
        """
        return self._data["Temperature 33"]

    @temperature_33.setter
    def temperature_33(self, value=None):
        """  Corresponds to IDD Field `temperature_33`

        Args:
            value (float): value for IDD Field `temperature_33`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_33`'.format(value))

        self._data["Temperature 33"] = value

    @property
    def temperature_34(self):
        """Get temperature_34

        Returns:
            float: the value of `temperature_34` or None if not set
        """
        return self._data["Temperature 34"]

    @temperature_34.setter
    def temperature_34(self, value=None):
        """  Corresponds to IDD Field `temperature_34`

        Args:
            value (float): value for IDD Field `temperature_34`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_34`'.format(value))

        self._data["Temperature 34"] = value

    @property
    def temperature_35(self):
        """Get temperature_35

        Returns:
            float: the value of `temperature_35` or None if not set
        """
        return self._data["Temperature 35"]

    @temperature_35.setter
    def temperature_35(self, value=None):
        """  Corresponds to IDD Field `temperature_35`

        Args:
            value (float): value for IDD Field `temperature_35`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_35`'.format(value))

        self._data["Temperature 35"] = value

    @property
    def temperature_36(self):
        """Get temperature_36

        Returns:
            float: the value of `temperature_36` or None if not set
        """
        return self._data["Temperature 36"]

    @temperature_36.setter
    def temperature_36(self, value=None):
        """  Corresponds to IDD Field `temperature_36`

        Args:
            value (float): value for IDD Field `temperature_36`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_36`'.format(value))

        self._data["Temperature 36"] = value

    @property
    def temperature_37(self):
        """Get temperature_37

        Returns:
            float: the value of `temperature_37` or None if not set
        """
        return self._data["Temperature 37"]

    @temperature_37.setter
    def temperature_37(self, value=None):
        """  Corresponds to IDD Field `temperature_37`

        Args:
            value (float): value for IDD Field `temperature_37`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_37`'.format(value))

        self._data["Temperature 37"] = value

    @property
    def temperature_38(self):
        """Get temperature_38

        Returns:
            float: the value of `temperature_38` or None if not set
        """
        return self._data["Temperature 38"]

    @temperature_38.setter
    def temperature_38(self, value=None):
        """  Corresponds to IDD Field `temperature_38`

        Args:
            value (float): value for IDD Field `temperature_38`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_38`'.format(value))

        self._data["Temperature 38"] = value

    @property
    def temperature_39(self):
        """Get temperature_39

        Returns:
            float: the value of `temperature_39` or None if not set
        """
        return self._data["Temperature 39"]

    @temperature_39.setter
    def temperature_39(self, value=None):
        """  Corresponds to IDD Field `temperature_39`

        Args:
            value (float): value for IDD Field `temperature_39`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_39`'.format(value))

        self._data["Temperature 39"] = value

    @property
    def temperature_40(self):
        """Get temperature_40

        Returns:
            float: the value of `temperature_40` or None if not set
        """
        return self._data["Temperature 40"]

    @temperature_40.setter
    def temperature_40(self, value=None):
        """  Corresponds to IDD Field `temperature_40`

        Args:
            value (float): value for IDD Field `temperature_40`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_40`'.format(value))

        self._data["Temperature 40"] = value

    @property
    def temperature_41(self):
        """Get temperature_41

        Returns:
            float: the value of `temperature_41` or None if not set
        """
        return self._data["Temperature 41"]

    @temperature_41.setter
    def temperature_41(self, value=None):
        """  Corresponds to IDD Field `temperature_41`

        Args:
            value (float): value for IDD Field `temperature_41`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_41`'.format(value))

        self._data["Temperature 41"] = value

    @property
    def temperature_42(self):
        """Get temperature_42

        Returns:
            float: the value of `temperature_42` or None if not set
        """
        return self._data["Temperature 42"]

    @temperature_42.setter
    def temperature_42(self, value=None):
        """  Corresponds to IDD Field `temperature_42`

        Args:
            value (float): value for IDD Field `temperature_42`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_42`'.format(value))

        self._data["Temperature 42"] = value

    @property
    def temperature_43(self):
        """Get temperature_43

        Returns:
            float: the value of `temperature_43` or None if not set
        """
        return self._data["Temperature 43"]

    @temperature_43.setter
    def temperature_43(self, value=None):
        """  Corresponds to IDD Field `temperature_43`

        Args:
            value (float): value for IDD Field `temperature_43`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_43`'.format(value))

        self._data["Temperature 43"] = value

    @property
    def temperature_44(self):
        """Get temperature_44

        Returns:
            float: the value of `temperature_44` or None if not set
        """
        return self._data["Temperature 44"]

    @temperature_44.setter
    def temperature_44(self, value=None):
        """  Corresponds to IDD Field `temperature_44`

        Args:
            value (float): value for IDD Field `temperature_44`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_44`'.format(value))

        self._data["Temperature 44"] = value

    @property
    def temperature_45(self):
        """Get temperature_45

        Returns:
            float: the value of `temperature_45` or None if not set
        """
        return self._data["Temperature 45"]

    @temperature_45.setter
    def temperature_45(self, value=None):
        """  Corresponds to IDD Field `temperature_45`

        Args:
            value (float): value for IDD Field `temperature_45`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_45`'.format(value))

        self._data["Temperature 45"] = value

    @property
    def temperature_46(self):
        """Get temperature_46

        Returns:
            float: the value of `temperature_46` or None if not set
        """
        return self._data["Temperature 46"]

    @temperature_46.setter
    def temperature_46(self, value=None):
        """  Corresponds to IDD Field `temperature_46`

        Args:
            value (float): value for IDD Field `temperature_46`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_46`'.format(value))

        self._data["Temperature 46"] = value

    @property
    def temperature_47(self):
        """Get temperature_47

        Returns:
            float: the value of `temperature_47` or None if not set
        """
        return self._data["Temperature 47"]

    @temperature_47.setter
    def temperature_47(self, value=None):
        """  Corresponds to IDD Field `temperature_47`

        Args:
            value (float): value for IDD Field `temperature_47`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_47`'.format(value))

        self._data["Temperature 47"] = value

    @property
    def temperature_48(self):
        """Get temperature_48

        Returns:
            float: the value of `temperature_48` or None if not set
        """
        return self._data["Temperature 48"]

    @temperature_48.setter
    def temperature_48(self, value=None):
        """  Corresponds to IDD Field `temperature_48`

        Args:
            value (float): value for IDD Field `temperature_48`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_48`'.format(value))

        self._data["Temperature 48"] = value

    @property
    def temperature_49(self):
        """Get temperature_49

        Returns:
            float: the value of `temperature_49` or None if not set
        """
        return self._data["Temperature 49"]

    @temperature_49.setter
    def temperature_49(self, value=None):
        """  Corresponds to IDD Field `temperature_49`

        Args:
            value (float): value for IDD Field `temperature_49`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_49`'.format(value))

        self._data["Temperature 49"] = value

    @property
    def temperature_50(self):
        """Get temperature_50

        Returns:
            float: the value of `temperature_50` or None if not set
        """
        return self._data["Temperature 50"]

    @temperature_50.setter
    def temperature_50(self, value=None):
        """  Corresponds to IDD Field `temperature_50`

        Args:
            value (float): value for IDD Field `temperature_50`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_50`'.format(value))

        self._data["Temperature 50"] = value

    @property
    def temperature_51(self):
        """Get temperature_51

        Returns:
            float: the value of `temperature_51` or None if not set
        """
        return self._data["Temperature 51"]

    @temperature_51.setter
    def temperature_51(self, value=None):
        """  Corresponds to IDD Field `temperature_51`

        Args:
            value (float): value for IDD Field `temperature_51`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_51`'.format(value))

        self._data["Temperature 51"] = value

    @property
    def temperature_52(self):
        """Get temperature_52

        Returns:
            float: the value of `temperature_52` or None if not set
        """
        return self._data["Temperature 52"]

    @temperature_52.setter
    def temperature_52(self, value=None):
        """  Corresponds to IDD Field `temperature_52`

        Args:
            value (float): value for IDD Field `temperature_52`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_52`'.format(value))

        self._data["Temperature 52"] = value

    @property
    def temperature_53(self):
        """Get temperature_53

        Returns:
            float: the value of `temperature_53` or None if not set
        """
        return self._data["Temperature 53"]

    @temperature_53.setter
    def temperature_53(self, value=None):
        """  Corresponds to IDD Field `temperature_53`

        Args:
            value (float): value for IDD Field `temperature_53`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_53`'.format(value))

        self._data["Temperature 53"] = value

    @property
    def temperature_54(self):
        """Get temperature_54

        Returns:
            float: the value of `temperature_54` or None if not set
        """
        return self._data["Temperature 54"]

    @temperature_54.setter
    def temperature_54(self, value=None):
        """  Corresponds to IDD Field `temperature_54`

        Args:
            value (float): value for IDD Field `temperature_54`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_54`'.format(value))

        self._data["Temperature 54"] = value

    @property
    def temperature_55(self):
        """Get temperature_55

        Returns:
            float: the value of `temperature_55` or None if not set
        """
        return self._data["Temperature 55"]

    @temperature_55.setter
    def temperature_55(self, value=None):
        """  Corresponds to IDD Field `temperature_55`

        Args:
            value (float): value for IDD Field `temperature_55`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_55`'.format(value))

        self._data["Temperature 55"] = value

    @property
    def temperature_56(self):
        """Get temperature_56

        Returns:
            float: the value of `temperature_56` or None if not set
        """
        return self._data["Temperature 56"]

    @temperature_56.setter
    def temperature_56(self, value=None):
        """  Corresponds to IDD Field `temperature_56`

        Args:
            value (float): value for IDD Field `temperature_56`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_56`'.format(value))

        self._data["Temperature 56"] = value

    @property
    def temperature_57(self):
        """Get temperature_57

        Returns:
            float: the value of `temperature_57` or None if not set
        """
        return self._data["Temperature 57"]

    @temperature_57.setter
    def temperature_57(self, value=None):
        """  Corresponds to IDD Field `temperature_57`

        Args:
            value (float): value for IDD Field `temperature_57`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_57`'.format(value))

        self._data["Temperature 57"] = value

    @property
    def temperature_58(self):
        """Get temperature_58

        Returns:
            float: the value of `temperature_58` or None if not set
        """
        return self._data["Temperature 58"]

    @temperature_58.setter
    def temperature_58(self, value=None):
        """  Corresponds to IDD Field `temperature_58`

        Args:
            value (float): value for IDD Field `temperature_58`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_58`'.format(value))

        self._data["Temperature 58"] = value

    @property
    def temperature_59(self):
        """Get temperature_59

        Returns:
            float: the value of `temperature_59` or None if not set
        """
        return self._data["Temperature 59"]

    @temperature_59.setter
    def temperature_59(self, value=None):
        """  Corresponds to IDD Field `temperature_59`

        Args:
            value (float): value for IDD Field `temperature_59`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_59`'.format(value))

        self._data["Temperature 59"] = value

    @property
    def temperature_60(self):
        """Get temperature_60

        Returns:
            float: the value of `temperature_60` or None if not set
        """
        return self._data["Temperature 60"]

    @temperature_60.setter
    def temperature_60(self, value=None):
        """  Corresponds to IDD Field `temperature_60`

        Args:
            value (float): value for IDD Field `temperature_60`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_60`'.format(value))

        self._data["Temperature 60"] = value

    @property
    def temperature_61(self):
        """Get temperature_61

        Returns:
            float: the value of `temperature_61` or None if not set
        """
        return self._data["Temperature 61"]

    @temperature_61.setter
    def temperature_61(self, value=None):
        """  Corresponds to IDD Field `temperature_61`

        Args:
            value (float): value for IDD Field `temperature_61`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_61`'.format(value))

        self._data["Temperature 61"] = value

    @property
    def temperature_62(self):
        """Get temperature_62

        Returns:
            float: the value of `temperature_62` or None if not set
        """
        return self._data["Temperature 62"]

    @temperature_62.setter
    def temperature_62(self, value=None):
        """  Corresponds to IDD Field `temperature_62`

        Args:
            value (float): value for IDD Field `temperature_62`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_62`'.format(value))

        self._data["Temperature 62"] = value

    @property
    def temperature_63(self):
        """Get temperature_63

        Returns:
            float: the value of `temperature_63` or None if not set
        """
        return self._data["Temperature 63"]

    @temperature_63.setter
    def temperature_63(self, value=None):
        """  Corresponds to IDD Field `temperature_63`

        Args:
            value (float): value for IDD Field `temperature_63`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_63`'.format(value))

        self._data["Temperature 63"] = value

    @property
    def temperature_64(self):
        """Get temperature_64

        Returns:
            float: the value of `temperature_64` or None if not set
        """
        return self._data["Temperature 64"]

    @temperature_64.setter
    def temperature_64(self, value=None):
        """  Corresponds to IDD Field `temperature_64`

        Args:
            value (float): value for IDD Field `temperature_64`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_64`'.format(value))

        self._data["Temperature 64"] = value

    @property
    def temperature_65(self):
        """Get temperature_65

        Returns:
            float: the value of `temperature_65` or None if not set
        """
        return self._data["Temperature 65"]

    @temperature_65.setter
    def temperature_65(self, value=None):
        """  Corresponds to IDD Field `temperature_65`

        Args:
            value (float): value for IDD Field `temperature_65`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_65`'.format(value))

        self._data["Temperature 65"] = value

    @property
    def temperature_66(self):
        """Get temperature_66

        Returns:
            float: the value of `temperature_66` or None if not set
        """
        return self._data["Temperature 66"]

    @temperature_66.setter
    def temperature_66(self, value=None):
        """  Corresponds to IDD Field `temperature_66`

        Args:
            value (float): value for IDD Field `temperature_66`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_66`'.format(value))

        self._data["Temperature 66"] = value

    @property
    def temperature_67(self):
        """Get temperature_67

        Returns:
            float: the value of `temperature_67` or None if not set
        """
        return self._data["Temperature 67"]

    @temperature_67.setter
    def temperature_67(self, value=None):
        """  Corresponds to IDD Field `temperature_67`

        Args:
            value (float): value for IDD Field `temperature_67`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_67`'.format(value))

        self._data["Temperature 67"] = value

    @property
    def temperature_68(self):
        """Get temperature_68

        Returns:
            float: the value of `temperature_68` or None if not set
        """
        return self._data["Temperature 68"]

    @temperature_68.setter
    def temperature_68(self, value=None):
        """  Corresponds to IDD Field `temperature_68`

        Args:
            value (float): value for IDD Field `temperature_68`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_68`'.format(value))

        self._data["Temperature 68"] = value

    @property
    def temperature_69(self):
        """Get temperature_69

        Returns:
            float: the value of `temperature_69` or None if not set
        """
        return self._data["Temperature 69"]

    @temperature_69.setter
    def temperature_69(self, value=None):
        """  Corresponds to IDD Field `temperature_69`

        Args:
            value (float): value for IDD Field `temperature_69`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_69`'.format(value))

        self._data["Temperature 69"] = value

    @property
    def temperature_70(self):
        """Get temperature_70

        Returns:
            float: the value of `temperature_70` or None if not set
        """
        return self._data["Temperature 70"]

    @temperature_70.setter
    def temperature_70(self, value=None):
        """  Corresponds to IDD Field `temperature_70`

        Args:
            value (float): value for IDD Field `temperature_70`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_70`'.format(value))

        self._data["Temperature 70"] = value

    @property
    def temperature_71(self):
        """Get temperature_71

        Returns:
            float: the value of `temperature_71` or None if not set
        """
        return self._data["Temperature 71"]

    @temperature_71.setter
    def temperature_71(self, value=None):
        """  Corresponds to IDD Field `temperature_71`

        Args:
            value (float): value for IDD Field `temperature_71`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_71`'.format(value))

        self._data["Temperature 71"] = value

    @property
    def temperature_72(self):
        """Get temperature_72

        Returns:
            float: the value of `temperature_72` or None if not set
        """
        return self._data["Temperature 72"]

    @temperature_72.setter
    def temperature_72(self, value=None):
        """  Corresponds to IDD Field `temperature_72`

        Args:
            value (float): value for IDD Field `temperature_72`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_72`'.format(value))

        self._data["Temperature 72"] = value

    @property
    def temperature_73(self):
        """Get temperature_73

        Returns:
            float: the value of `temperature_73` or None if not set
        """
        return self._data["Temperature 73"]

    @temperature_73.setter
    def temperature_73(self, value=None):
        """  Corresponds to IDD Field `temperature_73`

        Args:
            value (float): value for IDD Field `temperature_73`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_73`'.format(value))

        self._data["Temperature 73"] = value

    @property
    def temperature_74(self):
        """Get temperature_74

        Returns:
            float: the value of `temperature_74` or None if not set
        """
        return self._data["Temperature 74"]

    @temperature_74.setter
    def temperature_74(self, value=None):
        """  Corresponds to IDD Field `temperature_74`

        Args:
            value (float): value for IDD Field `temperature_74`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_74`'.format(value))

        self._data["Temperature 74"] = value

    @property
    def temperature_75(self):
        """Get temperature_75

        Returns:
            float: the value of `temperature_75` or None if not set
        """
        return self._data["Temperature 75"]

    @temperature_75.setter
    def temperature_75(self, value=None):
        """  Corresponds to IDD Field `temperature_75`

        Args:
            value (float): value for IDD Field `temperature_75`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_75`'.format(value))

        self._data["Temperature 75"] = value

    @property
    def temperature_76(self):
        """Get temperature_76

        Returns:
            float: the value of `temperature_76` or None if not set
        """
        return self._data["Temperature 76"]

    @temperature_76.setter
    def temperature_76(self, value=None):
        """  Corresponds to IDD Field `temperature_76`

        Args:
            value (float): value for IDD Field `temperature_76`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_76`'.format(value))

        self._data["Temperature 76"] = value

    @property
    def temperature_77(self):
        """Get temperature_77

        Returns:
            float: the value of `temperature_77` or None if not set
        """
        return self._data["Temperature 77"]

    @temperature_77.setter
    def temperature_77(self, value=None):
        """  Corresponds to IDD Field `temperature_77`

        Args:
            value (float): value for IDD Field `temperature_77`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_77`'.format(value))

        self._data["Temperature 77"] = value

    @property
    def temperature_78(self):
        """Get temperature_78

        Returns:
            float: the value of `temperature_78` or None if not set
        """
        return self._data["Temperature 78"]

    @temperature_78.setter
    def temperature_78(self, value=None):
        """  Corresponds to IDD Field `temperature_78`

        Args:
            value (float): value for IDD Field `temperature_78`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_78`'.format(value))

        self._data["Temperature 78"] = value

    @property
    def temperature_79(self):
        """Get temperature_79

        Returns:
            float: the value of `temperature_79` or None if not set
        """
        return self._data["Temperature 79"]

    @temperature_79.setter
    def temperature_79(self, value=None):
        """  Corresponds to IDD Field `temperature_79`

        Args:
            value (float): value for IDD Field `temperature_79`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_79`'.format(value))

        self._data["Temperature 79"] = value

    @property
    def temperature_80(self):
        """Get temperature_80

        Returns:
            float: the value of `temperature_80` or None if not set
        """
        return self._data["Temperature 80"]

    @temperature_80.setter
    def temperature_80(self, value=None):
        """  Corresponds to IDD Field `temperature_80`

        Args:
            value (float): value for IDD Field `temperature_80`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_80`'.format(value))

        self._data["Temperature 80"] = value

    @property
    def temperature_81(self):
        """Get temperature_81

        Returns:
            float: the value of `temperature_81` or None if not set
        """
        return self._data["Temperature 81"]

    @temperature_81.setter
    def temperature_81(self, value=None):
        """  Corresponds to IDD Field `temperature_81`

        Args:
            value (float): value for IDD Field `temperature_81`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_81`'.format(value))

        self._data["Temperature 81"] = value

    @property
    def temperature_82(self):
        """Get temperature_82

        Returns:
            float: the value of `temperature_82` or None if not set
        """
        return self._data["Temperature 82"]

    @temperature_82.setter
    def temperature_82(self, value=None):
        """  Corresponds to IDD Field `temperature_82`

        Args:
            value (float): value for IDD Field `temperature_82`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_82`'.format(value))

        self._data["Temperature 82"] = value

    @property
    def temperature_83(self):
        """Get temperature_83

        Returns:
            float: the value of `temperature_83` or None if not set
        """
        return self._data["Temperature 83"]

    @temperature_83.setter
    def temperature_83(self, value=None):
        """  Corresponds to IDD Field `temperature_83`

        Args:
            value (float): value for IDD Field `temperature_83`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_83`'.format(value))

        self._data["Temperature 83"] = value

    @property
    def temperature_84(self):
        """Get temperature_84

        Returns:
            float: the value of `temperature_84` or None if not set
        """
        return self._data["Temperature 84"]

    @temperature_84.setter
    def temperature_84(self, value=None):
        """  Corresponds to IDD Field `temperature_84`

        Args:
            value (float): value for IDD Field `temperature_84`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_84`'.format(value))

        self._data["Temperature 84"] = value

    @property
    def temperature_85(self):
        """Get temperature_85

        Returns:
            float: the value of `temperature_85` or None if not set
        """
        return self._data["Temperature 85"]

    @temperature_85.setter
    def temperature_85(self, value=None):
        """  Corresponds to IDD Field `temperature_85`

        Args:
            value (float): value for IDD Field `temperature_85`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_85`'.format(value))

        self._data["Temperature 85"] = value

    @property
    def temperature_86(self):
        """Get temperature_86

        Returns:
            float: the value of `temperature_86` or None if not set
        """
        return self._data["Temperature 86"]

    @temperature_86.setter
    def temperature_86(self, value=None):
        """  Corresponds to IDD Field `temperature_86`

        Args:
            value (float): value for IDD Field `temperature_86`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_86`'.format(value))

        self._data["Temperature 86"] = value

    @property
    def temperature_87(self):
        """Get temperature_87

        Returns:
            float: the value of `temperature_87` or None if not set
        """
        return self._data["Temperature 87"]

    @temperature_87.setter
    def temperature_87(self, value=None):
        """  Corresponds to IDD Field `temperature_87`

        Args:
            value (float): value for IDD Field `temperature_87`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_87`'.format(value))

        self._data["Temperature 87"] = value

    @property
    def temperature_88(self):
        """Get temperature_88

        Returns:
            float: the value of `temperature_88` or None if not set
        """
        return self._data["Temperature 88"]

    @temperature_88.setter
    def temperature_88(self, value=None):
        """  Corresponds to IDD Field `temperature_88`

        Args:
            value (float): value for IDD Field `temperature_88`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_88`'.format(value))

        self._data["Temperature 88"] = value

    @property
    def temperature_89(self):
        """Get temperature_89

        Returns:
            float: the value of `temperature_89` or None if not set
        """
        return self._data["Temperature 89"]

    @temperature_89.setter
    def temperature_89(self, value=None):
        """  Corresponds to IDD Field `temperature_89`

        Args:
            value (float): value for IDD Field `temperature_89`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_89`'.format(value))

        self._data["Temperature 89"] = value

    @property
    def temperature_90(self):
        """Get temperature_90

        Returns:
            float: the value of `temperature_90` or None if not set
        """
        return self._data["Temperature 90"]

    @temperature_90.setter
    def temperature_90(self, value=None):
        """  Corresponds to IDD Field `temperature_90`

        Args:
            value (float): value for IDD Field `temperature_90`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_90`'.format(value))

        self._data["Temperature 90"] = value

    @property
    def temperature_91(self):
        """Get temperature_91

        Returns:
            float: the value of `temperature_91` or None if not set
        """
        return self._data["Temperature 91"]

    @temperature_91.setter
    def temperature_91(self, value=None):
        """  Corresponds to IDD Field `temperature_91`

        Args:
            value (float): value for IDD Field `temperature_91`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_91`'.format(value))

        self._data["Temperature 91"] = value

    @property
    def temperature_92(self):
        """Get temperature_92

        Returns:
            float: the value of `temperature_92` or None if not set
        """
        return self._data["Temperature 92"]

    @temperature_92.setter
    def temperature_92(self, value=None):
        """  Corresponds to IDD Field `temperature_92`

        Args:
            value (float): value for IDD Field `temperature_92`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_92`'.format(value))

        self._data["Temperature 92"] = value

    @property
    def temperature_93(self):
        """Get temperature_93

        Returns:
            float: the value of `temperature_93` or None if not set
        """
        return self._data["Temperature 93"]

    @temperature_93.setter
    def temperature_93(self, value=None):
        """  Corresponds to IDD Field `temperature_93`

        Args:
            value (float): value for IDD Field `temperature_93`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_93`'.format(value))

        self._data["Temperature 93"] = value

    @property
    def temperature_94(self):
        """Get temperature_94

        Returns:
            float: the value of `temperature_94` or None if not set
        """
        return self._data["Temperature 94"]

    @temperature_94.setter
    def temperature_94(self, value=None):
        """  Corresponds to IDD Field `temperature_94`

        Args:
            value (float): value for IDD Field `temperature_94`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_94`'.format(value))

        self._data["Temperature 94"] = value

    @property
    def temperature_95(self):
        """Get temperature_95

        Returns:
            float: the value of `temperature_95` or None if not set
        """
        return self._data["Temperature 95"]

    @temperature_95.setter
    def temperature_95(self, value=None):
        """  Corresponds to IDD Field `temperature_95`

        Args:
            value (float): value for IDD Field `temperature_95`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_95`'.format(value))

        self._data["Temperature 95"] = value

    @property
    def temperature_96(self):
        """Get temperature_96

        Returns:
            float: the value of `temperature_96` or None if not set
        """
        return self._data["Temperature 96"]

    @temperature_96.setter
    def temperature_96(self, value=None):
        """  Corresponds to IDD Field `temperature_96`

        Args:
            value (float): value for IDD Field `temperature_96`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_96`'.format(value))

        self._data["Temperature 96"] = value

    @property
    def temperature_97(self):
        """Get temperature_97

        Returns:
            float: the value of `temperature_97` or None if not set
        """
        return self._data["Temperature 97"]

    @temperature_97.setter
    def temperature_97(self, value=None):
        """  Corresponds to IDD Field `temperature_97`

        Args:
            value (float): value for IDD Field `temperature_97`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_97`'.format(value))

        self._data["Temperature 97"] = value

    @property
    def temperature_98(self):
        """Get temperature_98

        Returns:
            float: the value of `temperature_98` or None if not set
        """
        return self._data["Temperature 98"]

    @temperature_98.setter
    def temperature_98(self, value=None):
        """  Corresponds to IDD Field `temperature_98`

        Args:
            value (float): value for IDD Field `temperature_98`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_98`'.format(value))

        self._data["Temperature 98"] = value

    @property
    def temperature_99(self):
        """Get temperature_99

        Returns:
            float: the value of `temperature_99` or None if not set
        """
        return self._data["Temperature 99"]

    @temperature_99.setter
    def temperature_99(self, value=None):
        """  Corresponds to IDD Field `temperature_99`

        Args:
            value (float): value for IDD Field `temperature_99`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_99`'.format(value))

        self._data["Temperature 99"] = value

    @property
    def temperature_100(self):
        """Get temperature_100

        Returns:
            float: the value of `temperature_100` or None if not set
        """
        return self._data["Temperature 100"]

    @temperature_100.setter
    def temperature_100(self, value=None):
        """  Corresponds to IDD Field `temperature_100`

        Args:
            value (float): value for IDD Field `temperature_100`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_100`'.format(value))

        self._data["Temperature 100"] = value

    @property
    def temperature_101(self):
        """Get temperature_101

        Returns:
            float: the value of `temperature_101` or None if not set
        """
        return self._data["Temperature 101"]

    @temperature_101.setter
    def temperature_101(self, value=None):
        """  Corresponds to IDD Field `temperature_101`

        Args:
            value (float): value for IDD Field `temperature_101`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_101`'.format(value))

        self._data["Temperature 101"] = value

    @property
    def temperature_102(self):
        """Get temperature_102

        Returns:
            float: the value of `temperature_102` or None if not set
        """
        return self._data["Temperature 102"]

    @temperature_102.setter
    def temperature_102(self, value=None):
        """  Corresponds to IDD Field `temperature_102`

        Args:
            value (float): value for IDD Field `temperature_102`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_102`'.format(value))

        self._data["Temperature 102"] = value

    @property
    def temperature_103(self):
        """Get temperature_103

        Returns:
            float: the value of `temperature_103` or None if not set
        """
        return self._data["Temperature 103"]

    @temperature_103.setter
    def temperature_103(self, value=None):
        """  Corresponds to IDD Field `temperature_103`

        Args:
            value (float): value for IDD Field `temperature_103`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_103`'.format(value))

        self._data["Temperature 103"] = value

    @property
    def temperature_104(self):
        """Get temperature_104

        Returns:
            float: the value of `temperature_104` or None if not set
        """
        return self._data["Temperature 104"]

    @temperature_104.setter
    def temperature_104(self, value=None):
        """  Corresponds to IDD Field `temperature_104`

        Args:
            value (float): value for IDD Field `temperature_104`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_104`'.format(value))

        self._data["Temperature 104"] = value

    @property
    def temperature_105(self):
        """Get temperature_105

        Returns:
            float: the value of `temperature_105` or None if not set
        """
        return self._data["Temperature 105"]

    @temperature_105.setter
    def temperature_105(self, value=None):
        """  Corresponds to IDD Field `temperature_105`

        Args:
            value (float): value for IDD Field `temperature_105`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_105`'.format(value))

        self._data["Temperature 105"] = value

    @property
    def temperature_106(self):
        """Get temperature_106

        Returns:
            float: the value of `temperature_106` or None if not set
        """
        return self._data["Temperature 106"]

    @temperature_106.setter
    def temperature_106(self, value=None):
        """  Corresponds to IDD Field `temperature_106`

        Args:
            value (float): value for IDD Field `temperature_106`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_106`'.format(value))

        self._data["Temperature 106"] = value

    @property
    def temperature_107(self):
        """Get temperature_107

        Returns:
            float: the value of `temperature_107` or None if not set
        """
        return self._data["Temperature 107"]

    @temperature_107.setter
    def temperature_107(self, value=None):
        """  Corresponds to IDD Field `temperature_107`

        Args:
            value (float): value for IDD Field `temperature_107`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_107`'.format(value))

        self._data["Temperature 107"] = value

    @property
    def temperature_108(self):
        """Get temperature_108

        Returns:
            float: the value of `temperature_108` or None if not set
        """
        return self._data["Temperature 108"]

    @temperature_108.setter
    def temperature_108(self, value=None):
        """  Corresponds to IDD Field `temperature_108`

        Args:
            value (float): value for IDD Field `temperature_108`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_108`'.format(value))

        self._data["Temperature 108"] = value

    @property
    def temperature_109(self):
        """Get temperature_109

        Returns:
            float: the value of `temperature_109` or None if not set
        """
        return self._data["Temperature 109"]

    @temperature_109.setter
    def temperature_109(self, value=None):
        """  Corresponds to IDD Field `temperature_109`

        Args:
            value (float): value for IDD Field `temperature_109`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_109`'.format(value))

        self._data["Temperature 109"] = value

    @property
    def temperature_110(self):
        """Get temperature_110

        Returns:
            float: the value of `temperature_110` or None if not set
        """
        return self._data["Temperature 110"]

    @temperature_110.setter
    def temperature_110(self, value=None):
        """  Corresponds to IDD Field `temperature_110`

        Args:
            value (float): value for IDD Field `temperature_110`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_110`'.format(value))

        self._data["Temperature 110"] = value

    @property
    def temperature_111(self):
        """Get temperature_111

        Returns:
            float: the value of `temperature_111` or None if not set
        """
        return self._data["Temperature 111"]

    @temperature_111.setter
    def temperature_111(self, value=None):
        """  Corresponds to IDD Field `temperature_111`

        Args:
            value (float): value for IDD Field `temperature_111`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_111`'.format(value))

        self._data["Temperature 111"] = value

    @property
    def temperature_112(self):
        """Get temperature_112

        Returns:
            float: the value of `temperature_112` or None if not set
        """
        return self._data["Temperature 112"]

    @temperature_112.setter
    def temperature_112(self, value=None):
        """  Corresponds to IDD Field `temperature_112`

        Args:
            value (float): value for IDD Field `temperature_112`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_112`'.format(value))

        self._data["Temperature 112"] = value

    @property
    def temperature_113(self):
        """Get temperature_113

        Returns:
            float: the value of `temperature_113` or None if not set
        """
        return self._data["Temperature 113"]

    @temperature_113.setter
    def temperature_113(self, value=None):
        """  Corresponds to IDD Field `temperature_113`

        Args:
            value (float): value for IDD Field `temperature_113`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_113`'.format(value))

        self._data["Temperature 113"] = value

    @property
    def temperature_114(self):
        """Get temperature_114

        Returns:
            float: the value of `temperature_114` or None if not set
        """
        return self._data["Temperature 114"]

    @temperature_114.setter
    def temperature_114(self, value=None):
        """  Corresponds to IDD Field `temperature_114`

        Args:
            value (float): value for IDD Field `temperature_114`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_114`'.format(value))

        self._data["Temperature 114"] = value

    @property
    def temperature_115(self):
        """Get temperature_115

        Returns:
            float: the value of `temperature_115` or None if not set
        """
        return self._data["Temperature 115"]

    @temperature_115.setter
    def temperature_115(self, value=None):
        """  Corresponds to IDD Field `temperature_115`

        Args:
            value (float): value for IDD Field `temperature_115`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_115`'.format(value))

        self._data["Temperature 115"] = value

    @property
    def temperature_116(self):
        """Get temperature_116

        Returns:
            float: the value of `temperature_116` or None if not set
        """
        return self._data["Temperature 116"]

    @temperature_116.setter
    def temperature_116(self, value=None):
        """  Corresponds to IDD Field `temperature_116`

        Args:
            value (float): value for IDD Field `temperature_116`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_116`'.format(value))

        self._data["Temperature 116"] = value

    @property
    def temperature_117(self):
        """Get temperature_117

        Returns:
            float: the value of `temperature_117` or None if not set
        """
        return self._data["Temperature 117"]

    @temperature_117.setter
    def temperature_117(self, value=None):
        """  Corresponds to IDD Field `temperature_117`

        Args:
            value (float): value for IDD Field `temperature_117`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_117`'.format(value))

        self._data["Temperature 117"] = value

    @property
    def temperature_118(self):
        """Get temperature_118

        Returns:
            float: the value of `temperature_118` or None if not set
        """
        return self._data["Temperature 118"]

    @temperature_118.setter
    def temperature_118(self, value=None):
        """  Corresponds to IDD Field `temperature_118`

        Args:
            value (float): value for IDD Field `temperature_118`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_118`'.format(value))

        self._data["Temperature 118"] = value

    @property
    def temperature_119(self):
        """Get temperature_119

        Returns:
            float: the value of `temperature_119` or None if not set
        """
        return self._data["Temperature 119"]

    @temperature_119.setter
    def temperature_119(self, value=None):
        """  Corresponds to IDD Field `temperature_119`

        Args:
            value (float): value for IDD Field `temperature_119`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_119`'.format(value))

        self._data["Temperature 119"] = value

    @property
    def temperature_120(self):
        """Get temperature_120

        Returns:
            float: the value of `temperature_120` or None if not set
        """
        return self._data["Temperature 120"]

    @temperature_120.setter
    def temperature_120(self, value=None):
        """  Corresponds to IDD Field `temperature_120`

        Args:
            value (float): value for IDD Field `temperature_120`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_120`'.format(value))

        self._data["Temperature 120"] = value

    @property
    def temperature_121(self):
        """Get temperature_121

        Returns:
            float: the value of `temperature_121` or None if not set
        """
        return self._data["Temperature 121"]

    @temperature_121.setter
    def temperature_121(self, value=None):
        """  Corresponds to IDD Field `temperature_121`

        Args:
            value (float): value for IDD Field `temperature_121`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_121`'.format(value))

        self._data["Temperature 121"] = value

    @property
    def temperature_122(self):
        """Get temperature_122

        Returns:
            float: the value of `temperature_122` or None if not set
        """
        return self._data["Temperature 122"]

    @temperature_122.setter
    def temperature_122(self, value=None):
        """  Corresponds to IDD Field `temperature_122`

        Args:
            value (float): value for IDD Field `temperature_122`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_122`'.format(value))

        self._data["Temperature 122"] = value

    @property
    def temperature_123(self):
        """Get temperature_123

        Returns:
            float: the value of `temperature_123` or None if not set
        """
        return self._data["Temperature 123"]

    @temperature_123.setter
    def temperature_123(self, value=None):
        """  Corresponds to IDD Field `temperature_123`

        Args:
            value (float): value for IDD Field `temperature_123`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_123`'.format(value))

        self._data["Temperature 123"] = value

    @property
    def temperature_124(self):
        """Get temperature_124

        Returns:
            float: the value of `temperature_124` or None if not set
        """
        return self._data["Temperature 124"]

    @temperature_124.setter
    def temperature_124(self, value=None):
        """  Corresponds to IDD Field `temperature_124`

        Args:
            value (float): value for IDD Field `temperature_124`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_124`'.format(value))

        self._data["Temperature 124"] = value

    @property
    def temperature_125(self):
        """Get temperature_125

        Returns:
            float: the value of `temperature_125` or None if not set
        """
        return self._data["Temperature 125"]

    @temperature_125.setter
    def temperature_125(self, value=None):
        """  Corresponds to IDD Field `temperature_125`

        Args:
            value (float): value for IDD Field `temperature_125`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_125`'.format(value))

        self._data["Temperature 125"] = value

    @property
    def temperature_126(self):
        """Get temperature_126

        Returns:
            float: the value of `temperature_126` or None if not set
        """
        return self._data["Temperature 126"]

    @temperature_126.setter
    def temperature_126(self, value=None):
        """  Corresponds to IDD Field `temperature_126`

        Args:
            value (float): value for IDD Field `temperature_126`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_126`'.format(value))

        self._data["Temperature 126"] = value

    @property
    def temperature_127(self):
        """Get temperature_127

        Returns:
            float: the value of `temperature_127` or None if not set
        """
        return self._data["Temperature 127"]

    @temperature_127.setter
    def temperature_127(self, value=None):
        """  Corresponds to IDD Field `temperature_127`

        Args:
            value (float): value for IDD Field `temperature_127`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_127`'.format(value))

        self._data["Temperature 127"] = value

    @property
    def temperature_128(self):
        """Get temperature_128

        Returns:
            float: the value of `temperature_128` or None if not set
        """
        return self._data["Temperature 128"]

    @temperature_128.setter
    def temperature_128(self, value=None):
        """  Corresponds to IDD Field `temperature_128`

        Args:
            value (float): value for IDD Field `temperature_128`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_128`'.format(value))

        self._data["Temperature 128"] = value

    @property
    def temperature_129(self):
        """Get temperature_129

        Returns:
            float: the value of `temperature_129` or None if not set
        """
        return self._data["Temperature 129"]

    @temperature_129.setter
    def temperature_129(self, value=None):
        """  Corresponds to IDD Field `temperature_129`

        Args:
            value (float): value for IDD Field `temperature_129`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_129`'.format(value))

        self._data["Temperature 129"] = value

    @property
    def temperature_130(self):
        """Get temperature_130

        Returns:
            float: the value of `temperature_130` or None if not set
        """
        return self._data["Temperature 130"]

    @temperature_130.setter
    def temperature_130(self, value=None):
        """  Corresponds to IDD Field `temperature_130`

        Args:
            value (float): value for IDD Field `temperature_130`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_130`'.format(value))

        self._data["Temperature 130"] = value

    @property
    def temperature_131(self):
        """Get temperature_131

        Returns:
            float: the value of `temperature_131` or None if not set
        """
        return self._data["Temperature 131"]

    @temperature_131.setter
    def temperature_131(self, value=None):
        """  Corresponds to IDD Field `temperature_131`

        Args:
            value (float): value for IDD Field `temperature_131`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_131`'.format(value))

        self._data["Temperature 131"] = value

    @property
    def temperature_132(self):
        """Get temperature_132

        Returns:
            float: the value of `temperature_132` or None if not set
        """
        return self._data["Temperature 132"]

    @temperature_132.setter
    def temperature_132(self, value=None):
        """  Corresponds to IDD Field `temperature_132`

        Args:
            value (float): value for IDD Field `temperature_132`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_132`'.format(value))

        self._data["Temperature 132"] = value

    @property
    def temperature_133(self):
        """Get temperature_133

        Returns:
            float: the value of `temperature_133` or None if not set
        """
        return self._data["Temperature 133"]

    @temperature_133.setter
    def temperature_133(self, value=None):
        """  Corresponds to IDD Field `temperature_133`

        Args:
            value (float): value for IDD Field `temperature_133`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_133`'.format(value))

        self._data["Temperature 133"] = value

    @property
    def temperature_134(self):
        """Get temperature_134

        Returns:
            float: the value of `temperature_134` or None if not set
        """
        return self._data["Temperature 134"]

    @temperature_134.setter
    def temperature_134(self, value=None):
        """  Corresponds to IDD Field `temperature_134`

        Args:
            value (float): value for IDD Field `temperature_134`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_134`'.format(value))

        self._data["Temperature 134"] = value

    @property
    def temperature_135(self):
        """Get temperature_135

        Returns:
            float: the value of `temperature_135` or None if not set
        """
        return self._data["Temperature 135"]

    @temperature_135.setter
    def temperature_135(self, value=None):
        """  Corresponds to IDD Field `temperature_135`

        Args:
            value (float): value for IDD Field `temperature_135`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_135`'.format(value))

        self._data["Temperature 135"] = value

    @property
    def temperature_136(self):
        """Get temperature_136

        Returns:
            float: the value of `temperature_136` or None if not set
        """
        return self._data["Temperature 136"]

    @temperature_136.setter
    def temperature_136(self, value=None):
        """  Corresponds to IDD Field `temperature_136`

        Args:
            value (float): value for IDD Field `temperature_136`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_136`'.format(value))

        self._data["Temperature 136"] = value

    @property
    def temperature_137(self):
        """Get temperature_137

        Returns:
            float: the value of `temperature_137` or None if not set
        """
        return self._data["Temperature 137"]

    @temperature_137.setter
    def temperature_137(self, value=None):
        """  Corresponds to IDD Field `temperature_137`

        Args:
            value (float): value for IDD Field `temperature_137`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_137`'.format(value))

        self._data["Temperature 137"] = value

    @property
    def temperature_138(self):
        """Get temperature_138

        Returns:
            float: the value of `temperature_138` or None if not set
        """
        return self._data["Temperature 138"]

    @temperature_138.setter
    def temperature_138(self, value=None):
        """  Corresponds to IDD Field `temperature_138`

        Args:
            value (float): value for IDD Field `temperature_138`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_138`'.format(value))

        self._data["Temperature 138"] = value

    @property
    def temperature_139(self):
        """Get temperature_139

        Returns:
            float: the value of `temperature_139` or None if not set
        """
        return self._data["Temperature 139"]

    @temperature_139.setter
    def temperature_139(self, value=None):
        """  Corresponds to IDD Field `temperature_139`

        Args:
            value (float): value for IDD Field `temperature_139`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_139`'.format(value))

        self._data["Temperature 139"] = value

    @property
    def temperature_140(self):
        """Get temperature_140

        Returns:
            float: the value of `temperature_140` or None if not set
        """
        return self._data["Temperature 140"]

    @temperature_140.setter
    def temperature_140(self, value=None):
        """  Corresponds to IDD Field `temperature_140`

        Args:
            value (float): value for IDD Field `temperature_140`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_140`'.format(value))

        self._data["Temperature 140"] = value

    @property
    def temperature_141(self):
        """Get temperature_141

        Returns:
            float: the value of `temperature_141` or None if not set
        """
        return self._data["Temperature 141"]

    @temperature_141.setter
    def temperature_141(self, value=None):
        """  Corresponds to IDD Field `temperature_141`

        Args:
            value (float): value for IDD Field `temperature_141`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_141`'.format(value))

        self._data["Temperature 141"] = value

    @property
    def temperature_142(self):
        """Get temperature_142

        Returns:
            float: the value of `temperature_142` or None if not set
        """
        return self._data["Temperature 142"]

    @temperature_142.setter
    def temperature_142(self, value=None):
        """  Corresponds to IDD Field `temperature_142`

        Args:
            value (float): value for IDD Field `temperature_142`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_142`'.format(value))

        self._data["Temperature 142"] = value

    @property
    def temperature_143(self):
        """Get temperature_143

        Returns:
            float: the value of `temperature_143` or None if not set
        """
        return self._data["Temperature 143"]

    @temperature_143.setter
    def temperature_143(self, value=None):
        """  Corresponds to IDD Field `temperature_143`

        Args:
            value (float): value for IDD Field `temperature_143`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_143`'.format(value))

        self._data["Temperature 143"] = value

    @property
    def temperature_144(self):
        """Get temperature_144

        Returns:
            float: the value of `temperature_144` or None if not set
        """
        return self._data["Temperature 144"]

    @temperature_144.setter
    def temperature_144(self, value=None):
        """  Corresponds to IDD Field `temperature_144`

        Args:
            value (float): value for IDD Field `temperature_144`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_144`'.format(value))

        self._data["Temperature 144"] = value

    @property
    def temperature_145(self):
        """Get temperature_145

        Returns:
            float: the value of `temperature_145` or None if not set
        """
        return self._data["Temperature 145"]

    @temperature_145.setter
    def temperature_145(self, value=None):
        """  Corresponds to IDD Field `temperature_145`

        Args:
            value (float): value for IDD Field `temperature_145`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_145`'.format(value))

        self._data["Temperature 145"] = value

    @property
    def temperature_146(self):
        """Get temperature_146

        Returns:
            float: the value of `temperature_146` or None if not set
        """
        return self._data["Temperature 146"]

    @temperature_146.setter
    def temperature_146(self, value=None):
        """  Corresponds to IDD Field `temperature_146`

        Args:
            value (float): value for IDD Field `temperature_146`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_146`'.format(value))

        self._data["Temperature 146"] = value

    @property
    def temperature_147(self):
        """Get temperature_147

        Returns:
            float: the value of `temperature_147` or None if not set
        """
        return self._data["Temperature 147"]

    @temperature_147.setter
    def temperature_147(self, value=None):
        """  Corresponds to IDD Field `temperature_147`

        Args:
            value (float): value for IDD Field `temperature_147`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_147`'.format(value))

        self._data["Temperature 147"] = value

    @property
    def temperature_148(self):
        """Get temperature_148

        Returns:
            float: the value of `temperature_148` or None if not set
        """
        return self._data["Temperature 148"]

    @temperature_148.setter
    def temperature_148(self, value=None):
        """  Corresponds to IDD Field `temperature_148`

        Args:
            value (float): value for IDD Field `temperature_148`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_148`'.format(value))

        self._data["Temperature 148"] = value

    @property
    def temperature_149(self):
        """Get temperature_149

        Returns:
            float: the value of `temperature_149` or None if not set
        """
        return self._data["Temperature 149"]

    @temperature_149.setter
    def temperature_149(self, value=None):
        """  Corresponds to IDD Field `temperature_149`

        Args:
            value (float): value for IDD Field `temperature_149`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_149`'.format(value))

        self._data["Temperature 149"] = value

    @property
    def temperature_150(self):
        """Get temperature_150

        Returns:
            float: the value of `temperature_150` or None if not set
        """
        return self._data["Temperature 150"]

    @temperature_150.setter
    def temperature_150(self, value=None):
        """  Corresponds to IDD Field `temperature_150`

        Args:
            value (float): value for IDD Field `temperature_150`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_150`'.format(value))

        self._data["Temperature 150"] = value

    @property
    def temperature_151(self):
        """Get temperature_151

        Returns:
            float: the value of `temperature_151` or None if not set
        """
        return self._data["Temperature 151"]

    @temperature_151.setter
    def temperature_151(self, value=None):
        """  Corresponds to IDD Field `temperature_151`

        Args:
            value (float): value for IDD Field `temperature_151`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_151`'.format(value))

        self._data["Temperature 151"] = value

    @property
    def temperature_152(self):
        """Get temperature_152

        Returns:
            float: the value of `temperature_152` or None if not set
        """
        return self._data["Temperature 152"]

    @temperature_152.setter
    def temperature_152(self, value=None):
        """  Corresponds to IDD Field `temperature_152`

        Args:
            value (float): value for IDD Field `temperature_152`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_152`'.format(value))

        self._data["Temperature 152"] = value

    @property
    def temperature_153(self):
        """Get temperature_153

        Returns:
            float: the value of `temperature_153` or None if not set
        """
        return self._data["Temperature 153"]

    @temperature_153.setter
    def temperature_153(self, value=None):
        """  Corresponds to IDD Field `temperature_153`

        Args:
            value (float): value for IDD Field `temperature_153`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_153`'.format(value))

        self._data["Temperature 153"] = value

    @property
    def temperature_154(self):
        """Get temperature_154

        Returns:
            float: the value of `temperature_154` or None if not set
        """
        return self._data["Temperature 154"]

    @temperature_154.setter
    def temperature_154(self, value=None):
        """  Corresponds to IDD Field `temperature_154`

        Args:
            value (float): value for IDD Field `temperature_154`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_154`'.format(value))

        self._data["Temperature 154"] = value

    @property
    def temperature_155(self):
        """Get temperature_155

        Returns:
            float: the value of `temperature_155` or None if not set
        """
        return self._data["Temperature 155"]

    @temperature_155.setter
    def temperature_155(self, value=None):
        """  Corresponds to IDD Field `temperature_155`

        Args:
            value (float): value for IDD Field `temperature_155`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_155`'.format(value))

        self._data["Temperature 155"] = value

    @property
    def temperature_156(self):
        """Get temperature_156

        Returns:
            float: the value of `temperature_156` or None if not set
        """
        return self._data["Temperature 156"]

    @temperature_156.setter
    def temperature_156(self, value=None):
        """  Corresponds to IDD Field `temperature_156`

        Args:
            value (float): value for IDD Field `temperature_156`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_156`'.format(value))

        self._data["Temperature 156"] = value

    @property
    def temperature_157(self):
        """Get temperature_157

        Returns:
            float: the value of `temperature_157` or None if not set
        """
        return self._data["Temperature 157"]

    @temperature_157.setter
    def temperature_157(self, value=None):
        """  Corresponds to IDD Field `temperature_157`

        Args:
            value (float): value for IDD Field `temperature_157`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_157`'.format(value))

        self._data["Temperature 157"] = value

    @property
    def temperature_158(self):
        """Get temperature_158

        Returns:
            float: the value of `temperature_158` or None if not set
        """
        return self._data["Temperature 158"]

    @temperature_158.setter
    def temperature_158(self, value=None):
        """  Corresponds to IDD Field `temperature_158`

        Args:
            value (float): value for IDD Field `temperature_158`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_158`'.format(value))

        self._data["Temperature 158"] = value

    @property
    def temperature_159(self):
        """Get temperature_159

        Returns:
            float: the value of `temperature_159` or None if not set
        """
        return self._data["Temperature 159"]

    @temperature_159.setter
    def temperature_159(self, value=None):
        """  Corresponds to IDD Field `temperature_159`

        Args:
            value (float): value for IDD Field `temperature_159`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_159`'.format(value))

        self._data["Temperature 159"] = value

    @property
    def temperature_160(self):
        """Get temperature_160

        Returns:
            float: the value of `temperature_160` or None if not set
        """
        return self._data["Temperature 160"]

    @temperature_160.setter
    def temperature_160(self, value=None):
        """  Corresponds to IDD Field `temperature_160`

        Args:
            value (float): value for IDD Field `temperature_160`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_160`'.format(value))

        self._data["Temperature 160"] = value

    @property
    def temperature_161(self):
        """Get temperature_161

        Returns:
            float: the value of `temperature_161` or None if not set
        """
        return self._data["Temperature 161"]

    @temperature_161.setter
    def temperature_161(self, value=None):
        """  Corresponds to IDD Field `temperature_161`

        Args:
            value (float): value for IDD Field `temperature_161`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_161`'.format(value))

        self._data["Temperature 161"] = value

    @property
    def temperature_162(self):
        """Get temperature_162

        Returns:
            float: the value of `temperature_162` or None if not set
        """
        return self._data["Temperature 162"]

    @temperature_162.setter
    def temperature_162(self, value=None):
        """  Corresponds to IDD Field `temperature_162`

        Args:
            value (float): value for IDD Field `temperature_162`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_162`'.format(value))

        self._data["Temperature 162"] = value

    @property
    def temperature_163(self):
        """Get temperature_163

        Returns:
            float: the value of `temperature_163` or None if not set
        """
        return self._data["Temperature 163"]

    @temperature_163.setter
    def temperature_163(self, value=None):
        """  Corresponds to IDD Field `temperature_163`

        Args:
            value (float): value for IDD Field `temperature_163`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_163`'.format(value))

        self._data["Temperature 163"] = value

    @property
    def temperature_164(self):
        """Get temperature_164

        Returns:
            float: the value of `temperature_164` or None if not set
        """
        return self._data["Temperature 164"]

    @temperature_164.setter
    def temperature_164(self, value=None):
        """  Corresponds to IDD Field `temperature_164`

        Args:
            value (float): value for IDD Field `temperature_164`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_164`'.format(value))

        self._data["Temperature 164"] = value

    @property
    def temperature_165(self):
        """Get temperature_165

        Returns:
            float: the value of `temperature_165` or None if not set
        """
        return self._data["Temperature 165"]

    @temperature_165.setter
    def temperature_165(self, value=None):
        """  Corresponds to IDD Field `temperature_165`

        Args:
            value (float): value for IDD Field `temperature_165`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_165`'.format(value))

        self._data["Temperature 165"] = value

    @property
    def temperature_166(self):
        """Get temperature_166

        Returns:
            float: the value of `temperature_166` or None if not set
        """
        return self._data["Temperature 166"]

    @temperature_166.setter
    def temperature_166(self, value=None):
        """  Corresponds to IDD Field `temperature_166`

        Args:
            value (float): value for IDD Field `temperature_166`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_166`'.format(value))

        self._data["Temperature 166"] = value

    @property
    def temperature_167(self):
        """Get temperature_167

        Returns:
            float: the value of `temperature_167` or None if not set
        """
        return self._data["Temperature 167"]

    @temperature_167.setter
    def temperature_167(self, value=None):
        """  Corresponds to IDD Field `temperature_167`

        Args:
            value (float): value for IDD Field `temperature_167`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_167`'.format(value))

        self._data["Temperature 167"] = value

    @property
    def temperature_168(self):
        """Get temperature_168

        Returns:
            float: the value of `temperature_168` or None if not set
        """
        return self._data["Temperature 168"]

    @temperature_168.setter
    def temperature_168(self, value=None):
        """  Corresponds to IDD Field `temperature_168`

        Args:
            value (float): value for IDD Field `temperature_168`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_168`'.format(value))

        self._data["Temperature 168"] = value

    @property
    def temperature_169(self):
        """Get temperature_169

        Returns:
            float: the value of `temperature_169` or None if not set
        """
        return self._data["Temperature 169"]

    @temperature_169.setter
    def temperature_169(self, value=None):
        """  Corresponds to IDD Field `temperature_169`

        Args:
            value (float): value for IDD Field `temperature_169`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_169`'.format(value))

        self._data["Temperature 169"] = value

    @property
    def temperature_170(self):
        """Get temperature_170

        Returns:
            float: the value of `temperature_170` or None if not set
        """
        return self._data["Temperature 170"]

    @temperature_170.setter
    def temperature_170(self, value=None):
        """  Corresponds to IDD Field `temperature_170`

        Args:
            value (float): value for IDD Field `temperature_170`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_170`'.format(value))

        self._data["Temperature 170"] = value

    @property
    def temperature_171(self):
        """Get temperature_171

        Returns:
            float: the value of `temperature_171` or None if not set
        """
        return self._data["Temperature 171"]

    @temperature_171.setter
    def temperature_171(self, value=None):
        """  Corresponds to IDD Field `temperature_171`

        Args:
            value (float): value for IDD Field `temperature_171`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_171`'.format(value))

        self._data["Temperature 171"] = value

    @property
    def temperature_172(self):
        """Get temperature_172

        Returns:
            float: the value of `temperature_172` or None if not set
        """
        return self._data["Temperature 172"]

    @temperature_172.setter
    def temperature_172(self, value=None):
        """  Corresponds to IDD Field `temperature_172`

        Args:
            value (float): value for IDD Field `temperature_172`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_172`'.format(value))

        self._data["Temperature 172"] = value

    @property
    def temperature_173(self):
        """Get temperature_173

        Returns:
            float: the value of `temperature_173` or None if not set
        """
        return self._data["Temperature 173"]

    @temperature_173.setter
    def temperature_173(self, value=None):
        """  Corresponds to IDD Field `temperature_173`

        Args:
            value (float): value for IDD Field `temperature_173`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_173`'.format(value))

        self._data["Temperature 173"] = value

    @property
    def temperature_174(self):
        """Get temperature_174

        Returns:
            float: the value of `temperature_174` or None if not set
        """
        return self._data["Temperature 174"]

    @temperature_174.setter
    def temperature_174(self, value=None):
        """  Corresponds to IDD Field `temperature_174`

        Args:
            value (float): value for IDD Field `temperature_174`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_174`'.format(value))

        self._data["Temperature 174"] = value

    @property
    def temperature_175(self):
        """Get temperature_175

        Returns:
            float: the value of `temperature_175` or None if not set
        """
        return self._data["Temperature 175"]

    @temperature_175.setter
    def temperature_175(self, value=None):
        """  Corresponds to IDD Field `temperature_175`

        Args:
            value (float): value for IDD Field `temperature_175`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_175`'.format(value))

        self._data["Temperature 175"] = value

    @property
    def temperature_176(self):
        """Get temperature_176

        Returns:
            float: the value of `temperature_176` or None if not set
        """
        return self._data["Temperature 176"]

    @temperature_176.setter
    def temperature_176(self, value=None):
        """  Corresponds to IDD Field `temperature_176`

        Args:
            value (float): value for IDD Field `temperature_176`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_176`'.format(value))

        self._data["Temperature 176"] = value

    @property
    def temperature_177(self):
        """Get temperature_177

        Returns:
            float: the value of `temperature_177` or None if not set
        """
        return self._data["Temperature 177"]

    @temperature_177.setter
    def temperature_177(self, value=None):
        """  Corresponds to IDD Field `temperature_177`

        Args:
            value (float): value for IDD Field `temperature_177`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_177`'.format(value))

        self._data["Temperature 177"] = value

    @property
    def temperature_178(self):
        """Get temperature_178

        Returns:
            float: the value of `temperature_178` or None if not set
        """
        return self._data["Temperature 178"]

    @temperature_178.setter
    def temperature_178(self, value=None):
        """  Corresponds to IDD Field `temperature_178`

        Args:
            value (float): value for IDD Field `temperature_178`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_178`'.format(value))

        self._data["Temperature 178"] = value

    @property
    def temperature_179(self):
        """Get temperature_179

        Returns:
            float: the value of `temperature_179` or None if not set
        """
        return self._data["Temperature 179"]

    @temperature_179.setter
    def temperature_179(self, value=None):
        """  Corresponds to IDD Field `temperature_179`

        Args:
            value (float): value for IDD Field `temperature_179`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_179`'.format(value))

        self._data["Temperature 179"] = value

    @property
    def temperature_180(self):
        """Get temperature_180

        Returns:
            float: the value of `temperature_180` or None if not set
        """
        return self._data["Temperature 180"]

    @temperature_180.setter
    def temperature_180(self, value=None):
        """  Corresponds to IDD Field `temperature_180`

        Args:
            value (float): value for IDD Field `temperature_180`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_180`'.format(value))

        self._data["Temperature 180"] = value

    @property
    def temperature_181(self):
        """Get temperature_181

        Returns:
            float: the value of `temperature_181` or None if not set
        """
        return self._data["Temperature 181"]

    @temperature_181.setter
    def temperature_181(self, value=None):
        """  Corresponds to IDD Field `temperature_181`

        Args:
            value (float): value for IDD Field `temperature_181`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_181`'.format(value))

        self._data["Temperature 181"] = value

    @property
    def temperature_182(self):
        """Get temperature_182

        Returns:
            float: the value of `temperature_182` or None if not set
        """
        return self._data["Temperature 182"]

    @temperature_182.setter
    def temperature_182(self, value=None):
        """  Corresponds to IDD Field `temperature_182`

        Args:
            value (float): value for IDD Field `temperature_182`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_182`'.format(value))

        self._data["Temperature 182"] = value

    @property
    def temperature_183(self):
        """Get temperature_183

        Returns:
            float: the value of `temperature_183` or None if not set
        """
        return self._data["Temperature 183"]

    @temperature_183.setter
    def temperature_183(self, value=None):
        """  Corresponds to IDD Field `temperature_183`

        Args:
            value (float): value for IDD Field `temperature_183`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_183`'.format(value))

        self._data["Temperature 183"] = value

    @property
    def temperature_184(self):
        """Get temperature_184

        Returns:
            float: the value of `temperature_184` or None if not set
        """
        return self._data["Temperature 184"]

    @temperature_184.setter
    def temperature_184(self, value=None):
        """  Corresponds to IDD Field `temperature_184`

        Args:
            value (float): value for IDD Field `temperature_184`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_184`'.format(value))

        self._data["Temperature 184"] = value

    @property
    def temperature_185(self):
        """Get temperature_185

        Returns:
            float: the value of `temperature_185` or None if not set
        """
        return self._data["Temperature 185"]

    @temperature_185.setter
    def temperature_185(self, value=None):
        """  Corresponds to IDD Field `temperature_185`

        Args:
            value (float): value for IDD Field `temperature_185`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_185`'.format(value))

        self._data["Temperature 185"] = value

    @property
    def temperature_186(self):
        """Get temperature_186

        Returns:
            float: the value of `temperature_186` or None if not set
        """
        return self._data["Temperature 186"]

    @temperature_186.setter
    def temperature_186(self, value=None):
        """  Corresponds to IDD Field `temperature_186`

        Args:
            value (float): value for IDD Field `temperature_186`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_186`'.format(value))

        self._data["Temperature 186"] = value

    @property
    def temperature_187(self):
        """Get temperature_187

        Returns:
            float: the value of `temperature_187` or None if not set
        """
        return self._data["Temperature 187"]

    @temperature_187.setter
    def temperature_187(self, value=None):
        """  Corresponds to IDD Field `temperature_187`

        Args:
            value (float): value for IDD Field `temperature_187`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_187`'.format(value))

        self._data["Temperature 187"] = value

    @property
    def temperature_188(self):
        """Get temperature_188

        Returns:
            float: the value of `temperature_188` or None if not set
        """
        return self._data["Temperature 188"]

    @temperature_188.setter
    def temperature_188(self, value=None):
        """  Corresponds to IDD Field `temperature_188`

        Args:
            value (float): value for IDD Field `temperature_188`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_188`'.format(value))

        self._data["Temperature 188"] = value

    @property
    def temperature_189(self):
        """Get temperature_189

        Returns:
            float: the value of `temperature_189` or None if not set
        """
        return self._data["Temperature 189"]

    @temperature_189.setter
    def temperature_189(self, value=None):
        """  Corresponds to IDD Field `temperature_189`

        Args:
            value (float): value for IDD Field `temperature_189`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_189`'.format(value))

        self._data["Temperature 189"] = value

    @property
    def temperature_190(self):
        """Get temperature_190

        Returns:
            float: the value of `temperature_190` or None if not set
        """
        return self._data["Temperature 190"]

    @temperature_190.setter
    def temperature_190(self, value=None):
        """  Corresponds to IDD Field `temperature_190`

        Args:
            value (float): value for IDD Field `temperature_190`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_190`'.format(value))

        self._data["Temperature 190"] = value

    @property
    def temperature_191(self):
        """Get temperature_191

        Returns:
            float: the value of `temperature_191` or None if not set
        """
        return self._data["Temperature 191"]

    @temperature_191.setter
    def temperature_191(self, value=None):
        """  Corresponds to IDD Field `temperature_191`

        Args:
            value (float): value for IDD Field `temperature_191`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_191`'.format(value))

        self._data["Temperature 191"] = value

    @property
    def temperature_192(self):
        """Get temperature_192

        Returns:
            float: the value of `temperature_192` or None if not set
        """
        return self._data["Temperature 192"]

    @temperature_192.setter
    def temperature_192(self, value=None):
        """  Corresponds to IDD Field `temperature_192`

        Args:
            value (float): value for IDD Field `temperature_192`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_192`'.format(value))

        self._data["Temperature 192"] = value

    @property
    def temperature_193(self):
        """Get temperature_193

        Returns:
            float: the value of `temperature_193` or None if not set
        """
        return self._data["Temperature 193"]

    @temperature_193.setter
    def temperature_193(self, value=None):
        """  Corresponds to IDD Field `temperature_193`

        Args:
            value (float): value for IDD Field `temperature_193`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_193`'.format(value))

        self._data["Temperature 193"] = value

    @property
    def temperature_194(self):
        """Get temperature_194

        Returns:
            float: the value of `temperature_194` or None if not set
        """
        return self._data["Temperature 194"]

    @temperature_194.setter
    def temperature_194(self, value=None):
        """  Corresponds to IDD Field `temperature_194`

        Args:
            value (float): value for IDD Field `temperature_194`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_194`'.format(value))

        self._data["Temperature 194"] = value

    @property
    def temperature_195(self):
        """Get temperature_195

        Returns:
            float: the value of `temperature_195` or None if not set
        """
        return self._data["Temperature 195"]

    @temperature_195.setter
    def temperature_195(self, value=None):
        """  Corresponds to IDD Field `temperature_195`

        Args:
            value (float): value for IDD Field `temperature_195`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_195`'.format(value))

        self._data["Temperature 195"] = value

    @property
    def temperature_196(self):
        """Get temperature_196

        Returns:
            float: the value of `temperature_196` or None if not set
        """
        return self._data["Temperature 196"]

    @temperature_196.setter
    def temperature_196(self, value=None):
        """  Corresponds to IDD Field `temperature_196`

        Args:
            value (float): value for IDD Field `temperature_196`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_196`'.format(value))

        self._data["Temperature 196"] = value

    @property
    def temperature_197(self):
        """Get temperature_197

        Returns:
            float: the value of `temperature_197` or None if not set
        """
        return self._data["Temperature 197"]

    @temperature_197.setter
    def temperature_197(self, value=None):
        """  Corresponds to IDD Field `temperature_197`

        Args:
            value (float): value for IDD Field `temperature_197`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_197`'.format(value))

        self._data["Temperature 197"] = value

    @property
    def temperature_198(self):
        """Get temperature_198

        Returns:
            float: the value of `temperature_198` or None if not set
        """
        return self._data["Temperature 198"]

    @temperature_198.setter
    def temperature_198(self, value=None):
        """  Corresponds to IDD Field `temperature_198`

        Args:
            value (float): value for IDD Field `temperature_198`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_198`'.format(value))

        self._data["Temperature 198"] = value

    @property
    def temperature_199(self):
        """Get temperature_199

        Returns:
            float: the value of `temperature_199` or None if not set
        """
        return self._data["Temperature 199"]

    @temperature_199.setter
    def temperature_199(self, value=None):
        """  Corresponds to IDD Field `temperature_199`

        Args:
            value (float): value for IDD Field `temperature_199`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_199`'.format(value))

        self._data["Temperature 199"] = value

    @property
    def temperature_200(self):
        """Get temperature_200

        Returns:
            float: the value of `temperature_200` or None if not set
        """
        return self._data["Temperature 200"]

    @temperature_200.setter
    def temperature_200(self, value=None):
        """  Corresponds to IDD Field `temperature_200`

        Args:
            value (float): value for IDD Field `temperature_200`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_200`'.format(value))

        self._data["Temperature 200"] = value

    @property
    def temperature_201(self):
        """Get temperature_201

        Returns:
            float: the value of `temperature_201` or None if not set
        """
        return self._data["Temperature 201"]

    @temperature_201.setter
    def temperature_201(self, value=None):
        """  Corresponds to IDD Field `temperature_201`

        Args:
            value (float): value for IDD Field `temperature_201`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_201`'.format(value))

        self._data["Temperature 201"] = value

    @property
    def temperature_202(self):
        """Get temperature_202

        Returns:
            float: the value of `temperature_202` or None if not set
        """
        return self._data["Temperature 202"]

    @temperature_202.setter
    def temperature_202(self, value=None):
        """  Corresponds to IDD Field `temperature_202`

        Args:
            value (float): value for IDD Field `temperature_202`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_202`'.format(value))

        self._data["Temperature 202"] = value

    @property
    def temperature_203(self):
        """Get temperature_203

        Returns:
            float: the value of `temperature_203` or None if not set
        """
        return self._data["Temperature 203"]

    @temperature_203.setter
    def temperature_203(self, value=None):
        """  Corresponds to IDD Field `temperature_203`

        Args:
            value (float): value for IDD Field `temperature_203`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_203`'.format(value))

        self._data["Temperature 203"] = value

    @property
    def temperature_204(self):
        """Get temperature_204

        Returns:
            float: the value of `temperature_204` or None if not set
        """
        return self._data["Temperature 204"]

    @temperature_204.setter
    def temperature_204(self, value=None):
        """  Corresponds to IDD Field `temperature_204`

        Args:
            value (float): value for IDD Field `temperature_204`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_204`'.format(value))

        self._data["Temperature 204"] = value

    @property
    def temperature_205(self):
        """Get temperature_205

        Returns:
            float: the value of `temperature_205` or None if not set
        """
        return self._data["Temperature 205"]

    @temperature_205.setter
    def temperature_205(self, value=None):
        """  Corresponds to IDD Field `temperature_205`

        Args:
            value (float): value for IDD Field `temperature_205`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_205`'.format(value))

        self._data["Temperature 205"] = value

    @property
    def temperature_206(self):
        """Get temperature_206

        Returns:
            float: the value of `temperature_206` or None if not set
        """
        return self._data["Temperature 206"]

    @temperature_206.setter
    def temperature_206(self, value=None):
        """  Corresponds to IDD Field `temperature_206`

        Args:
            value (float): value for IDD Field `temperature_206`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_206`'.format(value))

        self._data["Temperature 206"] = value

    @property
    def temperature_207(self):
        """Get temperature_207

        Returns:
            float: the value of `temperature_207` or None if not set
        """
        return self._data["Temperature 207"]

    @temperature_207.setter
    def temperature_207(self, value=None):
        """  Corresponds to IDD Field `temperature_207`

        Args:
            value (float): value for IDD Field `temperature_207`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_207`'.format(value))

        self._data["Temperature 207"] = value

    @property
    def temperature_208(self):
        """Get temperature_208

        Returns:
            float: the value of `temperature_208` or None if not set
        """
        return self._data["Temperature 208"]

    @temperature_208.setter
    def temperature_208(self, value=None):
        """  Corresponds to IDD Field `temperature_208`

        Args:
            value (float): value for IDD Field `temperature_208`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_208`'.format(value))

        self._data["Temperature 208"] = value

    @property
    def temperature_209(self):
        """Get temperature_209

        Returns:
            float: the value of `temperature_209` or None if not set
        """
        return self._data["Temperature 209"]

    @temperature_209.setter
    def temperature_209(self, value=None):
        """  Corresponds to IDD Field `temperature_209`

        Args:
            value (float): value for IDD Field `temperature_209`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_209`'.format(value))

        self._data["Temperature 209"] = value

    @property
    def temperature_210(self):
        """Get temperature_210

        Returns:
            float: the value of `temperature_210` or None if not set
        """
        return self._data["Temperature 210"]

    @temperature_210.setter
    def temperature_210(self, value=None):
        """  Corresponds to IDD Field `temperature_210`

        Args:
            value (float): value for IDD Field `temperature_210`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_210`'.format(value))

        self._data["Temperature 210"] = value

    @property
    def temperature_211(self):
        """Get temperature_211

        Returns:
            float: the value of `temperature_211` or None if not set
        """
        return self._data["Temperature 211"]

    @temperature_211.setter
    def temperature_211(self, value=None):
        """  Corresponds to IDD Field `temperature_211`

        Args:
            value (float): value for IDD Field `temperature_211`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_211`'.format(value))

        self._data["Temperature 211"] = value

    @property
    def temperature_212(self):
        """Get temperature_212

        Returns:
            float: the value of `temperature_212` or None if not set
        """
        return self._data["Temperature 212"]

    @temperature_212.setter
    def temperature_212(self, value=None):
        """  Corresponds to IDD Field `temperature_212`

        Args:
            value (float): value for IDD Field `temperature_212`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_212`'.format(value))

        self._data["Temperature 212"] = value

    @property
    def temperature_213(self):
        """Get temperature_213

        Returns:
            float: the value of `temperature_213` or None if not set
        """
        return self._data["Temperature 213"]

    @temperature_213.setter
    def temperature_213(self, value=None):
        """  Corresponds to IDD Field `temperature_213`

        Args:
            value (float): value for IDD Field `temperature_213`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_213`'.format(value))

        self._data["Temperature 213"] = value

    @property
    def temperature_214(self):
        """Get temperature_214

        Returns:
            float: the value of `temperature_214` or None if not set
        """
        return self._data["Temperature 214"]

    @temperature_214.setter
    def temperature_214(self, value=None):
        """  Corresponds to IDD Field `temperature_214`

        Args:
            value (float): value for IDD Field `temperature_214`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_214`'.format(value))

        self._data["Temperature 214"] = value

    @property
    def temperature_215(self):
        """Get temperature_215

        Returns:
            float: the value of `temperature_215` or None if not set
        """
        return self._data["Temperature 215"]

    @temperature_215.setter
    def temperature_215(self, value=None):
        """  Corresponds to IDD Field `temperature_215`

        Args:
            value (float): value for IDD Field `temperature_215`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_215`'.format(value))

        self._data["Temperature 215"] = value

    @property
    def temperature_216(self):
        """Get temperature_216

        Returns:
            float: the value of `temperature_216` or None if not set
        """
        return self._data["Temperature 216"]

    @temperature_216.setter
    def temperature_216(self, value=None):
        """  Corresponds to IDD Field `temperature_216`

        Args:
            value (float): value for IDD Field `temperature_216`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_216`'.format(value))

        self._data["Temperature 216"] = value

    @property
    def temperature_217(self):
        """Get temperature_217

        Returns:
            float: the value of `temperature_217` or None if not set
        """
        return self._data["Temperature 217"]

    @temperature_217.setter
    def temperature_217(self, value=None):
        """  Corresponds to IDD Field `temperature_217`

        Args:
            value (float): value for IDD Field `temperature_217`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_217`'.format(value))

        self._data["Temperature 217"] = value

    @property
    def temperature_218(self):
        """Get temperature_218

        Returns:
            float: the value of `temperature_218` or None if not set
        """
        return self._data["Temperature 218"]

    @temperature_218.setter
    def temperature_218(self, value=None):
        """  Corresponds to IDD Field `temperature_218`

        Args:
            value (float): value for IDD Field `temperature_218`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_218`'.format(value))

        self._data["Temperature 218"] = value

    @property
    def temperature_219(self):
        """Get temperature_219

        Returns:
            float: the value of `temperature_219` or None if not set
        """
        return self._data["Temperature 219"]

    @temperature_219.setter
    def temperature_219(self, value=None):
        """  Corresponds to IDD Field `temperature_219`

        Args:
            value (float): value for IDD Field `temperature_219`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_219`'.format(value))

        self._data["Temperature 219"] = value

    @property
    def temperature_220(self):
        """Get temperature_220

        Returns:
            float: the value of `temperature_220` or None if not set
        """
        return self._data["Temperature 220"]

    @temperature_220.setter
    def temperature_220(self, value=None):
        """  Corresponds to IDD Field `temperature_220`

        Args:
            value (float): value for IDD Field `temperature_220`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_220`'.format(value))

        self._data["Temperature 220"] = value

    @property
    def temperature_221(self):
        """Get temperature_221

        Returns:
            float: the value of `temperature_221` or None if not set
        """
        return self._data["Temperature 221"]

    @temperature_221.setter
    def temperature_221(self, value=None):
        """  Corresponds to IDD Field `temperature_221`

        Args:
            value (float): value for IDD Field `temperature_221`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_221`'.format(value))

        self._data["Temperature 221"] = value

    @property
    def temperature_222(self):
        """Get temperature_222

        Returns:
            float: the value of `temperature_222` or None if not set
        """
        return self._data["Temperature 222"]

    @temperature_222.setter
    def temperature_222(self, value=None):
        """  Corresponds to IDD Field `temperature_222`

        Args:
            value (float): value for IDD Field `temperature_222`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_222`'.format(value))

        self._data["Temperature 222"] = value

    @property
    def temperature_223(self):
        """Get temperature_223

        Returns:
            float: the value of `temperature_223` or None if not set
        """
        return self._data["Temperature 223"]

    @temperature_223.setter
    def temperature_223(self, value=None):
        """  Corresponds to IDD Field `temperature_223`

        Args:
            value (float): value for IDD Field `temperature_223`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_223`'.format(value))

        self._data["Temperature 223"] = value

    @property
    def temperature_224(self):
        """Get temperature_224

        Returns:
            float: the value of `temperature_224` or None if not set
        """
        return self._data["Temperature 224"]

    @temperature_224.setter
    def temperature_224(self, value=None):
        """  Corresponds to IDD Field `temperature_224`

        Args:
            value (float): value for IDD Field `temperature_224`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_224`'.format(value))

        self._data["Temperature 224"] = value

    @property
    def temperature_225(self):
        """Get temperature_225

        Returns:
            float: the value of `temperature_225` or None if not set
        """
        return self._data["Temperature 225"]

    @temperature_225.setter
    def temperature_225(self, value=None):
        """  Corresponds to IDD Field `temperature_225`

        Args:
            value (float): value for IDD Field `temperature_225`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_225`'.format(value))

        self._data["Temperature 225"] = value

    @property
    def temperature_226(self):
        """Get temperature_226

        Returns:
            float: the value of `temperature_226` or None if not set
        """
        return self._data["Temperature 226"]

    @temperature_226.setter
    def temperature_226(self, value=None):
        """  Corresponds to IDD Field `temperature_226`

        Args:
            value (float): value for IDD Field `temperature_226`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_226`'.format(value))

        self._data["Temperature 226"] = value

    @property
    def temperature_227(self):
        """Get temperature_227

        Returns:
            float: the value of `temperature_227` or None if not set
        """
        return self._data["Temperature 227"]

    @temperature_227.setter
    def temperature_227(self, value=None):
        """  Corresponds to IDD Field `temperature_227`

        Args:
            value (float): value for IDD Field `temperature_227`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_227`'.format(value))

        self._data["Temperature 227"] = value

    @property
    def temperature_228(self):
        """Get temperature_228

        Returns:
            float: the value of `temperature_228` or None if not set
        """
        return self._data["Temperature 228"]

    @temperature_228.setter
    def temperature_228(self, value=None):
        """  Corresponds to IDD Field `temperature_228`

        Args:
            value (float): value for IDD Field `temperature_228`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_228`'.format(value))

        self._data["Temperature 228"] = value

    @property
    def temperature_229(self):
        """Get temperature_229

        Returns:
            float: the value of `temperature_229` or None if not set
        """
        return self._data["Temperature 229"]

    @temperature_229.setter
    def temperature_229(self, value=None):
        """  Corresponds to IDD Field `temperature_229`

        Args:
            value (float): value for IDD Field `temperature_229`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_229`'.format(value))

        self._data["Temperature 229"] = value

    @property
    def temperature_230(self):
        """Get temperature_230

        Returns:
            float: the value of `temperature_230` or None if not set
        """
        return self._data["Temperature 230"]

    @temperature_230.setter
    def temperature_230(self, value=None):
        """  Corresponds to IDD Field `temperature_230`

        Args:
            value (float): value for IDD Field `temperature_230`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_230`'.format(value))

        self._data["Temperature 230"] = value

    @property
    def temperature_231(self):
        """Get temperature_231

        Returns:
            float: the value of `temperature_231` or None if not set
        """
        return self._data["Temperature 231"]

    @temperature_231.setter
    def temperature_231(self, value=None):
        """  Corresponds to IDD Field `temperature_231`

        Args:
            value (float): value for IDD Field `temperature_231`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_231`'.format(value))

        self._data["Temperature 231"] = value

    @property
    def temperature_232(self):
        """Get temperature_232

        Returns:
            float: the value of `temperature_232` or None if not set
        """
        return self._data["Temperature 232"]

    @temperature_232.setter
    def temperature_232(self, value=None):
        """  Corresponds to IDD Field `temperature_232`

        Args:
            value (float): value for IDD Field `temperature_232`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_232`'.format(value))

        self._data["Temperature 232"] = value

    @property
    def temperature_233(self):
        """Get temperature_233

        Returns:
            float: the value of `temperature_233` or None if not set
        """
        return self._data["Temperature 233"]

    @temperature_233.setter
    def temperature_233(self, value=None):
        """  Corresponds to IDD Field `temperature_233`

        Args:
            value (float): value for IDD Field `temperature_233`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_233`'.format(value))

        self._data["Temperature 233"] = value

    @property
    def temperature_234(self):
        """Get temperature_234

        Returns:
            float: the value of `temperature_234` or None if not set
        """
        return self._data["Temperature 234"]

    @temperature_234.setter
    def temperature_234(self, value=None):
        """  Corresponds to IDD Field `temperature_234`

        Args:
            value (float): value for IDD Field `temperature_234`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_234`'.format(value))

        self._data["Temperature 234"] = value

    @property
    def temperature_235(self):
        """Get temperature_235

        Returns:
            float: the value of `temperature_235` or None if not set
        """
        return self._data["Temperature 235"]

    @temperature_235.setter
    def temperature_235(self, value=None):
        """  Corresponds to IDD Field `temperature_235`

        Args:
            value (float): value for IDD Field `temperature_235`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_235`'.format(value))

        self._data["Temperature 235"] = value

    @property
    def temperature_236(self):
        """Get temperature_236

        Returns:
            float: the value of `temperature_236` or None if not set
        """
        return self._data["Temperature 236"]

    @temperature_236.setter
    def temperature_236(self, value=None):
        """  Corresponds to IDD Field `temperature_236`

        Args:
            value (float): value for IDD Field `temperature_236`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_236`'.format(value))

        self._data["Temperature 236"] = value

    @property
    def temperature_237(self):
        """Get temperature_237

        Returns:
            float: the value of `temperature_237` or None if not set
        """
        return self._data["Temperature 237"]

    @temperature_237.setter
    def temperature_237(self, value=None):
        """  Corresponds to IDD Field `temperature_237`

        Args:
            value (float): value for IDD Field `temperature_237`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_237`'.format(value))

        self._data["Temperature 237"] = value

    @property
    def temperature_238(self):
        """Get temperature_238

        Returns:
            float: the value of `temperature_238` or None if not set
        """
        return self._data["Temperature 238"]

    @temperature_238.setter
    def temperature_238(self, value=None):
        """  Corresponds to IDD Field `temperature_238`

        Args:
            value (float): value for IDD Field `temperature_238`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_238`'.format(value))

        self._data["Temperature 238"] = value

    @property
    def temperature_239(self):
        """Get temperature_239

        Returns:
            float: the value of `temperature_239` or None if not set
        """
        return self._data["Temperature 239"]

    @temperature_239.setter
    def temperature_239(self, value=None):
        """  Corresponds to IDD Field `temperature_239`

        Args:
            value (float): value for IDD Field `temperature_239`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_239`'.format(value))

        self._data["Temperature 239"] = value

    @property
    def temperature_240(self):
        """Get temperature_240

        Returns:
            float: the value of `temperature_240` or None if not set
        """
        return self._data["Temperature 240"]

    @temperature_240.setter
    def temperature_240(self, value=None):
        """  Corresponds to IDD Field `temperature_240`

        Args:
            value (float): value for IDD Field `temperature_240`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_240`'.format(value))

        self._data["Temperature 240"] = value

    @property
    def temperature_241(self):
        """Get temperature_241

        Returns:
            float: the value of `temperature_241` or None if not set
        """
        return self._data["Temperature 241"]

    @temperature_241.setter
    def temperature_241(self, value=None):
        """  Corresponds to IDD Field `temperature_241`

        Args:
            value (float): value for IDD Field `temperature_241`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_241`'.format(value))

        self._data["Temperature 241"] = value

    @property
    def temperature_242(self):
        """Get temperature_242

        Returns:
            float: the value of `temperature_242` or None if not set
        """
        return self._data["Temperature 242"]

    @temperature_242.setter
    def temperature_242(self, value=None):
        """  Corresponds to IDD Field `temperature_242`

        Args:
            value (float): value for IDD Field `temperature_242`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_242`'.format(value))

        self._data["Temperature 242"] = value

    @property
    def temperature_243(self):
        """Get temperature_243

        Returns:
            float: the value of `temperature_243` or None if not set
        """
        return self._data["Temperature 243"]

    @temperature_243.setter
    def temperature_243(self, value=None):
        """  Corresponds to IDD Field `temperature_243`

        Args:
            value (float): value for IDD Field `temperature_243`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_243`'.format(value))

        self._data["Temperature 243"] = value

    @property
    def temperature_244(self):
        """Get temperature_244

        Returns:
            float: the value of `temperature_244` or None if not set
        """
        return self._data["Temperature 244"]

    @temperature_244.setter
    def temperature_244(self, value=None):
        """  Corresponds to IDD Field `temperature_244`

        Args:
            value (float): value for IDD Field `temperature_244`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_244`'.format(value))

        self._data["Temperature 244"] = value

    @property
    def temperature_245(self):
        """Get temperature_245

        Returns:
            float: the value of `temperature_245` or None if not set
        """
        return self._data["Temperature 245"]

    @temperature_245.setter
    def temperature_245(self, value=None):
        """  Corresponds to IDD Field `temperature_245`

        Args:
            value (float): value for IDD Field `temperature_245`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_245`'.format(value))

        self._data["Temperature 245"] = value

    @property
    def temperature_246(self):
        """Get temperature_246

        Returns:
            float: the value of `temperature_246` or None if not set
        """
        return self._data["Temperature 246"]

    @temperature_246.setter
    def temperature_246(self, value=None):
        """  Corresponds to IDD Field `temperature_246`

        Args:
            value (float): value for IDD Field `temperature_246`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_246`'.format(value))

        self._data["Temperature 246"] = value

    @property
    def temperature_247(self):
        """Get temperature_247

        Returns:
            float: the value of `temperature_247` or None if not set
        """
        return self._data["Temperature 247"]

    @temperature_247.setter
    def temperature_247(self, value=None):
        """  Corresponds to IDD Field `temperature_247`

        Args:
            value (float): value for IDD Field `temperature_247`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_247`'.format(value))

        self._data["Temperature 247"] = value

    @property
    def temperature_248(self):
        """Get temperature_248

        Returns:
            float: the value of `temperature_248` or None if not set
        """
        return self._data["Temperature 248"]

    @temperature_248.setter
    def temperature_248(self, value=None):
        """  Corresponds to IDD Field `temperature_248`

        Args:
            value (float): value for IDD Field `temperature_248`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_248`'.format(value))

        self._data["Temperature 248"] = value

    @property
    def temperature_249(self):
        """Get temperature_249

        Returns:
            float: the value of `temperature_249` or None if not set
        """
        return self._data["Temperature 249"]

    @temperature_249.setter
    def temperature_249(self, value=None):
        """  Corresponds to IDD Field `temperature_249`

        Args:
            value (float): value for IDD Field `temperature_249`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_249`'.format(value))

        self._data["Temperature 249"] = value

    @property
    def temperature_250(self):
        """Get temperature_250

        Returns:
            float: the value of `temperature_250` or None if not set
        """
        return self._data["Temperature 250"]

    @temperature_250.setter
    def temperature_250(self, value=None):
        """  Corresponds to IDD Field `temperature_250`

        Args:
            value (float): value for IDD Field `temperature_250`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_250`'.format(value))

        self._data["Temperature 250"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.temperature_1))
        out.append(self._to_str(self.temperature_2))
        out.append(self._to_str(self.temperature_3))
        out.append(self._to_str(self.temperature_4))
        out.append(self._to_str(self.temperature_5))
        out.append(self._to_str(self.temperature_6))
        out.append(self._to_str(self.temperature_7))
        out.append(self._to_str(self.temperature_8))
        out.append(self._to_str(self.temperature_9))
        out.append(self._to_str(self.temperature_10))
        out.append(self._to_str(self.temperature_11))
        out.append(self._to_str(self.temperature_12))
        out.append(self._to_str(self.temperature_13))
        out.append(self._to_str(self.temperature_14))
        out.append(self._to_str(self.temperature_15))
        out.append(self._to_str(self.temperature_16))
        out.append(self._to_str(self.temperature_17))
        out.append(self._to_str(self.temperature_18))
        out.append(self._to_str(self.temperature_19))
        out.append(self._to_str(self.temperature_20))
        out.append(self._to_str(self.temperature_21))
        out.append(self._to_str(self.temperature_22))
        out.append(self._to_str(self.temperature_23))
        out.append(self._to_str(self.temperature_24))
        out.append(self._to_str(self.temperature_25))
        out.append(self._to_str(self.temperature_26))
        out.append(self._to_str(self.temperature_27))
        out.append(self._to_str(self.temperature_28))
        out.append(self._to_str(self.temperature_29))
        out.append(self._to_str(self.temperature_30))
        out.append(self._to_str(self.temperature_31))
        out.append(self._to_str(self.temperature_32))
        out.append(self._to_str(self.temperature_33))
        out.append(self._to_str(self.temperature_34))
        out.append(self._to_str(self.temperature_35))
        out.append(self._to_str(self.temperature_36))
        out.append(self._to_str(self.temperature_37))
        out.append(self._to_str(self.temperature_38))
        out.append(self._to_str(self.temperature_39))
        out.append(self._to_str(self.temperature_40))
        out.append(self._to_str(self.temperature_41))
        out.append(self._to_str(self.temperature_42))
        out.append(self._to_str(self.temperature_43))
        out.append(self._to_str(self.temperature_44))
        out.append(self._to_str(self.temperature_45))
        out.append(self._to_str(self.temperature_46))
        out.append(self._to_str(self.temperature_47))
        out.append(self._to_str(self.temperature_48))
        out.append(self._to_str(self.temperature_49))
        out.append(self._to_str(self.temperature_50))
        out.append(self._to_str(self.temperature_51))
        out.append(self._to_str(self.temperature_52))
        out.append(self._to_str(self.temperature_53))
        out.append(self._to_str(self.temperature_54))
        out.append(self._to_str(self.temperature_55))
        out.append(self._to_str(self.temperature_56))
        out.append(self._to_str(self.temperature_57))
        out.append(self._to_str(self.temperature_58))
        out.append(self._to_str(self.temperature_59))
        out.append(self._to_str(self.temperature_60))
        out.append(self._to_str(self.temperature_61))
        out.append(self._to_str(self.temperature_62))
        out.append(self._to_str(self.temperature_63))
        out.append(self._to_str(self.temperature_64))
        out.append(self._to_str(self.temperature_65))
        out.append(self._to_str(self.temperature_66))
        out.append(self._to_str(self.temperature_67))
        out.append(self._to_str(self.temperature_68))
        out.append(self._to_str(self.temperature_69))
        out.append(self._to_str(self.temperature_70))
        out.append(self._to_str(self.temperature_71))
        out.append(self._to_str(self.temperature_72))
        out.append(self._to_str(self.temperature_73))
        out.append(self._to_str(self.temperature_74))
        out.append(self._to_str(self.temperature_75))
        out.append(self._to_str(self.temperature_76))
        out.append(self._to_str(self.temperature_77))
        out.append(self._to_str(self.temperature_78))
        out.append(self._to_str(self.temperature_79))
        out.append(self._to_str(self.temperature_80))
        out.append(self._to_str(self.temperature_81))
        out.append(self._to_str(self.temperature_82))
        out.append(self._to_str(self.temperature_83))
        out.append(self._to_str(self.temperature_84))
        out.append(self._to_str(self.temperature_85))
        out.append(self._to_str(self.temperature_86))
        out.append(self._to_str(self.temperature_87))
        out.append(self._to_str(self.temperature_88))
        out.append(self._to_str(self.temperature_89))
        out.append(self._to_str(self.temperature_90))
        out.append(self._to_str(self.temperature_91))
        out.append(self._to_str(self.temperature_92))
        out.append(self._to_str(self.temperature_93))
        out.append(self._to_str(self.temperature_94))
        out.append(self._to_str(self.temperature_95))
        out.append(self._to_str(self.temperature_96))
        out.append(self._to_str(self.temperature_97))
        out.append(self._to_str(self.temperature_98))
        out.append(self._to_str(self.temperature_99))
        out.append(self._to_str(self.temperature_100))
        out.append(self._to_str(self.temperature_101))
        out.append(self._to_str(self.temperature_102))
        out.append(self._to_str(self.temperature_103))
        out.append(self._to_str(self.temperature_104))
        out.append(self._to_str(self.temperature_105))
        out.append(self._to_str(self.temperature_106))
        out.append(self._to_str(self.temperature_107))
        out.append(self._to_str(self.temperature_108))
        out.append(self._to_str(self.temperature_109))
        out.append(self._to_str(self.temperature_110))
        out.append(self._to_str(self.temperature_111))
        out.append(self._to_str(self.temperature_112))
        out.append(self._to_str(self.temperature_113))
        out.append(self._to_str(self.temperature_114))
        out.append(self._to_str(self.temperature_115))
        out.append(self._to_str(self.temperature_116))
        out.append(self._to_str(self.temperature_117))
        out.append(self._to_str(self.temperature_118))
        out.append(self._to_str(self.temperature_119))
        out.append(self._to_str(self.temperature_120))
        out.append(self._to_str(self.temperature_121))
        out.append(self._to_str(self.temperature_122))
        out.append(self._to_str(self.temperature_123))
        out.append(self._to_str(self.temperature_124))
        out.append(self._to_str(self.temperature_125))
        out.append(self._to_str(self.temperature_126))
        out.append(self._to_str(self.temperature_127))
        out.append(self._to_str(self.temperature_128))
        out.append(self._to_str(self.temperature_129))
        out.append(self._to_str(self.temperature_130))
        out.append(self._to_str(self.temperature_131))
        out.append(self._to_str(self.temperature_132))
        out.append(self._to_str(self.temperature_133))
        out.append(self._to_str(self.temperature_134))
        out.append(self._to_str(self.temperature_135))
        out.append(self._to_str(self.temperature_136))
        out.append(self._to_str(self.temperature_137))
        out.append(self._to_str(self.temperature_138))
        out.append(self._to_str(self.temperature_139))
        out.append(self._to_str(self.temperature_140))
        out.append(self._to_str(self.temperature_141))
        out.append(self._to_str(self.temperature_142))
        out.append(self._to_str(self.temperature_143))
        out.append(self._to_str(self.temperature_144))
        out.append(self._to_str(self.temperature_145))
        out.append(self._to_str(self.temperature_146))
        out.append(self._to_str(self.temperature_147))
        out.append(self._to_str(self.temperature_148))
        out.append(self._to_str(self.temperature_149))
        out.append(self._to_str(self.temperature_150))
        out.append(self._to_str(self.temperature_151))
        out.append(self._to_str(self.temperature_152))
        out.append(self._to_str(self.temperature_153))
        out.append(self._to_str(self.temperature_154))
        out.append(self._to_str(self.temperature_155))
        out.append(self._to_str(self.temperature_156))
        out.append(self._to_str(self.temperature_157))
        out.append(self._to_str(self.temperature_158))
        out.append(self._to_str(self.temperature_159))
        out.append(self._to_str(self.temperature_160))
        out.append(self._to_str(self.temperature_161))
        out.append(self._to_str(self.temperature_162))
        out.append(self._to_str(self.temperature_163))
        out.append(self._to_str(self.temperature_164))
        out.append(self._to_str(self.temperature_165))
        out.append(self._to_str(self.temperature_166))
        out.append(self._to_str(self.temperature_167))
        out.append(self._to_str(self.temperature_168))
        out.append(self._to_str(self.temperature_169))
        out.append(self._to_str(self.temperature_170))
        out.append(self._to_str(self.temperature_171))
        out.append(self._to_str(self.temperature_172))
        out.append(self._to_str(self.temperature_173))
        out.append(self._to_str(self.temperature_174))
        out.append(self._to_str(self.temperature_175))
        out.append(self._to_str(self.temperature_176))
        out.append(self._to_str(self.temperature_177))
        out.append(self._to_str(self.temperature_178))
        out.append(self._to_str(self.temperature_179))
        out.append(self._to_str(self.temperature_180))
        out.append(self._to_str(self.temperature_181))
        out.append(self._to_str(self.temperature_182))
        out.append(self._to_str(self.temperature_183))
        out.append(self._to_str(self.temperature_184))
        out.append(self._to_str(self.temperature_185))
        out.append(self._to_str(self.temperature_186))
        out.append(self._to_str(self.temperature_187))
        out.append(self._to_str(self.temperature_188))
        out.append(self._to_str(self.temperature_189))
        out.append(self._to_str(self.temperature_190))
        out.append(self._to_str(self.temperature_191))
        out.append(self._to_str(self.temperature_192))
        out.append(self._to_str(self.temperature_193))
        out.append(self._to_str(self.temperature_194))
        out.append(self._to_str(self.temperature_195))
        out.append(self._to_str(self.temperature_196))
        out.append(self._to_str(self.temperature_197))
        out.append(self._to_str(self.temperature_198))
        out.append(self._to_str(self.temperature_199))
        out.append(self._to_str(self.temperature_200))
        out.append(self._to_str(self.temperature_201))
        out.append(self._to_str(self.temperature_202))
        out.append(self._to_str(self.temperature_203))
        out.append(self._to_str(self.temperature_204))
        out.append(self._to_str(self.temperature_205))
        out.append(self._to_str(self.temperature_206))
        out.append(self._to_str(self.temperature_207))
        out.append(self._to_str(self.temperature_208))
        out.append(self._to_str(self.temperature_209))
        out.append(self._to_str(self.temperature_210))
        out.append(self._to_str(self.temperature_211))
        out.append(self._to_str(self.temperature_212))
        out.append(self._to_str(self.temperature_213))
        out.append(self._to_str(self.temperature_214))
        out.append(self._to_str(self.temperature_215))
        out.append(self._to_str(self.temperature_216))
        out.append(self._to_str(self.temperature_217))
        out.append(self._to_str(self.temperature_218))
        out.append(self._to_str(self.temperature_219))
        out.append(self._to_str(self.temperature_220))
        out.append(self._to_str(self.temperature_221))
        out.append(self._to_str(self.temperature_222))
        out.append(self._to_str(self.temperature_223))
        out.append(self._to_str(self.temperature_224))
        out.append(self._to_str(self.temperature_225))
        out.append(self._to_str(self.temperature_226))
        out.append(self._to_str(self.temperature_227))
        out.append(self._to_str(self.temperature_228))
        out.append(self._to_str(self.temperature_229))
        out.append(self._to_str(self.temperature_230))
        out.append(self._to_str(self.temperature_231))
        out.append(self._to_str(self.temperature_232))
        out.append(self._to_str(self.temperature_233))
        out.append(self._to_str(self.temperature_234))
        out.append(self._to_str(self.temperature_235))
        out.append(self._to_str(self.temperature_236))
        out.append(self._to_str(self.temperature_237))
        out.append(self._to_str(self.temperature_238))
        out.append(self._to_str(self.temperature_239))
        out.append(self._to_str(self.temperature_240))
        out.append(self._to_str(self.temperature_241))
        out.append(self._to_str(self.temperature_242))
        out.append(self._to_str(self.temperature_243))
        out.append(self._to_str(self.temperature_244))
        out.append(self._to_str(self.temperature_245))
        out.append(self._to_str(self.temperature_246))
        out.append(self._to_str(self.temperature_247))
        out.append(self._to_str(self.temperature_248))
        out.append(self._to_str(self.temperature_249))
        out.append(self._to_str(self.temperature_250))
        return ",".join(out)

class FluidPropertiesSaturated(object):
    """ Corresponds to IDD object `FluidProperties:Saturated`
        fluid properties for the saturated region
    """
    internal_name = "FluidProperties:Saturated"
    field_count = 254

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:Saturated`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Fluid Phase"] = None
        self._data["Temperature Values Name"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_phase = None
        else:
            self.fluid_phase = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Enthalpy Units are J/kg
        Density Units are kg/m3
        SpecificHeat Units are J/kg-K
        Pressure Units are Pa

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Enthalpy     ! Units are J/kg
                      - Density      ! Units are kg/m3
                      - SpecificHeat ! Units are J/kg-K
                      - Pressure     ! Units are Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Enthalpy     ! Units are J/kg")
            vals.add("Density      ! Units are kg/m3")
            vals.add("SpecificHeat ! Units are J/kg-K")
            vals.add("Pressure     ! Units are Pa")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def fluid_phase(self):
        """Get fluid_phase

        Returns:
            str: the value of `fluid_phase` or None if not set
        """
        return self._data["Fluid Phase"]

    @fluid_phase.setter
    def fluid_phase(self, value=None):
        """  Corresponds to IDD Field `fluid_phase`
        Fluid=saturated fluid
        FluidGas=saturated vapor

        Args:
            value (str): value for IDD Field `fluid_phase`
                Accepted values are:
                      - Fluid        ! saturated fluid
                      - FluidGas     ! saturated vapor
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_phase`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_phase`')
            vals = set()
            vals.add("Fluid        ! saturated fluid")
            vals.add("FluidGas     ! saturated vapor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_phase`'.format(value))

        self._data["Fluid Phase"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.fluid_phase))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)

class FluidPropertiesSuperheated(object):
    """ Corresponds to IDD object `FluidProperties:Superheated`
        fluid properties for the superheated region
    """
    internal_name = "FluidProperties:Superheated"
    field_count = 254

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:Superheated`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Temperature Values Name"] = None
        self._data["Pressure"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pressure = None
        else:
            self.pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Enthalpy Units are J/kg
        Density Units are kg/m3

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Enthalpy     ! Units are J/kg
                      - Density      ! Units are kg/m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Enthalpy     ! Units are J/kg")
            vals.add("Density      ! Units are kg/m3")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def pressure(self):
        """Get pressure

        Returns:
            float: the value of `pressure` or None if not set
        """
        return self._data["Pressure"]

    @pressure.setter
    def pressure(self, value=None):
        """  Corresponds to IDD Field `pressure`
        pressure for this list of properties

        Args:
            value (float): value for IDD Field `pressure`
                Unit: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `pressure`')

        self._data["Pressure"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.pressure))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)

class FluidPropertiesConcentration(object):
    """ Corresponds to IDD object `FluidProperties:Concentration`
        fluid properties for water/other fluid mixtures
    """
    internal_name = "FluidProperties:Concentration"
    field_count = 254

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `FluidProperties:Concentration`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Temperature Values Name"] = None
        self._data["Concentration"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.concentration = None
        else:
            self.concentration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`
        should not be any of the defaults (Water, EthyleneGlycol, or PropyleneGlycol)

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Density Units are kg/m3
        SpecificHeat Units are J/kg-K
        Conductivity Units are W/m-K
        Viscosity Units are N-s/m2

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Density      ! Units are kg/m3
                      - SpecificHeat ! Units are J/kg-K
                      - Conductivity ! Units are W/m-K
                      - Viscosity    ! Units are N-s/m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Density      ! Units are kg/m3")
            vals.add("SpecificHeat ! Units are J/kg-K")
            vals.add("Conductivity ! Units are W/m-K")
            vals.add("Viscosity    ! Units are N-s/m2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def concentration(self):
        """Get concentration

        Returns:
            float: the value of `concentration` or None if not set
        """
        return self._data["Concentration"]

    @concentration.setter
    def concentration(self, value=None):
        """  Corresponds to IDD Field `concentration`
        Glycol concentration for this list of properties entered as a fraction

        Args:
            value (float): value for IDD Field `concentration`
                Unit: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `concentration`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `concentration`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `concentration`')

        self._data["Concentration"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.concentration))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)