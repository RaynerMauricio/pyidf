from collections import OrderedDict

class TemperingValve(object):
    """ Corresponds to IDD object `TemperingValve`
        Temperature-controlled diversion valve used to divert flow around one or more plant
        components such as a hot water heater. It can only be used on one of two branches
        between a Splitter and a Mixer.
    """
    internal_name = "TemperingValve"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for IDD  `TemperingValve`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Stream 2 Source Node Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self._data["Pump Outlet Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stream_2_source_node_name = None
        else:
            self.stream_2_source_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_outlet_node_name = None
        else:
            self.pump_outlet_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`
        Name of a Node

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`
        Name of a Node

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def stream_2_source_node_name(self):
        """Get stream_2_source_node_name

        Returns:
            str: the value of `stream_2_source_node_name` or None if not set
        """
        return self._data["Stream 2 Source Node Name"]

    @stream_2_source_node_name.setter
    def stream_2_source_node_name(self, value=None):
        """  Corresponds to IDD Field `stream_2_source_node_name`
        Name of a Node

        Args:
            value (str): value for IDD Field `stream_2_source_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stream_2_source_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stream_2_source_node_name`')

        self._data["Stream 2 Source Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `temperature_setpoint_node_name`
        Name of a Node

        Args:
            value (str): value for IDD Field `temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')

        self._data["Temperature Setpoint Node Name"] = value

    @property
    def pump_outlet_node_name(self):
        """Get pump_outlet_node_name

        Returns:
            str: the value of `pump_outlet_node_name` or None if not set
        """
        return self._data["Pump Outlet Node Name"]

    @pump_outlet_node_name.setter
    def pump_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `pump_outlet_node_name`

        Args:
            value (str): value for IDD Field `pump_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_outlet_node_name`')

        self._data["Pump Outlet Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.stream_2_source_node_name))
        out.append(self._to_str(self.temperature_setpoint_node_name))
        out.append(self._to_str(self.pump_outlet_node_name))
        return ",".join(out)

class LoadProfilePlant(object):
    """ Corresponds to IDD object `LoadProfile:Plant`
        Used to simulate a scheduled plant loop demand profile.  Load and flow rate are
        specified using schedules. Positive values are heating loads, and negative values are
        cooling loads. The actual load met is dependent on the performance of the supply
        loop components.
    """
    internal_name = "LoadProfile:Plant"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for IDD  `LoadProfile:Plant`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Load Schedule Name"] = None
        self._data["Peak Flow Rate"] = None
        self._data["Flow Rate Fraction Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_schedule_name = None
        else:
            self.load_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.peak_flow_rate = None
        else:
            self.peak_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_rate_fraction_schedule_name = None
        else:
            self.flow_rate_fraction_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def load_schedule_name(self):
        """Get load_schedule_name

        Returns:
            str: the value of `load_schedule_name` or None if not set
        """
        return self._data["Load Schedule Name"]

    @load_schedule_name.setter
    def load_schedule_name(self, value=None):
        """  Corresponds to IDD Field `load_schedule_name`
        Schedule values are load in [W]

        Args:
            value (str): value for IDD Field `load_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_schedule_name`')

        self._data["Load Schedule Name"] = value

    @property
    def peak_flow_rate(self):
        """Get peak_flow_rate

        Returns:
            float: the value of `peak_flow_rate` or None if not set
        """
        return self._data["Peak Flow Rate"]

    @peak_flow_rate.setter
    def peak_flow_rate(self, value=None):
        """  Corresponds to IDD Field `peak_flow_rate`

        Args:
            value (float): value for IDD Field `peak_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `peak_flow_rate`'.format(value))

        self._data["Peak Flow Rate"] = value

    @property
    def flow_rate_fraction_schedule_name(self):
        """Get flow_rate_fraction_schedule_name

        Returns:
            str: the value of `flow_rate_fraction_schedule_name` or None if not set
        """
        return self._data["Flow Rate Fraction Schedule Name"]

    @flow_rate_fraction_schedule_name.setter
    def flow_rate_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `flow_rate_fraction_schedule_name`

        Args:
            value (str): value for IDD Field `flow_rate_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `flow_rate_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `flow_rate_fraction_schedule_name`')

        self._data["Flow Rate Fraction Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.load_schedule_name))
        out.append(self._to_str(self.peak_flow_rate))
        out.append(self._to_str(self.flow_rate_fraction_schedule_name))
        return ",".join(out)

class SolarCollectorPerformanceFlatPlate(object):
    """ Corresponds to IDD object `SolarCollectorPerformance:FlatPlate`
        Thermal and optical performance parameters for a single flat plate solar collector
        module. These parameters are based on the testing methodologies described in ASHRAE
        Standards 93 and 96 which are used Solar Rating and Certification Corporation (SRCC)
        Directory of SRCC Certified Solar Collector Ratings. See EnergyPlus DataSets file
        SolarCollectors.idf.
    """
    internal_name = "SolarCollectorPerformance:FlatPlate"
    field_count = 10

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollectorPerformance:FlatPlate`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Gross Area"] = None
        self._data["Test Fluid"] = None
        self._data["Test Flow Rate"] = None
        self._data["Test Correlation Type"] = None
        self._data["Coefficient 1 of Efficiency Equation"] = None
        self._data["Coefficient 2 of Efficiency Equation"] = None
        self._data["Coefficient 3 of Efficiency Equation"] = None
        self._data["Coefficient 2 of Incident Angle Modifier"] = None
        self._data["Coefficient 3 of Incident Angle Modifier"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_area = None
        else:
            self.gross_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.test_fluid = None
        else:
            self.test_fluid = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.test_flow_rate = None
        else:
            self.test_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.test_correlation_type = None
        else:
            self.test_correlation_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_efficiency_equation = None
        else:
            self.coefficient_1_of_efficiency_equation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_efficiency_equation = None
        else:
            self.coefficient_2_of_efficiency_equation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_efficiency_equation = None
        else:
            self.coefficient_3_of_efficiency_equation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_incident_angle_modifier = None
        else:
            self.coefficient_2_of_incident_angle_modifier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_incident_angle_modifier = None
        else:
            self.coefficient_3_of_incident_angle_modifier = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def gross_area(self):
        """Get gross_area

        Returns:
            float: the value of `gross_area` or None if not set
        """
        return self._data["Gross Area"]

    @gross_area.setter
    def gross_area(self, value=None):
        """  Corresponds to IDD Field `gross_area`

        Args:
            value (float): value for IDD Field `gross_area`
                Unit: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_area`')

        self._data["Gross Area"] = value

    @property
    def test_fluid(self):
        """Get test_fluid

        Returns:
            str: the value of `test_fluid` or None if not set
        """
        return self._data["Test Fluid"]

    @test_fluid.setter
    def test_fluid(self, value="Water"):
        """  Corresponds to IDD Field `test_fluid`

        Args:
            value (str): value for IDD Field `test_fluid`
                Accepted values are:
                      - Water
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `test_fluid`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `test_fluid`')
            vals = set()
            vals.add("Water")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `test_fluid`'.format(value))

        self._data["Test Fluid"] = value

    @property
    def test_flow_rate(self):
        """Get test_flow_rate

        Returns:
            float: the value of `test_flow_rate` or None if not set
        """
        return self._data["Test Flow Rate"]

    @test_flow_rate.setter
    def test_flow_rate(self, value=None):
        """  Corresponds to IDD Field `test_flow_rate`

        Args:
            value (float): value for IDD Field `test_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `test_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `test_flow_rate`')

        self._data["Test Flow Rate"] = value

    @property
    def test_correlation_type(self):
        """Get test_correlation_type

        Returns:
            str: the value of `test_correlation_type` or None if not set
        """
        return self._data["Test Correlation Type"]

    @test_correlation_type.setter
    def test_correlation_type(self, value=None):
        """  Corresponds to IDD Field `test_correlation_type`

        Args:
            value (str): value for IDD Field `test_correlation_type`
                Accepted values are:
                      - Inlet
                      - Average
                      - Outlet
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `test_correlation_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `test_correlation_type`')
            vals = set()
            vals.add("Inlet")
            vals.add("Average")
            vals.add("Outlet")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `test_correlation_type`'.format(value))

        self._data["Test Correlation Type"] = value

    @property
    def coefficient_1_of_efficiency_equation(self):
        """Get coefficient_1_of_efficiency_equation

        Returns:
            float: the value of `coefficient_1_of_efficiency_equation` or None if not set
        """
        return self._data["Coefficient 1 of Efficiency Equation"]

    @coefficient_1_of_efficiency_equation.setter
    def coefficient_1_of_efficiency_equation(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_efficiency_equation`
        Y-intercept term

        Args:
            value (float): value for IDD Field `coefficient_1_of_efficiency_equation`
                Unit: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_efficiency_equation`'.format(value))

        self._data["Coefficient 1 of Efficiency Equation"] = value

    @property
    def coefficient_2_of_efficiency_equation(self):
        """Get coefficient_2_of_efficiency_equation

        Returns:
            float: the value of `coefficient_2_of_efficiency_equation` or None if not set
        """
        return self._data["Coefficient 2 of Efficiency Equation"]

    @coefficient_2_of_efficiency_equation.setter
    def coefficient_2_of_efficiency_equation(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_efficiency_equation`
        1st Order term

        Args:
            value (float): value for IDD Field `coefficient_2_of_efficiency_equation`
                Unit: W/m2-K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_efficiency_equation`'.format(value))

        self._data["Coefficient 2 of Efficiency Equation"] = value

    @property
    def coefficient_3_of_efficiency_equation(self):
        """Get coefficient_3_of_efficiency_equation

        Returns:
            float: the value of `coefficient_3_of_efficiency_equation` or None if not set
        """
        return self._data["Coefficient 3 of Efficiency Equation"]

    @coefficient_3_of_efficiency_equation.setter
    def coefficient_3_of_efficiency_equation(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_efficiency_equation`
        2nd order term

        Args:
            value (float): value for IDD Field `coefficient_3_of_efficiency_equation`
                Unit: W/m2-K2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_efficiency_equation`'.format(value))

        self._data["Coefficient 3 of Efficiency Equation"] = value

    @property
    def coefficient_2_of_incident_angle_modifier(self):
        """Get coefficient_2_of_incident_angle_modifier

        Returns:
            float: the value of `coefficient_2_of_incident_angle_modifier` or None if not set
        """
        return self._data["Coefficient 2 of Incident Angle Modifier"]

    @coefficient_2_of_incident_angle_modifier.setter
    def coefficient_2_of_incident_angle_modifier(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_incident_angle_modifier`
        1st order term

        Args:
            value (float): value for IDD Field `coefficient_2_of_incident_angle_modifier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_incident_angle_modifier`'.format(value))

        self._data["Coefficient 2 of Incident Angle Modifier"] = value

    @property
    def coefficient_3_of_incident_angle_modifier(self):
        """Get coefficient_3_of_incident_angle_modifier

        Returns:
            float: the value of `coefficient_3_of_incident_angle_modifier` or None if not set
        """
        return self._data["Coefficient 3 of Incident Angle Modifier"]

    @coefficient_3_of_incident_angle_modifier.setter
    def coefficient_3_of_incident_angle_modifier(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_incident_angle_modifier`
        2nd order term

        Args:
            value (float): value for IDD Field `coefficient_3_of_incident_angle_modifier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_incident_angle_modifier`'.format(value))

        self._data["Coefficient 3 of Incident Angle Modifier"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.gross_area))
        out.append(self._to_str(self.test_fluid))
        out.append(self._to_str(self.test_flow_rate))
        out.append(self._to_str(self.test_correlation_type))
        out.append(self._to_str(self.coefficient_1_of_efficiency_equation))
        out.append(self._to_str(self.coefficient_2_of_efficiency_equation))
        out.append(self._to_str(self.coefficient_3_of_efficiency_equation))
        out.append(self._to_str(self.coefficient_2_of_incident_angle_modifier))
        out.append(self._to_str(self.coefficient_3_of_incident_angle_modifier))
        return ",".join(out)

class SolarCollectorFlatPlateWater(object):
    """ Corresponds to IDD object `SolarCollector:FlatPlate:Water`
        Flat plate water solar collector (single glazed, unglazed, or evacuated tube).
        Thermal and optical properties are taken from the referenced
        SolarCollectorPerformance:FlatPlate object. Collector tilt, azimuth, and gross area
        are taken from the referenced building surface or shading surface. The collector
        surface participates normally in all shading calculations.
    """
    internal_name = "SolarCollector:FlatPlate:Water"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollector:FlatPlate:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["SolarCollectorPerformance Name"] = None
        self._data["Surface Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Maximum Flow Rate"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.solarcollectorperformance_name = None
        else:
            self.solarcollectorperformance_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name = None
        else:
            self.surface_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def solarcollectorperformance_name(self):
        """Get solarcollectorperformance_name

        Returns:
            str: the value of `solarcollectorperformance_name` or None if not set
        """
        return self._data["SolarCollectorPerformance Name"]

    @solarcollectorperformance_name.setter
    def solarcollectorperformance_name(self, value=None):
        """  Corresponds to IDD Field `solarcollectorperformance_name`

        Args:
            value (str): value for IDD Field `solarcollectorperformance_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `solarcollectorperformance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `solarcollectorperformance_name`')

        self._data["SolarCollectorPerformance Name"] = value

    @property
    def surface_name(self):
        """Get surface_name

        Returns:
            str: the value of `surface_name` or None if not set
        """
        return self._data["Surface Name"]

    @surface_name.setter
    def surface_name(self, value=None):
        """  Corresponds to IDD Field `surface_name`

        Args:
            value (str): value for IDD Field `surface_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name`')

        self._data["Surface Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_flow_rate`')

        self._data["Maximum Flow Rate"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.solarcollectorperformance_name))
        out.append(self._to_str(self.surface_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.maximum_flow_rate))
        return ",".join(out)

class SolarCollectorPerformancePhotovoltaicThermalSimple(object):
    """ Corresponds to IDD object `SolarCollectorPerformance:PhotovoltaicThermal:Simple`
        Thermal performance parameters for a hybrid photovoltaic-thermal (PVT) solar collector.
    """
    internal_name = "SolarCollectorPerformance:PhotovoltaicThermal:Simple"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollectorPerformance:PhotovoltaicThermal:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fraction of Surface Area with Active Thermal Collector"] = None
        self._data["Thermal Conversion Efficiency Input Mode Type"] = None
        self._data["Value for Thermal Conversion Efficiency if Fixed"] = None
        self._data["Thermal Conversion Efficiency Schedule Name"] = None
        self._data["Front Surface Emittance"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_surface_area_with_active_thermal_collector = None
        else:
            self.fraction_of_surface_area_with_active_thermal_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_conversion_efficiency_input_mode_type = None
        else:
            self.thermal_conversion_efficiency_input_mode_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_thermal_conversion_efficiency_if_fixed = None
        else:
            self.value_for_thermal_conversion_efficiency_if_fixed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_conversion_efficiency_schedule_name = None
        else:
            self.thermal_conversion_efficiency_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.front_surface_emittance = None
        else:
            self.front_surface_emittance = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fraction_of_surface_area_with_active_thermal_collector(self):
        """Get fraction_of_surface_area_with_active_thermal_collector

        Returns:
            float: the value of `fraction_of_surface_area_with_active_thermal_collector` or None if not set
        """
        return self._data["Fraction of Surface Area with Active Thermal Collector"]

    @fraction_of_surface_area_with_active_thermal_collector.setter
    def fraction_of_surface_area_with_active_thermal_collector(self, value=None):
        """  Corresponds to IDD Field `fraction_of_surface_area_with_active_thermal_collector`

        Args:
            value (float): value for IDD Field `fraction_of_surface_area_with_active_thermal_collector`
                Unit: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_surface_area_with_active_thermal_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_of_surface_area_with_active_thermal_collector`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_surface_area_with_active_thermal_collector`')

        self._data["Fraction of Surface Area with Active Thermal Collector"] = value

    @property
    def thermal_conversion_efficiency_input_mode_type(self):
        """Get thermal_conversion_efficiency_input_mode_type

        Returns:
            str: the value of `thermal_conversion_efficiency_input_mode_type` or None if not set
        """
        return self._data["Thermal Conversion Efficiency Input Mode Type"]

    @thermal_conversion_efficiency_input_mode_type.setter
    def thermal_conversion_efficiency_input_mode_type(self, value=None):
        """  Corresponds to IDD Field `thermal_conversion_efficiency_input_mode_type`

        Args:
            value (str): value for IDD Field `thermal_conversion_efficiency_input_mode_type`
                Accepted values are:
                      - Fixed
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_conversion_efficiency_input_mode_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_conversion_efficiency_input_mode_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `thermal_conversion_efficiency_input_mode_type`'.format(value))

        self._data["Thermal Conversion Efficiency Input Mode Type"] = value

    @property
    def value_for_thermal_conversion_efficiency_if_fixed(self):
        """Get value_for_thermal_conversion_efficiency_if_fixed

        Returns:
            float: the value of `value_for_thermal_conversion_efficiency_if_fixed` or None if not set
        """
        return self._data["Value for Thermal Conversion Efficiency if Fixed"]

    @value_for_thermal_conversion_efficiency_if_fixed.setter
    def value_for_thermal_conversion_efficiency_if_fixed(self, value=None):
        """  Corresponds to IDD Field `value_for_thermal_conversion_efficiency_if_fixed`
        Efficiency = (thermal power generated [W])/(incident solar[W])

        Args:
            value (float): value for IDD Field `value_for_thermal_conversion_efficiency_if_fixed`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_for_thermal_conversion_efficiency_if_fixed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `value_for_thermal_conversion_efficiency_if_fixed`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `value_for_thermal_conversion_efficiency_if_fixed`')

        self._data["Value for Thermal Conversion Efficiency if Fixed"] = value

    @property
    def thermal_conversion_efficiency_schedule_name(self):
        """Get thermal_conversion_efficiency_schedule_name

        Returns:
            str: the value of `thermal_conversion_efficiency_schedule_name` or None if not set
        """
        return self._data["Thermal Conversion Efficiency Schedule Name"]

    @thermal_conversion_efficiency_schedule_name.setter
    def thermal_conversion_efficiency_schedule_name(self, value=None):
        """  Corresponds to IDD Field `thermal_conversion_efficiency_schedule_name`

        Args:
            value (str): value for IDD Field `thermal_conversion_efficiency_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_conversion_efficiency_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_conversion_efficiency_schedule_name`')

        self._data["Thermal Conversion Efficiency Schedule Name"] = value

    @property
    def front_surface_emittance(self):
        """Get front_surface_emittance

        Returns:
            float: the value of `front_surface_emittance` or None if not set
        """
        return self._data["Front Surface Emittance"]

    @front_surface_emittance.setter
    def front_surface_emittance(self, value=0.84 ):
        """  Corresponds to IDD Field `front_surface_emittance`

        Args:
            value (float): value for IDD Field `front_surface_emittance`
                Default value: 0.84
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `front_surface_emittance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `front_surface_emittance`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `front_surface_emittance`')

        self._data["Front Surface Emittance"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fraction_of_surface_area_with_active_thermal_collector))
        out.append(self._to_str(self.thermal_conversion_efficiency_input_mode_type))
        out.append(self._to_str(self.value_for_thermal_conversion_efficiency_if_fixed))
        out.append(self._to_str(self.thermal_conversion_efficiency_schedule_name))
        out.append(self._to_str(self.front_surface_emittance))
        return ",".join(out)

class SolarCollectorIntegralCollectorStorage(object):
    """ Corresponds to IDD object `SolarCollector:IntegralCollectorStorage`
        Glazed solar collector with integral storage unit. Thermal and optical properties are
        taken from the referenced SolarCollectorPerformance:IntegralCollectorStorage object.
        Collector tilt, azimuth, and gross area are taken from the referenced building surface
        or shading surface. The collector surface participates normally in all shading
        calculations.
    """
    internal_name = "SolarCollector:IntegralCollectorStorage"
    field_count = 8

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollector:IntegralCollectorStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["IntegralCollectorStorageParameters Name"] = None
        self._data["Surface Name"] = None
        self._data["Bottom Surface Boundary Conditions Type"] = None
        self._data["Boundary Condition Model Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Maximum Flow Rate"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.integralcollectorstorageparameters_name = None
        else:
            self.integralcollectorstorageparameters_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name = None
        else:
            self.surface_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.bottom_surface_boundary_conditions_type = None
        else:
            self.bottom_surface_boundary_conditions_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boundary_condition_model_name = None
        else:
            self.boundary_condition_model_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def integralcollectorstorageparameters_name(self):
        """Get integralcollectorstorageparameters_name

        Returns:
            str: the value of `integralcollectorstorageparameters_name` or None if not set
        """
        return self._data["IntegralCollectorStorageParameters Name"]

    @integralcollectorstorageparameters_name.setter
    def integralcollectorstorageparameters_name(self, value=None):
        """  Corresponds to IDD Field `integralcollectorstorageparameters_name`

        Args:
            value (str): value for IDD Field `integralcollectorstorageparameters_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `integralcollectorstorageparameters_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `integralcollectorstorageparameters_name`')

        self._data["IntegralCollectorStorageParameters Name"] = value

    @property
    def surface_name(self):
        """Get surface_name

        Returns:
            str: the value of `surface_name` or None if not set
        """
        return self._data["Surface Name"]

    @surface_name.setter
    def surface_name(self, value=None):
        """  Corresponds to IDD Field `surface_name`

        Args:
            value (str): value for IDD Field `surface_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name`')

        self._data["Surface Name"] = value

    @property
    def bottom_surface_boundary_conditions_type(self):
        """Get bottom_surface_boundary_conditions_type

        Returns:
            str: the value of `bottom_surface_boundary_conditions_type` or None if not set
        """
        return self._data["Bottom Surface Boundary Conditions Type"]

    @bottom_surface_boundary_conditions_type.setter
    def bottom_surface_boundary_conditions_type(self, value=None):
        """  Corresponds to IDD Field `bottom_surface_boundary_conditions_type`

        Args:
            value (str): value for IDD Field `bottom_surface_boundary_conditions_type`
                Accepted values are:
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `bottom_surface_boundary_conditions_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `bottom_surface_boundary_conditions_type`')
            vals = set()
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `bottom_surface_boundary_conditions_type`'.format(value))

        self._data["Bottom Surface Boundary Conditions Type"] = value

    @property
    def boundary_condition_model_name(self):
        """Get boundary_condition_model_name

        Returns:
            str: the value of `boundary_condition_model_name` or None if not set
        """
        return self._data["Boundary Condition Model Name"]

    @boundary_condition_model_name.setter
    def boundary_condition_model_name(self, value=None):
        """  Corresponds to IDD Field `boundary_condition_model_name`
        Enter the name of a SurfaceProperty:OtherSideConditionsModel
        object. Specified only if the boundary condition type is
        OtherSideConditionsModel, otherwise leave it blank

        Args:
            value (str): value for IDD Field `boundary_condition_model_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boundary_condition_model_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boundary_condition_model_name`')

        self._data["Boundary Condition Model Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_flow_rate`')

        self._data["Maximum Flow Rate"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.integralcollectorstorageparameters_name))
        out.append(self._to_str(self.surface_name))
        out.append(self._to_str(self.bottom_surface_boundary_conditions_type))
        out.append(self._to_str(self.boundary_condition_model_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.maximum_flow_rate))
        return ",".join(out)

class SolarCollectorPerformanceIntegralCollectorStorage(object):
    """ Corresponds to IDD object `SolarCollectorPerformance:IntegralCollectorStorage`
        Thermal and optical performance parameters for a single glazed solar collector with
        integral storage unit.
    """
    internal_name = "SolarCollectorPerformance:IntegralCollectorStorage"
    field_count = 19

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollectorPerformance:IntegralCollectorStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["ICS Collector Type"] = None
        self._data["Gross Area"] = None
        self._data["Collector Water Volume"] = None
        self._data["Bottom Heat Loss Conductance"] = None
        self._data["Side Heat Loss Conductance"] = None
        self._data["Aspect Ratio"] = None
        self._data["Collector Side Height"] = None
        self._data["Thermal Mass of Absorber Plate"] = None
        self._data["Number of Covers"] = None
        self._data["Cover Spacing"] = None
        self._data["Refractive Index of Outer Cover"] = None
        self._data["Extinction Coefficient Times Thickness of Outer Cover"] = None
        self._data["Emissivity of Outer Cover"] = None
        self._data["Refractive Index of Inner Cover"] = None
        self._data["Extinction Coefficient Times Thickness of the inner Cover"] = None
        self._data["Emmissivity of Inner Cover"] = None
        self._data["Absorptance of Absorber Plate"] = None
        self._data["Emissivity of Absorber Plate"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ics_collector_type = None
        else:
            self.ics_collector_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gross_area = None
        else:
            self.gross_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collector_water_volume = None
        else:
            self.collector_water_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.bottom_heat_loss_conductance = None
        else:
            self.bottom_heat_loss_conductance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.side_heat_loss_conductance = None
        else:
            self.side_heat_loss_conductance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aspect_ratio = None
        else:
            self.aspect_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collector_side_height = None
        else:
            self.collector_side_height = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_mass_of_absorber_plate = None
        else:
            self.thermal_mass_of_absorber_plate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_covers = None
        else:
            self.number_of_covers = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cover_spacing = None
        else:
            self.cover_spacing = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refractive_index_of_outer_cover = None
        else:
            self.refractive_index_of_outer_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.extinction_coefficient_times_thickness_of_outer_cover = None
        else:
            self.extinction_coefficient_times_thickness_of_outer_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.emissivity_of_outer_cover = None
        else:
            self.emissivity_of_outer_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refractive_index_of_inner_cover = None
        else:
            self.refractive_index_of_inner_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.extinction_coefficient_times_thickness_of_the_inner_cover = None
        else:
            self.extinction_coefficient_times_thickness_of_the_inner_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.emmissivity_of_inner_cover = None
        else:
            self.emmissivity_of_inner_cover = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.absorptance_of_absorber_plate = None
        else:
            self.absorptance_of_absorber_plate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.emissivity_of_absorber_plate = None
        else:
            self.emissivity_of_absorber_plate = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def ics_collector_type(self):
        """Get ics_collector_type

        Returns:
            str: the value of `ics_collector_type` or None if not set
        """
        return self._data["ICS Collector Type"]

    @ics_collector_type.setter
    def ics_collector_type(self, value=None):
        """  Corresponds to IDD Field `ics_collector_type`
        Currently only RectangularTank ICS collector type is available.

        Args:
            value (str): value for IDD Field `ics_collector_type`
                Accepted values are:
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ics_collector_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ics_collector_type`')
            vals = set()
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `ics_collector_type`'.format(value))

        self._data["ICS Collector Type"] = value

    @property
    def gross_area(self):
        """Get gross_area

        Returns:
            float: the value of `gross_area` or None if not set
        """
        return self._data["Gross Area"]

    @gross_area.setter
    def gross_area(self, value=None):
        """  Corresponds to IDD Field `gross_area`

        Args:
            value (float): value for IDD Field `gross_area`
                Unit: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_area`')

        self._data["Gross Area"] = value

    @property
    def collector_water_volume(self):
        """Get collector_water_volume

        Returns:
            float: the value of `collector_water_volume` or None if not set
        """
        return self._data["Collector Water Volume"]

    @collector_water_volume.setter
    def collector_water_volume(self, value=None):
        """  Corresponds to IDD Field `collector_water_volume`

        Args:
            value (float): value for IDD Field `collector_water_volume`
                Unit: m3
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `collector_water_volume`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `collector_water_volume`')

        self._data["Collector Water Volume"] = value

    @property
    def bottom_heat_loss_conductance(self):
        """Get bottom_heat_loss_conductance

        Returns:
            float: the value of `bottom_heat_loss_conductance` or None if not set
        """
        return self._data["Bottom Heat Loss Conductance"]

    @bottom_heat_loss_conductance.setter
    def bottom_heat_loss_conductance(self, value=0.4 ):
        """  Corresponds to IDD Field `bottom_heat_loss_conductance`
        Heat loss conductance of the collector bottom insulation

        Args:
            value (float): value for IDD Field `bottom_heat_loss_conductance`
                Unit: W/m2-K
                Default value: 0.4
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `bottom_heat_loss_conductance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `bottom_heat_loss_conductance`')

        self._data["Bottom Heat Loss Conductance"] = value

    @property
    def side_heat_loss_conductance(self):
        """Get side_heat_loss_conductance

        Returns:
            float: the value of `side_heat_loss_conductance` or None if not set
        """
        return self._data["Side Heat Loss Conductance"]

    @side_heat_loss_conductance.setter
    def side_heat_loss_conductance(self, value=0.6 ):
        """  Corresponds to IDD Field `side_heat_loss_conductance`
        heat loss conductance of the collector side insulation

        Args:
            value (float): value for IDD Field `side_heat_loss_conductance`
                Unit: W/m2-K
                Default value: 0.6
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `side_heat_loss_conductance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `side_heat_loss_conductance`')

        self._data["Side Heat Loss Conductance"] = value

    @property
    def aspect_ratio(self):
        """Get aspect_ratio

        Returns:
            float: the value of `aspect_ratio` or None if not set
        """
        return self._data["Aspect Ratio"]

    @aspect_ratio.setter
    def aspect_ratio(self, value=0.8 ):
        """  Corresponds to IDD Field `aspect_ratio`
        This value is ratio of the width (short side) to length
        (long side of) of the collector.  Used to calculate the
        perimeter of the collector

        Args:
            value (float): value for IDD Field `aspect_ratio`
                Unit: m
                Default value: 0.8
                value > 0.5
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `aspect_ratio`'.format(value))
            if value <= 0.5:
                raise ValueError('value need to be greater 0.5 '
                                 'for field `aspect_ratio`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `aspect_ratio`')

        self._data["Aspect Ratio"] = value

    @property
    def collector_side_height(self):
        """Get collector_side_height

        Returns:
            float: the value of `collector_side_height` or None if not set
        """
        return self._data["Collector Side Height"]

    @collector_side_height.setter
    def collector_side_height(self, value=0.2 ):
        """  Corresponds to IDD Field `collector_side_height`
        This value is used to estimate collector side area for the heat
        loss calculation through the collector side

        Args:
            value (float): value for IDD Field `collector_side_height`
                Unit: m
                Default value: 0.2
                value > 0.0
                value < 0.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `collector_side_height`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `collector_side_height`')
            if value >= 0.3:
                raise ValueError('value need to be smaller 0.3 '
                                 'for field `collector_side_height`')

        self._data["Collector Side Height"] = value

    @property
    def thermal_mass_of_absorber_plate(self):
        """Get thermal_mass_of_absorber_plate

        Returns:
            float: the value of `thermal_mass_of_absorber_plate` or None if not set
        """
        return self._data["Thermal Mass of Absorber Plate"]

    @thermal_mass_of_absorber_plate.setter
    def thermal_mass_of_absorber_plate(self, value=0.0 ):
        """  Corresponds to IDD Field `thermal_mass_of_absorber_plate`
        Calculated from the specific heat, density and thickness
        of the absorber plate.

        Args:
            value (float): value for IDD Field `thermal_mass_of_absorber_plate`
                Unit: J/m2-K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `thermal_mass_of_absorber_plate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `thermal_mass_of_absorber_plate`')

        self._data["Thermal Mass of Absorber Plate"] = value

    @property
    def number_of_covers(self):
        """Get number_of_covers

        Returns:
            int: the value of `number_of_covers` or None if not set
        """
        return self._data["Number of Covers"]

    @number_of_covers.setter
    def number_of_covers(self, value=2 ):
        """  Corresponds to IDD Field `number_of_covers`
        Number of transparent covers. Common practice is to use low-iron
        glass as the outer cover and very thin transparent sheet such as
        Teflon as the inner cover.

        Args:
            value (int): value for IDD Field `number_of_covers`
                Default value: 2
                value >= 1
                value <= 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_covers`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_covers`')
            if value > 2:
                raise ValueError('value need to be smaller 2 '
                                 'for field `number_of_covers`')

        self._data["Number of Covers"] = value

    @property
    def cover_spacing(self):
        """Get cover_spacing

        Returns:
            float: the value of `cover_spacing` or None if not set
        """
        return self._data["Cover Spacing"]

    @cover_spacing.setter
    def cover_spacing(self, value=0.05 ):
        """  Corresponds to IDD Field `cover_spacing`
        The gap between the transparent covers and between the inner cover
        and the absorber plate

        Args:
            value (float): value for IDD Field `cover_spacing`
                Unit: m
                Default value: 0.05
                value > 0.0
                value <= 0.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cover_spacing`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cover_spacing`')
            if value > 0.2:
                raise ValueError('value need to be smaller 0.2 '
                                 'for field `cover_spacing`')

        self._data["Cover Spacing"] = value

    @property
    def refractive_index_of_outer_cover(self):
        """Get refractive_index_of_outer_cover

        Returns:
            float: the value of `refractive_index_of_outer_cover` or None if not set
        """
        return self._data["Refractive Index of Outer Cover"]

    @refractive_index_of_outer_cover.setter
    def refractive_index_of_outer_cover(self, value=1.526 ):
        """  Corresponds to IDD Field `refractive_index_of_outer_cover`
        Refractive index of outer cover. Typically low-iron glass is used
        as the outer cover material, and used as the default outer cover
        with a vallue of 1.526.

        Args:
            value (float): value for IDD Field `refractive_index_of_outer_cover`
                Unit: dimensionless
                Default value: 1.526
                value >= 1.0
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `refractive_index_of_outer_cover`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `refractive_index_of_outer_cover`')
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `refractive_index_of_outer_cover`')

        self._data["Refractive Index of Outer Cover"] = value

    @property
    def extinction_coefficient_times_thickness_of_outer_cover(self):
        """Get extinction_coefficient_times_thickness_of_outer_cover

        Returns:
            float: the value of `extinction_coefficient_times_thickness_of_outer_cover` or None if not set
        """
        return self._data["Extinction Coefficient Times Thickness of Outer Cover"]

    @extinction_coefficient_times_thickness_of_outer_cover.setter
    def extinction_coefficient_times_thickness_of_outer_cover(self, value=0.045 ):
        """  Corresponds to IDD Field `extinction_coefficient_times_thickness_of_outer_cover`
        Clear glass has extinction coefficient of about 15 [1/m]
        and with thickness of 3.0mm, the product of the extinction
        coefficient and thickness becomes 0.045 (=15 * 0.003)

        Args:
            value (float): value for IDD Field `extinction_coefficient_times_thickness_of_outer_cover`
                Unit: dimensionless
                Default value: 0.045
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `extinction_coefficient_times_thickness_of_outer_cover`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `extinction_coefficient_times_thickness_of_outer_cover`')

        self._data["Extinction Coefficient Times Thickness of Outer Cover"] = value

    @property
    def emissivity_of_outer_cover(self):
        """Get emissivity_of_outer_cover

        Returns:
            float: the value of `emissivity_of_outer_cover` or None if not set
        """
        return self._data["Emissivity of Outer Cover"]

    @emissivity_of_outer_cover.setter
    def emissivity_of_outer_cover(self, value=0.88 ):
        """  Corresponds to IDD Field `emissivity_of_outer_cover`
        Thermal emissivity of the outer cover, commonly glass is used as
        the out collector cover material.

        Args:
            value (float): value for IDD Field `emissivity_of_outer_cover`
                Unit: dimensionless
                Default value: 0.88
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `emissivity_of_outer_cover`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `emissivity_of_outer_cover`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `emissivity_of_outer_cover`')

        self._data["Emissivity of Outer Cover"] = value

    @property
    def refractive_index_of_inner_cover(self):
        """Get refractive_index_of_inner_cover

        Returns:
            float: the value of `refractive_index_of_inner_cover` or None if not set
        """
        return self._data["Refractive Index of Inner Cover"]

    @refractive_index_of_inner_cover.setter
    def refractive_index_of_inner_cover(self, value=1.37 ):
        """  Corresponds to IDD Field `refractive_index_of_inner_cover`
        Typical material is very thin sheet of Teflon (PTFE). The default
        value is refractive index of Teflon.

        Args:
            value (float): value for IDD Field `refractive_index_of_inner_cover`
                Unit: dimensionless
                Default value: 1.37
                value >= 1.0
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `refractive_index_of_inner_cover`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `refractive_index_of_inner_cover`')
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `refractive_index_of_inner_cover`')

        self._data["Refractive Index of Inner Cover"] = value

    @property
    def extinction_coefficient_times_thickness_of_the_inner_cover(self):
        """Get extinction_coefficient_times_thickness_of_the_inner_cover

        Returns:
            float: the value of `extinction_coefficient_times_thickness_of_the_inner_cover` or None if not set
        """
        return self._data["Extinction Coefficient Times Thickness of the inner Cover"]

    @extinction_coefficient_times_thickness_of_the_inner_cover.setter
    def extinction_coefficient_times_thickness_of_the_inner_cover(self, value=0.008 ):
        """  Corresponds to IDD Field `extinction_coefficient_times_thickness_of_the_inner_cover`
        Default inner cover is very thin sheet of Teflon with
        extinction coefficient of approximately 40.0 and a thickness
        0.2mm yields a default value of 0.008.

        Args:
            value (float): value for IDD Field `extinction_coefficient_times_thickness_of_the_inner_cover`
                Unit: dimensionless
                Default value: 0.008
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `extinction_coefficient_times_thickness_of_the_inner_cover`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `extinction_coefficient_times_thickness_of_the_inner_cover`')

        self._data["Extinction Coefficient Times Thickness of the inner Cover"] = value

    @property
    def emmissivity_of_inner_cover(self):
        """Get emmissivity_of_inner_cover

        Returns:
            float: the value of `emmissivity_of_inner_cover` or None if not set
        """
        return self._data["Emmissivity of Inner Cover"]

    @emmissivity_of_inner_cover.setter
    def emmissivity_of_inner_cover(self, value=0.88 ):
        """  Corresponds to IDD Field `emmissivity_of_inner_cover`
        Thermal emissivity of the inner cover matrial

        Args:
            value (float): value for IDD Field `emmissivity_of_inner_cover`
                Unit: dimensionless
                Default value: 0.88
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `emmissivity_of_inner_cover`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `emmissivity_of_inner_cover`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `emmissivity_of_inner_cover`')

        self._data["Emmissivity of Inner Cover"] = value

    @property
    def absorptance_of_absorber_plate(self):
        """Get absorptance_of_absorber_plate

        Returns:
            float: the value of `absorptance_of_absorber_plate` or None if not set
        """
        return self._data["Absorptance of Absorber Plate"]

    @absorptance_of_absorber_plate.setter
    def absorptance_of_absorber_plate(self, value=0.96 ):
        """  Corresponds to IDD Field `absorptance_of_absorber_plate`
        The absober plate solar absorptance.  Copper is assumed as
        the default absorber plate.

        Args:
            value (float): value for IDD Field `absorptance_of_absorber_plate`
                Unit: dimensionless
                Default value: 0.96
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `absorptance_of_absorber_plate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `absorptance_of_absorber_plate`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `absorptance_of_absorber_plate`')

        self._data["Absorptance of Absorber Plate"] = value

    @property
    def emissivity_of_absorber_plate(self):
        """Get emissivity_of_absorber_plate

        Returns:
            float: the value of `emissivity_of_absorber_plate` or None if not set
        """
        return self._data["Emissivity of Absorber Plate"]

    @emissivity_of_absorber_plate.setter
    def emissivity_of_absorber_plate(self, value=0.3 ):
        """  Corresponds to IDD Field `emissivity_of_absorber_plate`
        Thermal emissivity of the absorber plate

        Args:
            value (float): value for IDD Field `emissivity_of_absorber_plate`
                Unit: dimensionless
                Default value: 0.3
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `emissivity_of_absorber_plate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `emissivity_of_absorber_plate`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `emissivity_of_absorber_plate`')

        self._data["Emissivity of Absorber Plate"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.ics_collector_type))
        out.append(self._to_str(self.gross_area))
        out.append(self._to_str(self.collector_water_volume))
        out.append(self._to_str(self.bottom_heat_loss_conductance))
        out.append(self._to_str(self.side_heat_loss_conductance))
        out.append(self._to_str(self.aspect_ratio))
        out.append(self._to_str(self.collector_side_height))
        out.append(self._to_str(self.thermal_mass_of_absorber_plate))
        out.append(self._to_str(self.number_of_covers))
        out.append(self._to_str(self.cover_spacing))
        out.append(self._to_str(self.refractive_index_of_outer_cover))
        out.append(self._to_str(self.extinction_coefficient_times_thickness_of_outer_cover))
        out.append(self._to_str(self.emissivity_of_outer_cover))
        out.append(self._to_str(self.refractive_index_of_inner_cover))
        out.append(self._to_str(self.extinction_coefficient_times_thickness_of_the_inner_cover))
        out.append(self._to_str(self.emmissivity_of_inner_cover))
        out.append(self._to_str(self.absorptance_of_absorber_plate))
        out.append(self._to_str(self.emissivity_of_absorber_plate))
        return ",".join(out)

class SolarCollectorUnglazedTranspired(object):
    """ Corresponds to IDD object `SolarCollector:UnglazedTranspired`
        Unglazed transpired solar collector (UTSC) used to condition outdoor air. This type of
        collector is generally used to heat air drawn through perforated absorbers and also
        recover heat conducted out through the underlying surfae. This object represents a
        single collector attached to one or more building or shading surfaces and to one or
        more outdoor air systems.
    """
    internal_name = "SolarCollector:UnglazedTranspired"
    field_count = 32

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollector:UnglazedTranspired`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Boundary Conditions Model Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Setpoint Node Name"] = None
        self._data["Zone Node Name"] = None
        self._data["Free Heating Setpoint Schedule Name"] = None
        self._data["Diameter of Perforations in Collector"] = None
        self._data["Distance Between Perforations in Collector"] = None
        self._data["Thermal Emissivity of Collector Surface"] = None
        self._data["Solar Absorbtivity of Collector Surface"] = None
        self._data["Effective Overall Height of Collector"] = None
        self._data["Effective Gap Thickness of Plenum Behind Collector"] = None
        self._data["Effective Cross Section Area of Plenum Behind Collector"] = None
        self._data["Hole Layout Pattern for Pitch"] = None
        self._data["Heat Exchange Effectiveness Correlation"] = None
        self._data["Ratio of Actual Collector Surface Area to Projected Surface Area"] = None
        self._data["Roughness of Collector"] = None
        self._data["Collector Thickness"] = None
        self._data["Effectiveness for Perforations with Respect to Wind"] = None
        self._data["Discharge Coefficient for Openings with Respect to Buoyancy Driven Flow"] = None
        self._data["Surface 1 Name"] = None
        self._data["Surface 2 Name"] = None
        self._data["Surface 3 Name"] = None
        self._data["Surface 4 Name"] = None
        self._data["Surface 5 Name"] = None
        self._data["Surface 6 Name"] = None
        self._data["Surface 7 Name"] = None
        self._data["Surface 8 Name"] = None
        self._data["Surface 9 Name"] = None
        self._data["Surface 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boundary_conditions_model_name = None
        else:
            self.boundary_conditions_model_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_node_name = None
        else:
            self.setpoint_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_node_name = None
        else:
            self.zone_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.free_heating_setpoint_schedule_name = None
        else:
            self.free_heating_setpoint_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.diameter_of_perforations_in_collector = None
        else:
            self.diameter_of_perforations_in_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.distance_between_perforations_in_collector = None
        else:
            self.distance_between_perforations_in_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_emissivity_of_collector_surface = None
        else:
            self.thermal_emissivity_of_collector_surface = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.solar_absorbtivity_of_collector_surface = None
        else:
            self.solar_absorbtivity_of_collector_surface = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.effective_overall_height_of_collector = None
        else:
            self.effective_overall_height_of_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.effective_gap_thickness_of_plenum_behind_collector = None
        else:
            self.effective_gap_thickness_of_plenum_behind_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.effective_cross_section_area_of_plenum_behind_collector = None
        else:
            self.effective_cross_section_area_of_plenum_behind_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hole_layout_pattern_for_pitch = None
        else:
            self.hole_layout_pattern_for_pitch = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchange_effectiveness_correlation = None
        else:
            self.heat_exchange_effectiveness_correlation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ratio_of_actual_collector_surface_area_to_projected_surface_area = None
        else:
            self.ratio_of_actual_collector_surface_area_to_projected_surface_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.roughness_of_collector = None
        else:
            self.roughness_of_collector = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collector_thickness = None
        else:
            self.collector_thickness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.effectiveness_for_perforations_with_respect_to_wind = None
        else:
            self.effectiveness_for_perforations_with_respect_to_wind = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow = None
        else:
            self.discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def boundary_conditions_model_name(self):
        """Get boundary_conditions_model_name

        Returns:
            str: the value of `boundary_conditions_model_name` or None if not set
        """
        return self._data["Boundary Conditions Model Name"]

    @boundary_conditions_model_name.setter
    def boundary_conditions_model_name(self, value=None):
        """  Corresponds to IDD Field `boundary_conditions_model_name`
        Enter the name of a SurfaceProperty:OtherSideConditionsModel object

        Args:
            value (str): value for IDD Field `boundary_conditions_model_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boundary_conditions_model_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boundary_conditions_model_name`')

        self._data["Boundary Conditions Model Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this collector. Schedule value > 0 means it is available.
        If this field is blank, the collector is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`
        required field if no SolarCollector:UnglazedTranspired:Multisystem

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`
        required field if no SolarCollector:UnglazedTranspired:Multisystem

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def setpoint_node_name(self):
        """Get setpoint_node_name

        Returns:
            str: the value of `setpoint_node_name` or None if not set
        """
        return self._data["Setpoint Node Name"]

    @setpoint_node_name.setter
    def setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_node_name`
        This node is where the mixed air setpoint is determined.
        required field if no SolarCollector:UnglazedTranspired:Multisystem

        Args:
            value (str): value for IDD Field `setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_node_name`')

        self._data["Setpoint Node Name"] = value

    @property
    def zone_node_name(self):
        """Get zone_node_name

        Returns:
            str: the value of `zone_node_name` or None if not set
        """
        return self._data["Zone Node Name"]

    @zone_node_name.setter
    def zone_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_node_name`
        This node is used to indentify the affected zone
        required field if no SolarCollector:UnglazedTranspired:Multisystem

        Args:
            value (str): value for IDD Field `zone_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_node_name`')

        self._data["Zone Node Name"] = value

    @property
    def free_heating_setpoint_schedule_name(self):
        """Get free_heating_setpoint_schedule_name

        Returns:
            str: the value of `free_heating_setpoint_schedule_name` or None if not set
        """
        return self._data["Free Heating Setpoint Schedule Name"]

    @free_heating_setpoint_schedule_name.setter
    def free_heating_setpoint_schedule_name(self, value=None):
        """  Corresponds to IDD Field `free_heating_setpoint_schedule_name`

        Args:
            value (str): value for IDD Field `free_heating_setpoint_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `free_heating_setpoint_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `free_heating_setpoint_schedule_name`')

        self._data["Free Heating Setpoint Schedule Name"] = value

    @property
    def diameter_of_perforations_in_collector(self):
        """Get diameter_of_perforations_in_collector

        Returns:
            float: the value of `diameter_of_perforations_in_collector` or None if not set
        """
        return self._data["Diameter of Perforations in Collector"]

    @diameter_of_perforations_in_collector.setter
    def diameter_of_perforations_in_collector(self, value=None):
        """  Corresponds to IDD Field `diameter_of_perforations_in_collector`

        Args:
            value (float): value for IDD Field `diameter_of_perforations_in_collector`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `diameter_of_perforations_in_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `diameter_of_perforations_in_collector`')

        self._data["Diameter of Perforations in Collector"] = value

    @property
    def distance_between_perforations_in_collector(self):
        """Get distance_between_perforations_in_collector

        Returns:
            float: the value of `distance_between_perforations_in_collector` or None if not set
        """
        return self._data["Distance Between Perforations in Collector"]

    @distance_between_perforations_in_collector.setter
    def distance_between_perforations_in_collector(self, value=None):
        """  Corresponds to IDD Field `distance_between_perforations_in_collector`

        Args:
            value (float): value for IDD Field `distance_between_perforations_in_collector`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `distance_between_perforations_in_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `distance_between_perforations_in_collector`')

        self._data["Distance Between Perforations in Collector"] = value

    @property
    def thermal_emissivity_of_collector_surface(self):
        """Get thermal_emissivity_of_collector_surface

        Returns:
            float: the value of `thermal_emissivity_of_collector_surface` or None if not set
        """
        return self._data["Thermal Emissivity of Collector Surface"]

    @thermal_emissivity_of_collector_surface.setter
    def thermal_emissivity_of_collector_surface(self, value=None):
        """  Corresponds to IDD Field `thermal_emissivity_of_collector_surface`

        Args:
            value (float): value for IDD Field `thermal_emissivity_of_collector_surface`
                Unit: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `thermal_emissivity_of_collector_surface`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `thermal_emissivity_of_collector_surface`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `thermal_emissivity_of_collector_surface`')

        self._data["Thermal Emissivity of Collector Surface"] = value

    @property
    def solar_absorbtivity_of_collector_surface(self):
        """Get solar_absorbtivity_of_collector_surface

        Returns:
            float: the value of `solar_absorbtivity_of_collector_surface` or None if not set
        """
        return self._data["Solar Absorbtivity of Collector Surface"]

    @solar_absorbtivity_of_collector_surface.setter
    def solar_absorbtivity_of_collector_surface(self, value=None):
        """  Corresponds to IDD Field `solar_absorbtivity_of_collector_surface`

        Args:
            value (float): value for IDD Field `solar_absorbtivity_of_collector_surface`
                Unit: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `solar_absorbtivity_of_collector_surface`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `solar_absorbtivity_of_collector_surface`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `solar_absorbtivity_of_collector_surface`')

        self._data["Solar Absorbtivity of Collector Surface"] = value

    @property
    def effective_overall_height_of_collector(self):
        """Get effective_overall_height_of_collector

        Returns:
            float: the value of `effective_overall_height_of_collector` or None if not set
        """
        return self._data["Effective Overall Height of Collector"]

    @effective_overall_height_of_collector.setter
    def effective_overall_height_of_collector(self, value=None):
        """  Corresponds to IDD Field `effective_overall_height_of_collector`

        Args:
            value (float): value for IDD Field `effective_overall_height_of_collector`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `effective_overall_height_of_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `effective_overall_height_of_collector`')

        self._data["Effective Overall Height of Collector"] = value

    @property
    def effective_gap_thickness_of_plenum_behind_collector(self):
        """Get effective_gap_thickness_of_plenum_behind_collector

        Returns:
            float: the value of `effective_gap_thickness_of_plenum_behind_collector` or None if not set
        """
        return self._data["Effective Gap Thickness of Plenum Behind Collector"]

    @effective_gap_thickness_of_plenum_behind_collector.setter
    def effective_gap_thickness_of_plenum_behind_collector(self, value=None):
        """  Corresponds to IDD Field `effective_gap_thickness_of_plenum_behind_collector`
        if corrugated, use average depth

        Args:
            value (float): value for IDD Field `effective_gap_thickness_of_plenum_behind_collector`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `effective_gap_thickness_of_plenum_behind_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `effective_gap_thickness_of_plenum_behind_collector`')

        self._data["Effective Gap Thickness of Plenum Behind Collector"] = value

    @property
    def effective_cross_section_area_of_plenum_behind_collector(self):
        """Get effective_cross_section_area_of_plenum_behind_collector

        Returns:
            float: the value of `effective_cross_section_area_of_plenum_behind_collector` or None if not set
        """
        return self._data["Effective Cross Section Area of Plenum Behind Collector"]

    @effective_cross_section_area_of_plenum_behind_collector.setter
    def effective_cross_section_area_of_plenum_behind_collector(self, value=None):
        """  Corresponds to IDD Field `effective_cross_section_area_of_plenum_behind_collector`
        if corrugated, use average depth

        Args:
            value (float): value for IDD Field `effective_cross_section_area_of_plenum_behind_collector`
                Unit: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `effective_cross_section_area_of_plenum_behind_collector`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `effective_cross_section_area_of_plenum_behind_collector`')

        self._data["Effective Cross Section Area of Plenum Behind Collector"] = value

    @property
    def hole_layout_pattern_for_pitch(self):
        """Get hole_layout_pattern_for_pitch

        Returns:
            str: the value of `hole_layout_pattern_for_pitch` or None if not set
        """
        return self._data["Hole Layout Pattern for Pitch"]

    @hole_layout_pattern_for_pitch.setter
    def hole_layout_pattern_for_pitch(self, value="Square"):
        """  Corresponds to IDD Field `hole_layout_pattern_for_pitch`

        Args:
            value (str): value for IDD Field `hole_layout_pattern_for_pitch`
                Accepted values are:
                      - Triangle
                      - Square
                Default value: Square
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hole_layout_pattern_for_pitch`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hole_layout_pattern_for_pitch`')
            vals = set()
            vals.add("Triangle")
            vals.add("Square")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `hole_layout_pattern_for_pitch`'.format(value))

        self._data["Hole Layout Pattern for Pitch"] = value

    @property
    def heat_exchange_effectiveness_correlation(self):
        """Get heat_exchange_effectiveness_correlation

        Returns:
            str: the value of `heat_exchange_effectiveness_correlation` or None if not set
        """
        return self._data["Heat Exchange Effectiveness Correlation"]

    @heat_exchange_effectiveness_correlation.setter
    def heat_exchange_effectiveness_correlation(self, value="Kutscher1994"):
        """  Corresponds to IDD Field `heat_exchange_effectiveness_correlation`

        Args:
            value (str): value for IDD Field `heat_exchange_effectiveness_correlation`
                Accepted values are:
                      - Kutscher1994
                      - VanDeckerHollandsBrunger2001
                Default value: Kutscher1994
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchange_effectiveness_correlation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchange_effectiveness_correlation`')
            vals = set()
            vals.add("Kutscher1994")
            vals.add("VanDeckerHollandsBrunger2001")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_exchange_effectiveness_correlation`'.format(value))

        self._data["Heat Exchange Effectiveness Correlation"] = value

    @property
    def ratio_of_actual_collector_surface_area_to_projected_surface_area(self):
        """Get ratio_of_actual_collector_surface_area_to_projected_surface_area

        Returns:
            float: the value of `ratio_of_actual_collector_surface_area_to_projected_surface_area` or None if not set
        """
        return self._data["Ratio of Actual Collector Surface Area to Projected Surface Area"]

    @ratio_of_actual_collector_surface_area_to_projected_surface_area.setter
    def ratio_of_actual_collector_surface_area_to_projected_surface_area(self, value=1.0 ):
        """  Corresponds to IDD Field `ratio_of_actual_collector_surface_area_to_projected_surface_area`
        This parameter is used to help account for corrugations in the collector

        Args:
            value (float): value for IDD Field `ratio_of_actual_collector_surface_area_to_projected_surface_area`
                Unit: dimensionless
                Default value: 1.0
                value >= 1.0
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_actual_collector_surface_area_to_projected_surface_area`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `ratio_of_actual_collector_surface_area_to_projected_surface_area`')
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `ratio_of_actual_collector_surface_area_to_projected_surface_area`')

        self._data["Ratio of Actual Collector Surface Area to Projected Surface Area"] = value

    @property
    def roughness_of_collector(self):
        """Get roughness_of_collector

        Returns:
            str: the value of `roughness_of_collector` or None if not set
        """
        return self._data["Roughness of Collector"]

    @roughness_of_collector.setter
    def roughness_of_collector(self, value=None):
        """  Corresponds to IDD Field `roughness_of_collector`

        Args:
            value (str): value for IDD Field `roughness_of_collector`
                Accepted values are:
                      - VeryRough
                      - Rough
                      - MediumRough
                      - MediumSmooth
                      - Smooth
                      - VerySmooth
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `roughness_of_collector`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `roughness_of_collector`')
            vals = set()
            vals.add("VeryRough")
            vals.add("Rough")
            vals.add("MediumRough")
            vals.add("MediumSmooth")
            vals.add("Smooth")
            vals.add("VerySmooth")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `roughness_of_collector`'.format(value))

        self._data["Roughness of Collector"] = value

    @property
    def collector_thickness(self):
        """Get collector_thickness

        Returns:
            float: the value of `collector_thickness` or None if not set
        """
        return self._data["Collector Thickness"]

    @collector_thickness.setter
    def collector_thickness(self, value=None):
        """  Corresponds to IDD Field `collector_thickness`
        Collector thickness is not required for Kutscher correlation
        Collector thickness is required for Van Decker et al. correlation

        Args:
            value (float): value for IDD Field `collector_thickness`
                Unit: m
                value >= 0.0005
                value <= 0.007
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `collector_thickness`'.format(value))
            if value < 0.0005:
                raise ValueError('value need to be greater or equal 0.0005 '
                                 'for field `collector_thickness`')
            if value > 0.007:
                raise ValueError('value need to be smaller 0.007 '
                                 'for field `collector_thickness`')

        self._data["Collector Thickness"] = value

    @property
    def effectiveness_for_perforations_with_respect_to_wind(self):
        """Get effectiveness_for_perforations_with_respect_to_wind

        Returns:
            float: the value of `effectiveness_for_perforations_with_respect_to_wind` or None if not set
        """
        return self._data["Effectiveness for Perforations with Respect to Wind"]

    @effectiveness_for_perforations_with_respect_to_wind.setter
    def effectiveness_for_perforations_with_respect_to_wind(self, value=0.25 ):
        """  Corresponds to IDD Field `effectiveness_for_perforations_with_respect_to_wind`
        Cv

        Args:
            value (float): value for IDD Field `effectiveness_for_perforations_with_respect_to_wind`
                Unit: dimensionless
                Default value: 0.25
                value > 0.0
                value <= 1.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `effectiveness_for_perforations_with_respect_to_wind`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `effectiveness_for_perforations_with_respect_to_wind`')
            if value > 1.5:
                raise ValueError('value need to be smaller 1.5 '
                                 'for field `effectiveness_for_perforations_with_respect_to_wind`')

        self._data["Effectiveness for Perforations with Respect to Wind"] = value

    @property
    def discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow(self):
        """Get discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow

        Returns:
            float: the value of `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow` or None if not set
        """
        return self._data["Discharge Coefficient for Openings with Respect to Buoyancy Driven Flow"]

    @discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow.setter
    def discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow(self, value=0.65 ):
        """  Corresponds to IDD Field `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow`
        Cd

        Args:
            value (float): value for IDD Field `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow`
                Unit: dimensionless
                Default value: 0.65
                value > 0.0
                value <= 1.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow`')
            if value > 1.5:
                raise ValueError('value need to be smaller 1.5 '
                                 'for field `discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow`')

        self._data["Discharge Coefficient for Openings with Respect to Buoyancy Driven Flow"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.boundary_conditions_model_name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.setpoint_node_name))
        out.append(self._to_str(self.zone_node_name))
        out.append(self._to_str(self.free_heating_setpoint_schedule_name))
        out.append(self._to_str(self.diameter_of_perforations_in_collector))
        out.append(self._to_str(self.distance_between_perforations_in_collector))
        out.append(self._to_str(self.thermal_emissivity_of_collector_surface))
        out.append(self._to_str(self.solar_absorbtivity_of_collector_surface))
        out.append(self._to_str(self.effective_overall_height_of_collector))
        out.append(self._to_str(self.effective_gap_thickness_of_plenum_behind_collector))
        out.append(self._to_str(self.effective_cross_section_area_of_plenum_behind_collector))
        out.append(self._to_str(self.hole_layout_pattern_for_pitch))
        out.append(self._to_str(self.heat_exchange_effectiveness_correlation))
        out.append(self._to_str(self.ratio_of_actual_collector_surface_area_to_projected_surface_area))
        out.append(self._to_str(self.roughness_of_collector))
        out.append(self._to_str(self.collector_thickness))
        out.append(self._to_str(self.effectiveness_for_perforations_with_respect_to_wind))
        out.append(self._to_str(self.discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.surface_10_name))
        return ",".join(out)

class SolarCollectorUnglazedTranspiredMultisystem(object):
    """ Corresponds to IDD object `SolarCollector:UnglazedTranspired:Multisystem`
        quad-tuples of inlet, outlet, control, and zone nodes
        for multiple different outdoor air systems attached to same collector
    """
    internal_name = "SolarCollector:UnglazedTranspired:Multisystem"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for IDD  `SolarCollector:UnglazedTranspired:Multisystem`
        """
        self._data = OrderedDict()
        self._data["Solar Collector Name"] = None
        self._data["Outdoor Air System 1 Collector Inlet Node"] = None
        self._data["Outdoor Air System 1 Collector Outlet Node"] = None
        self._data["Outdoor Air System 1 Mixed Air Node"] = None
        self._data["Outdoor Air System 1 Zone Node"] = None
        self._data["Outdoor Air System 2 Collector Inlet Node"] = None
        self._data["Outdoor Air System 2 Collector Outlet Node"] = None
        self._data["Outdoor Air System 2 Mixed Air Node"] = None
        self._data["Outdoor Air System 2 Zone Node"] = None
        self._data["Outdoor Air System 3 Collector Inlet Node"] = None
        self._data["Outdoor Air System 3 Collector Outlet Node"] = None
        self._data["Outdoor Air System 3 Mixed Air Node"] = None
        self._data["Outdoor Air System 3 Zone Node"] = None
        self._data["Outdoor Air System 4 Collector Inlet Node"] = None
        self._data["Outdoor Air System 4 Collector Outlet Node"] = None
        self._data["Outdoor Air System 4 Mixed Air Node"] = None
        self._data["Outdoor Air System 4 Zone Node"] = None
        self._data["Outdoor Air System 5 Collector Inlet Node"] = None
        self._data["Outdoor Air System 5 Collector Outlet Node"] = None
        self._data["Outdoor Air System 5 Mixed Air Node"] = None
        self._data["Outdoor Air System 5 Zone Node"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.solar_collector_name = None
        else:
            self.solar_collector_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_1_collector_inlet_node = None
        else:
            self.outdoor_air_system_1_collector_inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_1_collector_outlet_node = None
        else:
            self.outdoor_air_system_1_collector_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_1_mixed_air_node = None
        else:
            self.outdoor_air_system_1_mixed_air_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_1_zone_node = None
        else:
            self.outdoor_air_system_1_zone_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_2_collector_inlet_node = None
        else:
            self.outdoor_air_system_2_collector_inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_2_collector_outlet_node = None
        else:
            self.outdoor_air_system_2_collector_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_2_mixed_air_node = None
        else:
            self.outdoor_air_system_2_mixed_air_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_2_zone_node = None
        else:
            self.outdoor_air_system_2_zone_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_3_collector_inlet_node = None
        else:
            self.outdoor_air_system_3_collector_inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_3_collector_outlet_node = None
        else:
            self.outdoor_air_system_3_collector_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_3_mixed_air_node = None
        else:
            self.outdoor_air_system_3_mixed_air_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_3_zone_node = None
        else:
            self.outdoor_air_system_3_zone_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_4_collector_inlet_node = None
        else:
            self.outdoor_air_system_4_collector_inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_4_collector_outlet_node = None
        else:
            self.outdoor_air_system_4_collector_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_4_mixed_air_node = None
        else:
            self.outdoor_air_system_4_mixed_air_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_4_zone_node = None
        else:
            self.outdoor_air_system_4_zone_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_5_collector_inlet_node = None
        else:
            self.outdoor_air_system_5_collector_inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_5_collector_outlet_node = None
        else:
            self.outdoor_air_system_5_collector_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_5_mixed_air_node = None
        else:
            self.outdoor_air_system_5_mixed_air_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_system_5_zone_node = None
        else:
            self.outdoor_air_system_5_zone_node = vals[i]
        i += 1

    @property
    def solar_collector_name(self):
        """Get solar_collector_name

        Returns:
            str: the value of `solar_collector_name` or None if not set
        """
        return self._data["Solar Collector Name"]

    @solar_collector_name.setter
    def solar_collector_name(self, value=None):
        """  Corresponds to IDD Field `solar_collector_name`
        Enter the name of a SolarCollector:UnglazedTranspired object.

        Args:
            value (str): value for IDD Field `solar_collector_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `solar_collector_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `solar_collector_name`')

        self._data["Solar Collector Name"] = value

    @property
    def outdoor_air_system_1_collector_inlet_node(self):
        """Get outdoor_air_system_1_collector_inlet_node

        Returns:
            str: the value of `outdoor_air_system_1_collector_inlet_node` or None if not set
        """
        return self._data["Outdoor Air System 1 Collector Inlet Node"]

    @outdoor_air_system_1_collector_inlet_node.setter
    def outdoor_air_system_1_collector_inlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_1_collector_inlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_1_collector_inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_1_collector_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_1_collector_inlet_node`')

        self._data["Outdoor Air System 1 Collector Inlet Node"] = value

    @property
    def outdoor_air_system_1_collector_outlet_node(self):
        """Get outdoor_air_system_1_collector_outlet_node

        Returns:
            str: the value of `outdoor_air_system_1_collector_outlet_node` or None if not set
        """
        return self._data["Outdoor Air System 1 Collector Outlet Node"]

    @outdoor_air_system_1_collector_outlet_node.setter
    def outdoor_air_system_1_collector_outlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_1_collector_outlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_1_collector_outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_1_collector_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_1_collector_outlet_node`')

        self._data["Outdoor Air System 1 Collector Outlet Node"] = value

    @property
    def outdoor_air_system_1_mixed_air_node(self):
        """Get outdoor_air_system_1_mixed_air_node

        Returns:
            str: the value of `outdoor_air_system_1_mixed_air_node` or None if not set
        """
        return self._data["Outdoor Air System 1 Mixed Air Node"]

    @outdoor_air_system_1_mixed_air_node.setter
    def outdoor_air_system_1_mixed_air_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_1_mixed_air_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_1_mixed_air_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_1_mixed_air_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_1_mixed_air_node`')

        self._data["Outdoor Air System 1 Mixed Air Node"] = value

    @property
    def outdoor_air_system_1_zone_node(self):
        """Get outdoor_air_system_1_zone_node

        Returns:
            str: the value of `outdoor_air_system_1_zone_node` or None if not set
        """
        return self._data["Outdoor Air System 1 Zone Node"]

    @outdoor_air_system_1_zone_node.setter
    def outdoor_air_system_1_zone_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_1_zone_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_1_zone_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_1_zone_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_1_zone_node`')

        self._data["Outdoor Air System 1 Zone Node"] = value

    @property
    def outdoor_air_system_2_collector_inlet_node(self):
        """Get outdoor_air_system_2_collector_inlet_node

        Returns:
            str: the value of `outdoor_air_system_2_collector_inlet_node` or None if not set
        """
        return self._data["Outdoor Air System 2 Collector Inlet Node"]

    @outdoor_air_system_2_collector_inlet_node.setter
    def outdoor_air_system_2_collector_inlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_2_collector_inlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_2_collector_inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_2_collector_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_2_collector_inlet_node`')

        self._data["Outdoor Air System 2 Collector Inlet Node"] = value

    @property
    def outdoor_air_system_2_collector_outlet_node(self):
        """Get outdoor_air_system_2_collector_outlet_node

        Returns:
            str: the value of `outdoor_air_system_2_collector_outlet_node` or None if not set
        """
        return self._data["Outdoor Air System 2 Collector Outlet Node"]

    @outdoor_air_system_2_collector_outlet_node.setter
    def outdoor_air_system_2_collector_outlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_2_collector_outlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_2_collector_outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_2_collector_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_2_collector_outlet_node`')

        self._data["Outdoor Air System 2 Collector Outlet Node"] = value

    @property
    def outdoor_air_system_2_mixed_air_node(self):
        """Get outdoor_air_system_2_mixed_air_node

        Returns:
            str: the value of `outdoor_air_system_2_mixed_air_node` or None if not set
        """
        return self._data["Outdoor Air System 2 Mixed Air Node"]

    @outdoor_air_system_2_mixed_air_node.setter
    def outdoor_air_system_2_mixed_air_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_2_mixed_air_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_2_mixed_air_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_2_mixed_air_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_2_mixed_air_node`')

        self._data["Outdoor Air System 2 Mixed Air Node"] = value

    @property
    def outdoor_air_system_2_zone_node(self):
        """Get outdoor_air_system_2_zone_node

        Returns:
            str: the value of `outdoor_air_system_2_zone_node` or None if not set
        """
        return self._data["Outdoor Air System 2 Zone Node"]

    @outdoor_air_system_2_zone_node.setter
    def outdoor_air_system_2_zone_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_2_zone_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_2_zone_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_2_zone_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_2_zone_node`')

        self._data["Outdoor Air System 2 Zone Node"] = value

    @property
    def outdoor_air_system_3_collector_inlet_node(self):
        """Get outdoor_air_system_3_collector_inlet_node

        Returns:
            str: the value of `outdoor_air_system_3_collector_inlet_node` or None if not set
        """
        return self._data["Outdoor Air System 3 Collector Inlet Node"]

    @outdoor_air_system_3_collector_inlet_node.setter
    def outdoor_air_system_3_collector_inlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_3_collector_inlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_3_collector_inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_3_collector_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_3_collector_inlet_node`')

        self._data["Outdoor Air System 3 Collector Inlet Node"] = value

    @property
    def outdoor_air_system_3_collector_outlet_node(self):
        """Get outdoor_air_system_3_collector_outlet_node

        Returns:
            str: the value of `outdoor_air_system_3_collector_outlet_node` or None if not set
        """
        return self._data["Outdoor Air System 3 Collector Outlet Node"]

    @outdoor_air_system_3_collector_outlet_node.setter
    def outdoor_air_system_3_collector_outlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_3_collector_outlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_3_collector_outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_3_collector_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_3_collector_outlet_node`')

        self._data["Outdoor Air System 3 Collector Outlet Node"] = value

    @property
    def outdoor_air_system_3_mixed_air_node(self):
        """Get outdoor_air_system_3_mixed_air_node

        Returns:
            str: the value of `outdoor_air_system_3_mixed_air_node` or None if not set
        """
        return self._data["Outdoor Air System 3 Mixed Air Node"]

    @outdoor_air_system_3_mixed_air_node.setter
    def outdoor_air_system_3_mixed_air_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_3_mixed_air_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_3_mixed_air_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_3_mixed_air_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_3_mixed_air_node`')

        self._data["Outdoor Air System 3 Mixed Air Node"] = value

    @property
    def outdoor_air_system_3_zone_node(self):
        """Get outdoor_air_system_3_zone_node

        Returns:
            str: the value of `outdoor_air_system_3_zone_node` or None if not set
        """
        return self._data["Outdoor Air System 3 Zone Node"]

    @outdoor_air_system_3_zone_node.setter
    def outdoor_air_system_3_zone_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_3_zone_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_3_zone_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_3_zone_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_3_zone_node`')

        self._data["Outdoor Air System 3 Zone Node"] = value

    @property
    def outdoor_air_system_4_collector_inlet_node(self):
        """Get outdoor_air_system_4_collector_inlet_node

        Returns:
            str: the value of `outdoor_air_system_4_collector_inlet_node` or None if not set
        """
        return self._data["Outdoor Air System 4 Collector Inlet Node"]

    @outdoor_air_system_4_collector_inlet_node.setter
    def outdoor_air_system_4_collector_inlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_4_collector_inlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_4_collector_inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_4_collector_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_4_collector_inlet_node`')

        self._data["Outdoor Air System 4 Collector Inlet Node"] = value

    @property
    def outdoor_air_system_4_collector_outlet_node(self):
        """Get outdoor_air_system_4_collector_outlet_node

        Returns:
            str: the value of `outdoor_air_system_4_collector_outlet_node` or None if not set
        """
        return self._data["Outdoor Air System 4 Collector Outlet Node"]

    @outdoor_air_system_4_collector_outlet_node.setter
    def outdoor_air_system_4_collector_outlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_4_collector_outlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_4_collector_outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_4_collector_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_4_collector_outlet_node`')

        self._data["Outdoor Air System 4 Collector Outlet Node"] = value

    @property
    def outdoor_air_system_4_mixed_air_node(self):
        """Get outdoor_air_system_4_mixed_air_node

        Returns:
            str: the value of `outdoor_air_system_4_mixed_air_node` or None if not set
        """
        return self._data["Outdoor Air System 4 Mixed Air Node"]

    @outdoor_air_system_4_mixed_air_node.setter
    def outdoor_air_system_4_mixed_air_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_4_mixed_air_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_4_mixed_air_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_4_mixed_air_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_4_mixed_air_node`')

        self._data["Outdoor Air System 4 Mixed Air Node"] = value

    @property
    def outdoor_air_system_4_zone_node(self):
        """Get outdoor_air_system_4_zone_node

        Returns:
            str: the value of `outdoor_air_system_4_zone_node` or None if not set
        """
        return self._data["Outdoor Air System 4 Zone Node"]

    @outdoor_air_system_4_zone_node.setter
    def outdoor_air_system_4_zone_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_4_zone_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_4_zone_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_4_zone_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_4_zone_node`')

        self._data["Outdoor Air System 4 Zone Node"] = value

    @property
    def outdoor_air_system_5_collector_inlet_node(self):
        """Get outdoor_air_system_5_collector_inlet_node

        Returns:
            str: the value of `outdoor_air_system_5_collector_inlet_node` or None if not set
        """
        return self._data["Outdoor Air System 5 Collector Inlet Node"]

    @outdoor_air_system_5_collector_inlet_node.setter
    def outdoor_air_system_5_collector_inlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_5_collector_inlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_5_collector_inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_5_collector_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_5_collector_inlet_node`')

        self._data["Outdoor Air System 5 Collector Inlet Node"] = value

    @property
    def outdoor_air_system_5_collector_outlet_node(self):
        """Get outdoor_air_system_5_collector_outlet_node

        Returns:
            str: the value of `outdoor_air_system_5_collector_outlet_node` or None if not set
        """
        return self._data["Outdoor Air System 5 Collector Outlet Node"]

    @outdoor_air_system_5_collector_outlet_node.setter
    def outdoor_air_system_5_collector_outlet_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_5_collector_outlet_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_5_collector_outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_5_collector_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_5_collector_outlet_node`')

        self._data["Outdoor Air System 5 Collector Outlet Node"] = value

    @property
    def outdoor_air_system_5_mixed_air_node(self):
        """Get outdoor_air_system_5_mixed_air_node

        Returns:
            str: the value of `outdoor_air_system_5_mixed_air_node` or None if not set
        """
        return self._data["Outdoor Air System 5 Mixed Air Node"]

    @outdoor_air_system_5_mixed_air_node.setter
    def outdoor_air_system_5_mixed_air_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_5_mixed_air_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_5_mixed_air_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_5_mixed_air_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_5_mixed_air_node`')

        self._data["Outdoor Air System 5 Mixed Air Node"] = value

    @property
    def outdoor_air_system_5_zone_node(self):
        """Get outdoor_air_system_5_zone_node

        Returns:
            str: the value of `outdoor_air_system_5_zone_node` or None if not set
        """
        return self._data["Outdoor Air System 5 Zone Node"]

    @outdoor_air_system_5_zone_node.setter
    def outdoor_air_system_5_zone_node(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_system_5_zone_node`

        Args:
            value (str): value for IDD Field `outdoor_air_system_5_zone_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_system_5_zone_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_system_5_zone_node`')

        self._data["Outdoor Air System 5 Zone Node"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.solar_collector_name))
        out.append(self._to_str(self.outdoor_air_system_1_collector_inlet_node))
        out.append(self._to_str(self.outdoor_air_system_1_collector_outlet_node))
        out.append(self._to_str(self.outdoor_air_system_1_mixed_air_node))
        out.append(self._to_str(self.outdoor_air_system_1_zone_node))
        out.append(self._to_str(self.outdoor_air_system_2_collector_inlet_node))
        out.append(self._to_str(self.outdoor_air_system_2_collector_outlet_node))
        out.append(self._to_str(self.outdoor_air_system_2_mixed_air_node))
        out.append(self._to_str(self.outdoor_air_system_2_zone_node))
        out.append(self._to_str(self.outdoor_air_system_3_collector_inlet_node))
        out.append(self._to_str(self.outdoor_air_system_3_collector_outlet_node))
        out.append(self._to_str(self.outdoor_air_system_3_mixed_air_node))
        out.append(self._to_str(self.outdoor_air_system_3_zone_node))
        out.append(self._to_str(self.outdoor_air_system_4_collector_inlet_node))
        out.append(self._to_str(self.outdoor_air_system_4_collector_outlet_node))
        out.append(self._to_str(self.outdoor_air_system_4_mixed_air_node))
        out.append(self._to_str(self.outdoor_air_system_4_zone_node))
        out.append(self._to_str(self.outdoor_air_system_5_collector_inlet_node))
        out.append(self._to_str(self.outdoor_air_system_5_collector_outlet_node))
        out.append(self._to_str(self.outdoor_air_system_5_mixed_air_node))
        out.append(self._to_str(self.outdoor_air_system_5_zone_node))
        return ",".join(out)

class BoilerHotWater(object):
    """ Corresponds to IDD object `Boiler:HotWater`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to polynomial equations.
        A constant efficiency boiler may be modeled by leaving the normalized
        boiler efficiency curve name input blank.
    """
    internal_name = "Boiler:HotWater"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for IDD  `Boiler:HotWater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Thermal Efficiency"] = None
        self._data["Efficiency Curve Temperature Evaluation Variable"] = None
        self._data["Normalized Boiler Efficiency Curve Name"] = None
        self._data["Design Water Outlet Temperature"] = None
        self._data["Design Water Flow Rate"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Boiler Water Inlet Node Name"] = None
        self._data["Boiler Water Outlet Node Name"] = None
        self._data["Water Outlet Upper Temperature Limit"] = None
        self._data["Boiler Flow Mode"] = None
        self._data["Parasitic Electric Load"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_thermal_efficiency = None
        else:
            self.nominal_thermal_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_temperature_evaluation_variable = None
        else:
            self.efficiency_curve_temperature_evaluation_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.normalized_boiler_efficiency_curve_name = None
        else:
            self.normalized_boiler_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_water_outlet_temperature = None
        else:
            self.design_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_water_flow_rate = None
        else:
            self.design_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_water_inlet_node_name = None
        else:
            self.boiler_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_water_outlet_node_name = None
        else:
            self.boiler_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_outlet_upper_temperature_limit = None
        else:
            self.water_outlet_upper_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.boiler_flow_mode = None
        else:
            self.boiler_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parasitic_electric_load = None
        else:
            self.parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_thermal_efficiency(self):
        """Get nominal_thermal_efficiency

        Returns:
            float: the value of `nominal_thermal_efficiency` or None if not set
        """
        return self._data["Nominal Thermal Efficiency"]

    @nominal_thermal_efficiency.setter
    def nominal_thermal_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_thermal_efficiency`
        Based on the higher heating value of fuel.

        Args:
            value (float): value for IDD Field `nominal_thermal_efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_thermal_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_thermal_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_thermal_efficiency`')

        self._data["Nominal Thermal Efficiency"] = value

    @property
    def efficiency_curve_temperature_evaluation_variable(self):
        """Get efficiency_curve_temperature_evaluation_variable

        Returns:
            str: the value of `efficiency_curve_temperature_evaluation_variable` or None if not set
        """
        return self._data["Efficiency Curve Temperature Evaluation Variable"]

    @efficiency_curve_temperature_evaluation_variable.setter
    def efficiency_curve_temperature_evaluation_variable(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_temperature_evaluation_variable`

        Args:
            value (str): value for IDD Field `efficiency_curve_temperature_evaluation_variable`
                Accepted values are:
                      - EnteringBoiler
                      - LeavingBoiler
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_temperature_evaluation_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_temperature_evaluation_variable`')
            vals = set()
            vals.add("EnteringBoiler")
            vals.add("LeavingBoiler")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `efficiency_curve_temperature_evaluation_variable`'.format(value))

        self._data["Efficiency Curve Temperature Evaluation Variable"] = value

    @property
    def normalized_boiler_efficiency_curve_name(self):
        """Get normalized_boiler_efficiency_curve_name

        Returns:
            str: the value of `normalized_boiler_efficiency_curve_name` or None if not set
        """
        return self._data["Normalized Boiler Efficiency Curve Name"]

    @normalized_boiler_efficiency_curve_name.setter
    def normalized_boiler_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `normalized_boiler_efficiency_curve_name`
        Linear, Quadratic and Cubic efficiency curves are solely a function of PLR.
        All other efficiency curve types are a function of PLR and boiler water temperature.
        Linear = C1 + C2*PLR
        Quadratic = C1 + C2*PLR + C3*PLR^2
        Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3
        Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T
        QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T
        BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2
        TriQuadratic curves are not allowed.
        Table:OneIndependentVariable Table:TwoIndependentVariables
        PLR = part-load ratio
        T = boiler water temperature (either entering or leaving).

        Args:
            value (str): value for IDD Field `normalized_boiler_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_boiler_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_boiler_efficiency_curve_name`')

        self._data["Normalized Boiler Efficiency Curve Name"] = value

    @property
    def design_water_outlet_temperature(self):
        """Get design_water_outlet_temperature

        Returns:
            float: the value of `design_water_outlet_temperature` or None if not set
        """
        return self._data["Design Water Outlet Temperature"]

    @design_water_outlet_temperature.setter
    def design_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `design_water_outlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_water_outlet_temperature`'.format(value))

        self._data["Design Water Outlet Temperature"] = value

    @property
    def design_water_flow_rate(self):
        """Get design_water_flow_rate

        Returns:
            float: the value of `design_water_flow_rate` or None if not set
        """
        return self._data["Design Water Flow Rate"]

    @design_water_flow_rate.setter
    def design_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_water_flow_rate`')

        self._data["Design Water Flow Rate"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def boiler_water_inlet_node_name(self):
        """Get boiler_water_inlet_node_name

        Returns:
            str: the value of `boiler_water_inlet_node_name` or None if not set
        """
        return self._data["Boiler Water Inlet Node Name"]

    @boiler_water_inlet_node_name.setter
    def boiler_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `boiler_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `boiler_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_inlet_node_name`')

        self._data["Boiler Water Inlet Node Name"] = value

    @property
    def boiler_water_outlet_node_name(self):
        """Get boiler_water_outlet_node_name

        Returns:
            str: the value of `boiler_water_outlet_node_name` or None if not set
        """
        return self._data["Boiler Water Outlet Node Name"]

    @boiler_water_outlet_node_name.setter
    def boiler_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `boiler_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `boiler_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_outlet_node_name`')

        self._data["Boiler Water Outlet Node Name"] = value

    @property
    def water_outlet_upper_temperature_limit(self):
        """Get water_outlet_upper_temperature_limit

        Returns:
            float: the value of `water_outlet_upper_temperature_limit` or None if not set
        """
        return self._data["Water Outlet Upper Temperature Limit"]

    @water_outlet_upper_temperature_limit.setter
    def water_outlet_upper_temperature_limit(self, value=99.9 ):
        """  Corresponds to IDD Field `water_outlet_upper_temperature_limit`

        Args:
            value (float): value for IDD Field `water_outlet_upper_temperature_limit`
                Unit: C
                Default value: 99.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_outlet_upper_temperature_limit`'.format(value))

        self._data["Water Outlet Upper Temperature Limit"] = value

    @property
    def boiler_flow_mode(self):
        """Get boiler_flow_mode

        Returns:
            str: the value of `boiler_flow_mode` or None if not set
        """
        return self._data["Boiler Flow Mode"]

    @boiler_flow_mode.setter
    def boiler_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `boiler_flow_mode`
        Select operating mode for fluid flow through the boiler. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by boiler to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by boiler to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `boiler_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `boiler_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `boiler_flow_mode`'.format(value))

        self._data["Boiler Flow Mode"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load

        Returns:
            float: the value of `parasitic_electric_load` or None if not set
        """
        return self._data["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `parasitic_electric_load`

        Args:
            value (float): value for IDD Field `parasitic_electric_load`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `parasitic_electric_load`')

        self._data["Parasitic Electric Load"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_thermal_efficiency))
        out.append(self._to_str(self.efficiency_curve_temperature_evaluation_variable))
        out.append(self._to_str(self.normalized_boiler_efficiency_curve_name))
        out.append(self._to_str(self.design_water_outlet_temperature))
        out.append(self._to_str(self.design_water_flow_rate))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.boiler_water_inlet_node_name))
        out.append(self._to_str(self.boiler_water_outlet_node_name))
        out.append(self._to_str(self.water_outlet_upper_temperature_limit))
        out.append(self._to_str(self.boiler_flow_mode))
        out.append(self._to_str(self.parasitic_electric_load))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class BoilerSteam(object):
    """ Corresponds to IDD object `Boiler:Steam`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  A constant efficiency boiler is modeled by setting
        the fuel use coefficients as follows: N9=1, N10=0, N11=0
    """
    internal_name = "Boiler:Steam"
    field_count = 15

    def __init__(self):
        """ Init data dictionary object for IDD  `Boiler:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Maximum Operating Pressure"] = None
        self._data["Theoretical Efficiency"] = None
        self._data["Design Outlet Steam Temperature"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Steam Outlet Node Name"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_operating_pressure = None
        else:
            self.maximum_operating_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.theoretical_efficiency = None
        else:
            self.theoretical_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_outlet_steam_temperature = None
        else:
            self.design_outlet_steam_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.steam_outlet_node_name = None
        else:
            self.steam_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def maximum_operating_pressure(self):
        """Get maximum_operating_pressure

        Returns:
            float: the value of `maximum_operating_pressure` or None if not set
        """
        return self._data["Maximum Operating Pressure"]

    @maximum_operating_pressure.setter
    def maximum_operating_pressure(self, value=None):
        """  Corresponds to IDD Field `maximum_operating_pressure`

        Args:
            value (float): value for IDD Field `maximum_operating_pressure`
                Unit: Kpa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_operating_pressure`'.format(value))

        self._data["Maximum Operating Pressure"] = value

    @property
    def theoretical_efficiency(self):
        """Get theoretical_efficiency

        Returns:
            float: the value of `theoretical_efficiency` or None if not set
        """
        return self._data["Theoretical Efficiency"]

    @theoretical_efficiency.setter
    def theoretical_efficiency(self, value=None):
        """  Corresponds to IDD Field `theoretical_efficiency`

        Args:
            value (float): value for IDD Field `theoretical_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `theoretical_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `theoretical_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `theoretical_efficiency`')

        self._data["Theoretical Efficiency"] = value

    @property
    def design_outlet_steam_temperature(self):
        """Get design_outlet_steam_temperature

        Returns:
            float: the value of `design_outlet_steam_temperature` or None if not set
        """
        return self._data["Design Outlet Steam Temperature"]

    @design_outlet_steam_temperature.setter
    def design_outlet_steam_temperature(self, value=None):
        """  Corresponds to IDD Field `design_outlet_steam_temperature`

        Args:
            value (float): value for IDD Field `design_outlet_steam_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_outlet_steam_temperature`'.format(value))

        self._data["Design Outlet Steam Temperature"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))

        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_1_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_1_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_2_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_2_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_3_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_3_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `water_inlet_node_name`

        Args:
            value (str): value for IDD Field `water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')

        self._data["Water Inlet Node Name"] = value

    @property
    def steam_outlet_node_name(self):
        """Get steam_outlet_node_name

        Returns:
            str: the value of `steam_outlet_node_name` or None if not set
        """
        return self._data["Steam Outlet Node Name"]

    @steam_outlet_node_name.setter
    def steam_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `steam_outlet_node_name`

        Args:
            value (str): value for IDD Field `steam_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `steam_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `steam_outlet_node_name`')

        self._data["Steam Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.maximum_operating_pressure))
        out.append(self._to_str(self.theoretical_efficiency))
        out.append(self._to_str(self.design_outlet_steam_temperature))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve))
        out.append(self._to_str(self.water_inlet_node_name))
        out.append(self._to_str(self.steam_outlet_node_name))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class ChillerElectricEir(object):
    """ Corresponds to IDD object `Chiller:Electric:EIR`
        This chiller model is the empirical model from the DOE-2 building Energy
        simulation program. Chiller performance at off-reference conditions is modeled
        using three polynomial equations. Three curves objects are required.
    """
    internal_name = "Chiller:Electric:EIR"
    field_count = 33

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric:EIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Capacity"] = None
        self._data["Reference COP"] = None
        self._data["Reference Leaving Chilled Water Temperature"] = None
        self._data["Reference Entering Condenser Fluid Temperature"] = None
        self._data["Reference Chilled Water Flow Rate"] = None
        self._data["Reference Condenser Fluid Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Minimum Unloading Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Condenser Fan Power Ratio"] = None
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = None
        self._data["Leaving Chilled Water Lower Temperature Limit"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_capacity = None
        else:
            self.reference_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cop = None
        else:
            self.reference_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_leaving_chilled_water_temperature = None
        else:
            self.reference_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_entering_condenser_fluid_temperature = None
        else:
            self.reference_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_chilled_water_flow_rate = None
        else:
            self.reference_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_condenser_fluid_flow_rate = None
        else:
            self.reference_condenser_fluid_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_unloading_ratio = None
        else:
            self.minimum_unloading_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_fan_power_ratio = None
        else:
            self.condenser_fan_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = None
        else:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.leaving_chilled_water_lower_temperature_limit = None
        else:
            self.leaving_chilled_water_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_capacity(self):
        """Get reference_capacity

        Returns:
            float: the value of `reference_capacity` or None if not set
        """
        return self._data["Reference Capacity"]

    @reference_capacity.setter
    def reference_capacity(self, value=None):
        """  Corresponds to IDD Field `reference_capacity`

        Args:
            value (float): value for IDD Field `reference_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_capacity`')

        self._data["Reference Capacity"] = value

    @property
    def reference_cop(self):
        """Get reference_cop

        Returns:
            float: the value of `reference_cop` or None if not set
        """
        return self._data["Reference COP"]

    @reference_cop.setter
    def reference_cop(self, value=None):
        """  Corresponds to IDD Field `reference_cop`
        Efficiency of the chiller compressor (cooling output/compressor energy input).
        Condenser fan power should not be included here.

        Args:
            value (float): value for IDD Field `reference_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cop`')

        self._data["Reference COP"] = value

    @property
    def reference_leaving_chilled_water_temperature(self):
        """Get reference_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Chilled Water Temperature"]

    @reference_leaving_chilled_water_temperature.setter
    def reference_leaving_chilled_water_temperature(self, value=6.67 ):
        """  Corresponds to IDD Field `reference_leaving_chilled_water_temperature`

        Args:
            value (float): value for IDD Field `reference_leaving_chilled_water_temperature`
                Unit: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_leaving_chilled_water_temperature`'.format(value))

        self._data["Reference Leaving Chilled Water Temperature"] = value

    @property
    def reference_entering_condenser_fluid_temperature(self):
        """Get reference_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Entering Condenser Fluid Temperature"]

    @reference_entering_condenser_fluid_temperature.setter
    def reference_entering_condenser_fluid_temperature(self, value=29.4 ):
        """  Corresponds to IDD Field `reference_entering_condenser_fluid_temperature`

        Args:
            value (float): value for IDD Field `reference_entering_condenser_fluid_temperature`
                Unit: C
                Default value: 29.4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_entering_condenser_fluid_temperature`'.format(value))

        self._data["Reference Entering Condenser Fluid Temperature"] = value

    @property
    def reference_chilled_water_flow_rate(self):
        """Get reference_chilled_water_flow_rate

        Returns:
            float: the value of `reference_chilled_water_flow_rate` or None if not set
        """
        return self._data["Reference Chilled Water Flow Rate"]

    @reference_chilled_water_flow_rate.setter
    def reference_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_chilled_water_flow_rate`

        Args:
            value (float): value for IDD Field `reference_chilled_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_chilled_water_flow_rate`')

        self._data["Reference Chilled Water Flow Rate"] = value

    @property
    def reference_condenser_fluid_flow_rate(self):
        """Get reference_condenser_fluid_flow_rate

        Returns:
            float: the value of `reference_condenser_fluid_flow_rate` or None if not set
        """
        return self._data["Reference Condenser Fluid Flow Rate"]

    @reference_condenser_fluid_flow_rate.setter
    def reference_condenser_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_condenser_fluid_flow_rate`
        This field is only used for Condenser Type = AirCooled or EvaporativelyCooled
        when Heat Recovery is specified

        Args:
            value (float): value for IDD Field `reference_condenser_fluid_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_condenser_fluid_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_condenser_fluid_flow_rate`')

        self._data["Reference Condenser Fluid Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_function_of_temperature_curve_name`
        Cooling capacity as a function of CW supply temp and entering condenser temp
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT
        CWS = supply (leaving) chilled water temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')

        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        Electric Input Ratio (EIR) as a function of temperature
        EIR = 1/COP
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT
        CWS = supply (leaving) chilled water temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`
        Part load ratio below which the chiller starts cycling on/off to meet the load.
        Must be less than or equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.1
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`
        Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """Get minimum_unloading_ratio

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set
        """
        return self._data["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_unloading_ratio`
        Part load ratio where the chiller can no longer unload and false loading begins.
        Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_unloading_ratio`
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_unloading_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_unloading_ratio`')

        self._data["Minimum Unloading Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`
        Not required if air-cooled or evaporativly-cooled

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`
        Not required if air-cooled or evaporatively-cooled

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def condenser_fan_power_ratio(self):
        """Get condenser_fan_power_ratio

        Returns:
            float: the value of `condenser_fan_power_ratio` or None if not set
        """
        return self._data["Condenser Fan Power Ratio"]

    @condenser_fan_power_ratio.setter
    def condenser_fan_power_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `condenser_fan_power_ratio`
        Use for air-cooled or evaporatively-cooled condensers.
        Ratio of condenser fan power to reference chiller capacity

        Args:
            value (float): value for IDD Field `condenser_fan_power_ratio`
                Unit: W/W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_fan_power_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_fan_power_ratio`')

        self._data["Condenser Fan Power Ratio"] = value

    @property
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self):
        """Get fraction_of_compressor_electric_consumption_rejected_by_condenser

        Returns:
            float: the value of `fraction_of_compressor_electric_consumption_rejected_by_condenser` or None if not set
        """
        return self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"]

    @fraction_of_compressor_electric_consumption_rejected_by_condenser.setter
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_compressor_electric_consumption_rejected_by_condenser`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter a value of 1.0 when modeling hermetic chillers.
        For open chillers, enter the compressor motor efficiency.
        This value should be greater than 0.6 for praticle applications.

        Args:
            value (float): value for IDD Field `fraction_of_compressor_electric_consumption_rejected_by_condenser`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')

        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """Get leaving_chilled_water_lower_temperature_limit

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set
        """
        return self._data["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=2.0 ):
        """  Corresponds to IDD Field `leaving_chilled_water_lower_temperature_limit`

        Args:
            value (float): value for IDD Field `leaving_chilled_water_lower_temperature_limit`
                Unit: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `leaving_chilled_water_lower_temperature_limit`'.format(value))

        self._data["Leaving Chilled Water Lower Temperature Limit"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Unit: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Unit: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `condenser_heat_recovery_relative_capacity_fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `condenser_heat_recovery_relative_capacity_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')

        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')

        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')

        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_capacity))
        out.append(self._to_str(self.reference_cop))
        out.append(self._to_str(self.reference_leaving_chilled_water_temperature))
        out.append(self._to_str(self.reference_entering_condenser_fluid_temperature))
        out.append(self._to_str(self.reference_chilled_water_flow_rate))
        out.append(self._to_str(self.reference_condenser_fluid_flow_rate))
        out.append(self._to_str(self.cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.minimum_unloading_ratio))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.condenser_fan_power_ratio))
        out.append(self._to_str(self.fraction_of_compressor_electric_consumption_rejected_by_condenser))
        out.append(self._to_str(self.leaving_chilled_water_lower_temperature_limit))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        out.append(self._to_str(self.condenser_heat_recovery_relative_capacity_fraction))
        out.append(self._to_str(self.heat_recovery_inlet_high_temperature_limit_schedule_name))
        out.append(self._to_str(self.heat_recovery_leaving_temperature_setpoint_node_name))
        return ",".join(out)

class ChillerElectricReformulatedEir(object):
    """ Corresponds to IDD object `Chiller:Electric:ReformulatedEIR`
        This chiller model is an empirical model, a reformulated version of Chiller:Electric:EIR
        where the performance is a function of condenser leaving fluid Temperature instead of
        condenser entering fluid Temperature. Chiller performance at off-reference conditions is
        modeled using three polynomial equations. Three curve objects are required.
    """
    internal_name = "Chiller:Electric:ReformulatedEIR"
    field_count = 28

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric:ReformulatedEIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Capacity"] = None
        self._data["Reference COP"] = None
        self._data["Reference Leaving Chilled Water Temperature"] = None
        self._data["Reference Leaving Condenser Water Temperature"] = None
        self._data["Reference Chilled Water Flow Rate"] = None
        self._data["Reference Condenser Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Minimum Unloading Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = None
        self._data["Leaving Chilled Water Lower Temperature Limit"] = None
        self._data["Chiller Flow Mode Type"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_capacity = None
        else:
            self.reference_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cop = None
        else:
            self.reference_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_leaving_chilled_water_temperature = None
        else:
            self.reference_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_leaving_condenser_water_temperature = None
        else:
            self.reference_leaving_condenser_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_chilled_water_flow_rate = None
        else:
            self.reference_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_condenser_water_flow_rate = None
        else:
            self.reference_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_unloading_ratio = None
        else:
            self.minimum_unloading_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = None
        else:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.leaving_chilled_water_lower_temperature_limit = None
        else:
            self.leaving_chilled_water_lower_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode_type = None
        else:
            self.chiller_flow_mode_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_capacity(self):
        """Get reference_capacity

        Returns:
            float: the value of `reference_capacity` or None if not set
        """
        return self._data["Reference Capacity"]

    @reference_capacity.setter
    def reference_capacity(self, value=None):
        """  Corresponds to IDD Field `reference_capacity`

        Args:
            value (float): value for IDD Field `reference_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_capacity`')

        self._data["Reference Capacity"] = value

    @property
    def reference_cop(self):
        """Get reference_cop

        Returns:
            float: the value of `reference_cop` or None if not set
        """
        return self._data["Reference COP"]

    @reference_cop.setter
    def reference_cop(self, value=None):
        """  Corresponds to IDD Field `reference_cop`
        Efficiency of the chiller compressor (cooling output/compressor energy input).
        Condenser fan power should not be included here.

        Args:
            value (float): value for IDD Field `reference_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cop`')

        self._data["Reference COP"] = value

    @property
    def reference_leaving_chilled_water_temperature(self):
        """Get reference_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Chilled Water Temperature"]

    @reference_leaving_chilled_water_temperature.setter
    def reference_leaving_chilled_water_temperature(self, value=6.67 ):
        """  Corresponds to IDD Field `reference_leaving_chilled_water_temperature`

        Args:
            value (float): value for IDD Field `reference_leaving_chilled_water_temperature`
                Unit: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_leaving_chilled_water_temperature`'.format(value))

        self._data["Reference Leaving Chilled Water Temperature"] = value

    @property
    def reference_leaving_condenser_water_temperature(self):
        """Get reference_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Condenser Water Temperature"]

    @reference_leaving_condenser_water_temperature.setter
    def reference_leaving_condenser_water_temperature(self, value=35.0 ):
        """  Corresponds to IDD Field `reference_leaving_condenser_water_temperature`

        Args:
            value (float): value for IDD Field `reference_leaving_condenser_water_temperature`
                Unit: C
                Default value: 35.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_leaving_condenser_water_temperature`'.format(value))

        self._data["Reference Leaving Condenser Water Temperature"] = value

    @property
    def reference_chilled_water_flow_rate(self):
        """Get reference_chilled_water_flow_rate

        Returns:
            float: the value of `reference_chilled_water_flow_rate` or None if not set
        """
        return self._data["Reference Chilled Water Flow Rate"]

    @reference_chilled_water_flow_rate.setter
    def reference_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_chilled_water_flow_rate`

        Args:
            value (float): value for IDD Field `reference_chilled_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_chilled_water_flow_rate`')

        self._data["Reference Chilled Water Flow Rate"] = value

    @property
    def reference_condenser_water_flow_rate(self):
        """Get reference_condenser_water_flow_rate

        Returns:
            float: the value of `reference_condenser_water_flow_rate` or None if not set
        """
        return self._data["Reference Condenser Water Flow Rate"]

    @reference_condenser_water_flow_rate.setter
    def reference_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_condenser_water_flow_rate`

        Args:
            value (float): value for IDD Field `reference_condenser_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_condenser_water_flow_rate`')

        self._data["Reference Condenser Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_function_of_temperature_curve_name`
        Cooling capacity as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')

        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:TwoIndependentVariables object can also be used
        curve = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3
        + i*0 + j*0
        PLR = part load ratio (cooling load/steady state capacity)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`
        Part load ratio below which the chiller starts cycling on/off to meet the load.
        Must be less than or equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.1
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`
        Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """Get minimum_unloading_ratio

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set
        """
        return self._data["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_unloading_ratio`
        Part load ratio where the chiller can no longer unload and false loading begins.
        Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `minimum_unloading_ratio`
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_unloading_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_unloading_ratio`')

        self._data["Minimum Unloading Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self):
        """Get fraction_of_compressor_electric_consumption_rejected_by_condenser

        Returns:
            float: the value of `fraction_of_compressor_electric_consumption_rejected_by_condenser` or None if not set
        """
        return self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"]

    @fraction_of_compressor_electric_consumption_rejected_by_condenser.setter
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_compressor_electric_consumption_rejected_by_condenser`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter a value of 1.0 when modeling hermetic chillers.
        For open chillers, enter the compressor motor efficiency.
        This value should be greater than 0.6 for praticle applications.

        Args:
            value (float): value for IDD Field `fraction_of_compressor_electric_consumption_rejected_by_condenser`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')

        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """Get leaving_chilled_water_lower_temperature_limit

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set
        """
        return self._data["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=2.0 ):
        """  Corresponds to IDD Field `leaving_chilled_water_lower_temperature_limit`

        Args:
            value (float): value for IDD Field `leaving_chilled_water_lower_temperature_limit`
                Unit: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `leaving_chilled_water_lower_temperature_limit`'.format(value))

        self._data["Leaving Chilled Water Lower Temperature Limit"] = value

    @property
    def chiller_flow_mode_type(self):
        """Get chiller_flow_mode_type

        Returns:
            str: the value of `chiller_flow_mode_type` or None if not set
        """
        return self._data["Chiller Flow Mode Type"]

    @chiller_flow_mode_type.setter
    def chiller_flow_mode_type(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode_type`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode_type`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode_type`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode_type`'.format(value))

        self._data["Chiller Flow Mode Type"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `condenser_heat_recovery_relative_capacity_fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `condenser_heat_recovery_relative_capacity_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')

        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')

        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')

        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_capacity))
        out.append(self._to_str(self.reference_cop))
        out.append(self._to_str(self.reference_leaving_chilled_water_temperature))
        out.append(self._to_str(self.reference_leaving_condenser_water_temperature))
        out.append(self._to_str(self.reference_chilled_water_flow_rate))
        out.append(self._to_str(self.reference_condenser_water_flow_rate))
        out.append(self._to_str(self.cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.minimum_unloading_ratio))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.fraction_of_compressor_electric_consumption_rejected_by_condenser))
        out.append(self._to_str(self.leaving_chilled_water_lower_temperature_limit))
        out.append(self._to_str(self.chiller_flow_mode_type))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.condenser_heat_recovery_relative_capacity_fraction))
        out.append(self._to_str(self.heat_recovery_inlet_high_temperature_limit_schedule_name))
        out.append(self._to_str(self.heat_recovery_leaving_temperature_setpoint_node_name))
        return ",".join(out)

class ChillerElectric(object):
    """ Corresponds to IDD object `Chiller:Electric`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:Electric"
    field_count = 37

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Fluid Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_fluid_flow_rate = None
        else:
            self.design_condenser_fluid_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_condenser_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_condenser_inlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_inlet_temperature`'.format(value))

        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `temperature_rise_coefficient`

        Args:
            value (float): value for IDD Field `temperature_rise_coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')

        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `design_chilled_water_outlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))

        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the maximum flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_fluid_flow_rate(self):
        """Get design_condenser_fluid_flow_rate

        Returns:
            float: the value of `design_condenser_fluid_flow_rate` or None if not set
        """
        return self._data["Design Condenser Fluid Flow Rate"]

    @design_condenser_fluid_flow_rate.setter
    def design_condenser_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_fluid_flow_rate`
        This field is only used for Condenser Type = AirCooled or EvaporativelyCooled
        when Heat Recovery is specified

        Args:
            value (float): value for IDD Field `design_condenser_fluid_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_fluid_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_fluid_flow_rate`')

        self._data["Design Condenser Fluid Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_temperature_lower_limit`

        Args:
            value (float): value for IDD Field `chilled_water_outlet_temperature_lower_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Unit: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Unit: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `condenser_heat_recovery_relative_capacity_fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `condenser_heat_recovery_relative_capacity_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')

        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_high_temperature_limit_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')

        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `heat_recovery_leaving_temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')

        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_condenser_inlet_temperature))
        out.append(self._to_str(self.temperature_rise_coefficient))
        out.append(self._to_str(self.design_chilled_water_outlet_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_fluid_flow_rate))
        out.append(self._to_str(self.coefficient_1_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_full_load_ratio_curve))
        out.append(self._to_str(self.chilled_water_outlet_temperature_lower_limit))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        out.append(self._to_str(self.condenser_heat_recovery_relative_capacity_fraction))
        out.append(self._to_str(self.heat_recovery_inlet_high_temperature_limit_schedule_name))
        out.append(self._to_str(self.heat_recovery_leaving_temperature_setpoint_node_name))
        return ",".join(out)

class ChillerAbsorptionIndirect(object):
    """ Corresponds to IDD object `Chiller:Absorption:Indirect`
        This indirect absorption chiller model is an enhanced model from the
        Building Loads and System Thermodynamics (BLAST) program.  Chiller
        performance curves are generated by fitting catalog data to third order
        polynomial equations. The chiller capacity is a function of condenser,
        chilled water, and generator temperatures. The heat input is a function
        of part-load ratio, condenser temperature, and chilled water temperature.
    """
    internal_name = "Chiller:Absorption:Indirect"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Absorption:Indirect`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Pumping Power"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Condenser Inlet Temperature Lower Limit"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Generator Heat Input Function of Part Load Ratio Curve Name"] = None
        self._data["Pump Electric Input Function of Part Load Ratio Curve Name"] = None
        self._data["Generator Inlet Node Name"] = None
        self._data["Generator Outlet Node Name"] = None
        self._data["Capacity Correction Function of Condenser Temperature Curve Name"] = None
        self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"] = None
        self._data["Capacity Correction Function of Generator Temperature Curve Name"] = None
        self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"] = None
        self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"] = None
        self._data["Generator Heat Source Type"] = None
        self._data["Design Generator Fluid Flow Rate"] = None
        self._data["Temperature Lower Limit Generator Inlet"] = None
        self._data["Degree of Subcooling in Steam Generator"] = None
        self._data["Degree of Subcooling in Steam Condensate Loop"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_pumping_power = None
        else:
            self.nominal_pumping_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_temperature_lower_limit = None
        else:
            self.condenser_inlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_heat_input_function_of_part_load_ratio_curve_name = None
        else:
            self.generator_heat_input_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_electric_input_function_of_part_load_ratio_curve_name = None
        else:
            self.pump_electric_input_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_inlet_node_name = None
        else:
            self.generator_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_outlet_node_name = None
        else:
            self.generator_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_condenser_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_condenser_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_chilled_water_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_chilled_water_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_generator_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_generator_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_heat_input_correction_function_of_condenser_temperature_curve_name = None
        else:
            self.generator_heat_input_correction_function_of_condenser_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_heat_input_correction_function_of_chilled_water_temperature_curve_name = None
        else:
            self.generator_heat_input_correction_function_of_chilled_water_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_heat_source_type = None
        else:
            self.generator_heat_source_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_generator_fluid_flow_rate = None
        else:
            self.design_generator_fluid_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_lower_limit_generator_inlet = None
        else:
            self.temperature_lower_limit_generator_inlet = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_generator = None
        else:
            self.degree_of_subcooling_in_steam_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_condensate_loop = None
        else:
            self.degree_of_subcooling_in_steam_condensate_loop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_pumping_power(self):
        """Get nominal_pumping_power

        Returns:
            float: the value of `nominal_pumping_power` or None if not set
        """
        return self._data["Nominal Pumping Power"]

    @nominal_pumping_power.setter
    def nominal_pumping_power(self, value=None):
        """  Corresponds to IDD Field `nominal_pumping_power`

        Args:
            value (float): value for IDD Field `nominal_pumping_power`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_pumping_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_pumping_power`')

        self._data["Nominal Pumping Power"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=30.0 ):
        """  Corresponds to IDD Field `design_condenser_inlet_temperature`
        Used only when condenser flow rate is autosized.

        Args:
            value (float): value for IDD Field `design_condenser_inlet_temperature`
                Unit: C
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_inlet_temperature`'.format(value))

        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def condenser_inlet_temperature_lower_limit(self):
        """Get condenser_inlet_temperature_lower_limit

        Returns:
            float: the value of `condenser_inlet_temperature_lower_limit` or None if not set
        """
        return self._data["Condenser Inlet Temperature Lower Limit"]

    @condenser_inlet_temperature_lower_limit.setter
    def condenser_inlet_temperature_lower_limit(self, value=15.0 ):
        """  Corresponds to IDD Field `condenser_inlet_temperature_lower_limit`
        Provides warnings when entering condenser temperature is below minimum.
        Capacity is not adjusted when entering condenser temperature is below minimum.

        Args:
            value (float): value for IDD Field `condenser_inlet_temperature_lower_limit`
                Unit: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_inlet_temperature_lower_limit`'.format(value))

        self._data["Condenser Inlet Temperature Lower Limit"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=5.0 ):
        """  Corresponds to IDD Field `chilled_water_outlet_temperature_lower_limit`
        Capacity is adjusted when leaving chilled water temperature is below minimum.

        Args:
            value (float): value for IDD Field `chilled_water_outlet_temperature_lower_limit`
                Unit: C
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable flow this is the max flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def generator_heat_input_function_of_part_load_ratio_curve_name(self):
        """Get generator_heat_input_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `generator_heat_input_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Function of Part Load Ratio Curve Name"]

    @generator_heat_input_function_of_part_load_ratio_curve_name.setter
    def generator_heat_input_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `generator_heat_input_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `generator_heat_input_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_heat_input_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_function_of_part_load_ratio_curve_name`')

        self._data["Generator Heat Input Function of Part Load Ratio Curve Name"] = value

    @property
    def pump_electric_input_function_of_part_load_ratio_curve_name(self):
        """Get pump_electric_input_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `pump_electric_input_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Pump Electric Input Function of Part Load Ratio Curve Name"]

    @pump_electric_input_function_of_part_load_ratio_curve_name.setter
    def pump_electric_input_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `pump_electric_input_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `pump_electric_input_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_electric_input_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_electric_input_function_of_part_load_ratio_curve_name`')

        self._data["Pump Electric Input Function of Part Load Ratio Curve Name"] = value

    @property
    def generator_inlet_node_name(self):
        """Get generator_inlet_node_name

        Returns:
            str: the value of `generator_inlet_node_name` or None if not set
        """
        return self._data["Generator Inlet Node Name"]

    @generator_inlet_node_name.setter
    def generator_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `generator_inlet_node_name`
        Enter the generator inlet node name which connects this chiller to a
        steam or hot water plant, otherwise leave this field blank.
        Generator nodes are used to model heat input to the chiller.

        Args:
            value (str): value for IDD Field `generator_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_inlet_node_name`')

        self._data["Generator Inlet Node Name"] = value

    @property
    def generator_outlet_node_name(self):
        """Get generator_outlet_node_name

        Returns:
            str: the value of `generator_outlet_node_name` or None if not set
        """
        return self._data["Generator Outlet Node Name"]

    @generator_outlet_node_name.setter
    def generator_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `generator_outlet_node_name`
        Enter the generator outlet node name which connects this chiller to a
        steam or hot water plant, otherwise leave this field blank.
        Generator nodes are used to model heat input to the chiller.

        Args:
            value (str): value for IDD Field `generator_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_outlet_node_name`')

        self._data["Generator Outlet Node Name"] = value

    @property
    def capacity_correction_function_of_condenser_temperature_curve_name(self):
        """Get capacity_correction_function_of_condenser_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_condenser_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Condenser Temperature Curve Name"]

    @capacity_correction_function_of_condenser_temperature_curve_name.setter
    def capacity_correction_function_of_condenser_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `capacity_correction_function_of_condenser_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized capacity to changes in condenser temperature.

        Args:
            value (str): value for IDD Field `capacity_correction_function_of_condenser_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_correction_function_of_condenser_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_condenser_temperature_curve_name`')

        self._data["Capacity Correction Function of Condenser Temperature Curve Name"] = value

    @property
    def capacity_correction_function_of_chilled_water_temperature_curve_name(self):
        """Get capacity_correction_function_of_chilled_water_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_chilled_water_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"]

    @capacity_correction_function_of_chilled_water_temperature_curve_name.setter
    def capacity_correction_function_of_chilled_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `capacity_correction_function_of_chilled_water_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized capacity to changes in leaving chilled water temperature.

        Args:
            value (str): value for IDD Field `capacity_correction_function_of_chilled_water_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_correction_function_of_chilled_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_chilled_water_temperature_curve_name`')

        self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"] = value

    @property
    def capacity_correction_function_of_generator_temperature_curve_name(self):
        """Get capacity_correction_function_of_generator_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_generator_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Generator Temperature Curve Name"]

    @capacity_correction_function_of_generator_temperature_curve_name.setter
    def capacity_correction_function_of_generator_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `capacity_correction_function_of_generator_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Used when generator fluid type is hot water
        Curve which shows the change in normailized capacity to changes in generator temperature.

        Args:
            value (str): value for IDD Field `capacity_correction_function_of_generator_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_correction_function_of_generator_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_generator_temperature_curve_name`')

        self._data["Capacity Correction Function of Generator Temperature Curve Name"] = value

    @property
    def generator_heat_input_correction_function_of_condenser_temperature_curve_name(self):
        """Get generator_heat_input_correction_function_of_condenser_temperature_curve_name

        Returns:
            str: the value of `generator_heat_input_correction_function_of_condenser_temperature_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"]

    @generator_heat_input_correction_function_of_condenser_temperature_curve_name.setter
    def generator_heat_input_correction_function_of_condenser_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized heat input to changes in condenser temperature.

        Args:
            value (str): value for IDD Field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`')

        self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"] = value

    @property
    def generator_heat_input_correction_function_of_chilled_water_temperature_curve_name(self):
        """Get generator_heat_input_correction_function_of_chilled_water_temperature_curve_name

        Returns:
            str: the value of `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"]

    @generator_heat_input_correction_function_of_chilled_water_temperature_curve_name.setter
    def generator_heat_input_correction_function_of_chilled_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized heat input to changes in leaving chilled water temperature.

        Args:
            value (str): value for IDD Field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`')

        self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"] = value

    @property
    def generator_heat_source_type(self):
        """Get generator_heat_source_type

        Returns:
            str: the value of `generator_heat_source_type` or None if not set
        """
        return self._data["Generator Heat Source Type"]

    @generator_heat_source_type.setter
    def generator_heat_source_type(self, value="Steam"):
        """  Corresponds to IDD Field `generator_heat_source_type`
        The Generator side of the chiller can be connected to a hot water or steam plant where the
        generator inlet and outlet nodes are connected to a plant loop. If the generator is not
        connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be
        specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.

        Args:
            value (str): value for IDD Field `generator_heat_source_type`
                Accepted values are:
                      - HotWater
                      - Steam
                Default value: Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_heat_source_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_source_type`')
            vals = set()
            vals.add("HotWater")
            vals.add("Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_heat_source_type`'.format(value))

        self._data["Generator Heat Source Type"] = value

    @property
    def design_generator_fluid_flow_rate(self):
        """Get design_generator_fluid_flow_rate

        Returns:
            float: the value of `design_generator_fluid_flow_rate` or None if not set
        """
        return self._data["Design Generator Fluid Flow Rate"]

    @design_generator_fluid_flow_rate.setter
    def design_generator_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_generator_fluid_flow_rate`
        For variable flow this is the max flow and for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_generator_fluid_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_generator_fluid_flow_rate`'.format(value))

        self._data["Design Generator Fluid Flow Rate"] = value

    @property
    def temperature_lower_limit_generator_inlet(self):
        """Get temperature_lower_limit_generator_inlet

        Returns:
            float: the value of `temperature_lower_limit_generator_inlet` or None if not set
        """
        return self._data["Temperature Lower Limit Generator Inlet"]

    @temperature_lower_limit_generator_inlet.setter
    def temperature_lower_limit_generator_inlet(self, value=0.0 ):
        """  Corresponds to IDD Field `temperature_lower_limit_generator_inlet`
        Provides warnings when entering generator temperature is below minimum.
        Capacity is not adjusted when entering generator temperature is below minimum.

        Args:
            value (float): value for IDD Field `temperature_lower_limit_generator_inlet`
                Unit: C
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_lower_limit_generator_inlet`'.format(value))

        self._data["Temperature Lower Limit Generator Inlet"] = value

    @property
    def degree_of_subcooling_in_steam_generator(self):
        """Get degree_of_subcooling_in_steam_generator

        Returns:
            float: the value of `degree_of_subcooling_in_steam_generator` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Generator"]

    @degree_of_subcooling_in_steam_generator.setter
    def degree_of_subcooling_in_steam_generator(self, value=1.0 ):
        """  Corresponds to IDD Field `degree_of_subcooling_in_steam_generator`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `degree_of_subcooling_in_steam_generator`
                Unit: C
                Default value: 1.0
                value >= 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_subcooling_in_steam_generator`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `degree_of_subcooling_in_steam_generator`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `degree_of_subcooling_in_steam_generator`')

        self._data["Degree of Subcooling in Steam Generator"] = value

    @property
    def degree_of_subcooling_in_steam_condensate_loop(self):
        """Get degree_of_subcooling_in_steam_condensate_loop

        Returns:
            float: the value of `degree_of_subcooling_in_steam_condensate_loop` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Condensate Loop"]

    @degree_of_subcooling_in_steam_condensate_loop.setter
    def degree_of_subcooling_in_steam_condensate_loop(self, value=0.0 ):
        """  Corresponds to IDD Field `degree_of_subcooling_in_steam_condensate_loop`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `degree_of_subcooling_in_steam_condensate_loop`
                Unit: C
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_subcooling_in_steam_condensate_loop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `degree_of_subcooling_in_steam_condensate_loop`')

        self._data["Degree of Subcooling in Steam Condensate Loop"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_pumping_power))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_condenser_inlet_temperature))
        out.append(self._to_str(self.condenser_inlet_temperature_lower_limit))
        out.append(self._to_str(self.chilled_water_outlet_temperature_lower_limit))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.generator_heat_input_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.pump_electric_input_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.generator_inlet_node_name))
        out.append(self._to_str(self.generator_outlet_node_name))
        out.append(self._to_str(self.capacity_correction_function_of_condenser_temperature_curve_name))
        out.append(self._to_str(self.capacity_correction_function_of_chilled_water_temperature_curve_name))
        out.append(self._to_str(self.capacity_correction_function_of_generator_temperature_curve_name))
        out.append(self._to_str(self.generator_heat_input_correction_function_of_condenser_temperature_curve_name))
        out.append(self._to_str(self.generator_heat_input_correction_function_of_chilled_water_temperature_curve_name))
        out.append(self._to_str(self.generator_heat_source_type))
        out.append(self._to_str(self.design_generator_fluid_flow_rate))
        out.append(self._to_str(self.temperature_lower_limit_generator_inlet))
        out.append(self._to_str(self.degree_of_subcooling_in_steam_generator))
        out.append(self._to_str(self.degree_of_subcooling_in_steam_condensate_loop))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class ChillerAbsorption(object):
    """ Corresponds to IDD object `Chiller:Absorption`
        This indirect absorption chiller model is the empirical model from the
        Building Loads and System Thermodynamics (BLAST) program.  Chiller
        performance curves are generated by fitting catalog data to third order
        polynomial equations.  Two sets of coefficients are required.
    """
    internal_name = "Chiller:Absorption"
    field_count = 27

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Absorption`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Pumping Power"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Generator Inlet Node Name"] = None
        self._data["Generator Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Generator Heat Source Type"] = None
        self._data["Design Generator Fluid Flow Rate"] = None
        self._data["Degree of Subcooling in Steam Generator"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_pumping_power = None
        else:
            self.nominal_pumping_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_inlet_node_name = None
        else:
            self.generator_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_outlet_node_name = None
        else:
            self.generator_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_heat_source_type = None
        else:
            self.generator_heat_source_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_generator_fluid_flow_rate = None
        else:
            self.design_generator_fluid_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_generator = None
        else:
            self.degree_of_subcooling_in_steam_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_pumping_power(self):
        """Get nominal_pumping_power

        Returns:
            float: the value of `nominal_pumping_power` or None if not set
        """
        return self._data["Nominal Pumping Power"]

    @nominal_pumping_power.setter
    def nominal_pumping_power(self, value=None):
        """  Corresponds to IDD Field `nominal_pumping_power`

        Args:
            value (float): value for IDD Field `nominal_pumping_power`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_pumping_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_pumping_power`')

        self._data["Nominal Pumping Power"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_condenser_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_condenser_inlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_inlet_temperature`'.format(value))

        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        The steam use coefficients below specify the
        steam use as a fraction of chiller operating capacity

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_1_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_1_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_1_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_1_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve`
        The pump electric use coefficients specify the
        pumping power as a Fraction of Nominal pumping power

        Args:
            value (float): value for IDD Field `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_2_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_2_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_2_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_3_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_3_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_3_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_temperature_lower_limit`

        Args:
            value (float): value for IDD Field `chilled_water_outlet_temperature_lower_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def generator_inlet_node_name(self):
        """Get generator_inlet_node_name

        Returns:
            str: the value of `generator_inlet_node_name` or None if not set
        """
        return self._data["Generator Inlet Node Name"]

    @generator_inlet_node_name.setter
    def generator_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `generator_inlet_node_name`

        Args:
            value (str): value for IDD Field `generator_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_inlet_node_name`')

        self._data["Generator Inlet Node Name"] = value

    @property
    def generator_outlet_node_name(self):
        """Get generator_outlet_node_name

        Returns:
            str: the value of `generator_outlet_node_name` or None if not set
        """
        return self._data["Generator Outlet Node Name"]

    @generator_outlet_node_name.setter
    def generator_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `generator_outlet_node_name`

        Args:
            value (str): value for IDD Field `generator_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_outlet_node_name`')

        self._data["Generator Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def generator_heat_source_type(self):
        """Get generator_heat_source_type

        Returns:
            str: the value of `generator_heat_source_type` or None if not set
        """
        return self._data["Generator Heat Source Type"]

    @generator_heat_source_type.setter
    def generator_heat_source_type(self, value="Steam"):
        """  Corresponds to IDD Field `generator_heat_source_type`
        The Generator side of the chiller can be connected to a hot water or steam plant where the
        generator inlet and outlet nodes are connected to a plant loop. If the generator is not
        connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be
        specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.

        Args:
            value (str): value for IDD Field `generator_heat_source_type`
                Accepted values are:
                      - Steam
                      - HotWater
                Default value: Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_heat_source_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_source_type`')
            vals = set()
            vals.add("Steam")
            vals.add("HotWater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_heat_source_type`'.format(value))

        self._data["Generator Heat Source Type"] = value

    @property
    def design_generator_fluid_flow_rate(self):
        """Get design_generator_fluid_flow_rate

        Returns:
            float: the value of `design_generator_fluid_flow_rate` or None if not set
        """
        return self._data["Design Generator Fluid Flow Rate"]

    @design_generator_fluid_flow_rate.setter
    def design_generator_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_generator_fluid_flow_rate`

        Args:
            value (float): value for IDD Field `design_generator_fluid_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_generator_fluid_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_generator_fluid_flow_rate`')

        self._data["Design Generator Fluid Flow Rate"] = value

    @property
    def degree_of_subcooling_in_steam_generator(self):
        """Get degree_of_subcooling_in_steam_generator

        Returns:
            float: the value of `degree_of_subcooling_in_steam_generator` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Generator"]

    @degree_of_subcooling_in_steam_generator.setter
    def degree_of_subcooling_in_steam_generator(self, value=1.0 ):
        """  Corresponds to IDD Field `degree_of_subcooling_in_steam_generator`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `degree_of_subcooling_in_steam_generator`
                Unit: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_subcooling_in_steam_generator`'.format(value))

        self._data["Degree of Subcooling in Steam Generator"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_pumping_power))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_condenser_inlet_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_the_pump_electric_use_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_the_pump_electric_use_part_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_the_pump_electric_use_part_load_ratio_curve))
        out.append(self._to_str(self.chilled_water_outlet_temperature_lower_limit))
        out.append(self._to_str(self.generator_inlet_node_name))
        out.append(self._to_str(self.generator_outlet_node_name))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.generator_heat_source_type))
        out.append(self._to_str(self.design_generator_fluid_flow_rate))
        out.append(self._to_str(self.degree_of_subcooling_in_steam_generator))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class ChillerConstantCop(object):
    """ Corresponds to IDD object `Chiller:ConstantCOP`
        This constant COP chiller model provides a means of quickly specifying a
        Chiller where performance data is not available.
    """
    internal_name = "Chiller:ConstantCOP"
    field_count = 15

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:ConstantCOP`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the maximum flow and for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Unit: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Unit: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        return ",".join(out)

class ChillerEngineDriven(object):
    """ Corresponds to IDD object `Chiller:EngineDriven`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:EngineDriven"
    field_count = 46

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:EngineDriven`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Fuel Use Curve Name"] = None
        self._data["Jacket Heat Recovery Curve Name"] = None
        self._data["Lube Heat Recovery Curve Name"] = None
        self._data["Total Exhaust Energy Curve Name"] = None
        self._data["Exhaust Temperature Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Fuel Type"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_use_curve_name = None
        else:
            self.fuel_use_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.jacket_heat_recovery_curve_name = None
        else:
            self.jacket_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lube_heat_recovery_curve_name = None
        else:
            self.lube_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_exhaust_energy_curve_name = None
        else:
            self.total_exhaust_energy_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_temperature_curve_name = None
        else:
            self.exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node = None
        else:
            self.maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`
        Nominal Refrigeration Cycle COP

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_condenser_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_condenser_inlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_inlet_temperature`'.format(value))

        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `temperature_rise_coefficient`

        Args:
            value (float): value for IDD Field `temperature_rise_coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')

        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `design_chilled_water_outlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))

        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the maximum flow and for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_temperature_lower_limit`
        Special EngineDriven Chiller Parameters Below

        Args:
            value (float): value for IDD Field `chilled_water_outlet_temperature_lower_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def fuel_use_curve_name(self):
        """Get fuel_use_curve_name

        Returns:
            str: the value of `fuel_use_curve_name` or None if not set
        """
        return self._data["Fuel Use Curve Name"]

    @fuel_use_curve_name.setter
    def fuel_use_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_use_curve_name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `fuel_use_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_use_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_use_curve_name`')

        self._data["Fuel Use Curve Name"] = value

    @property
    def jacket_heat_recovery_curve_name(self):
        """Get jacket_heat_recovery_curve_name

        Returns:
            str: the value of `jacket_heat_recovery_curve_name` or None if not set
        """
        return self._data["Jacket Heat Recovery Curve Name"]

    @jacket_heat_recovery_curve_name.setter
    def jacket_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `jacket_heat_recovery_curve_name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `jacket_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `jacket_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `jacket_heat_recovery_curve_name`')

        self._data["Jacket Heat Recovery Curve Name"] = value

    @property
    def lube_heat_recovery_curve_name(self):
        """Get lube_heat_recovery_curve_name

        Returns:
            str: the value of `lube_heat_recovery_curve_name` or None if not set
        """
        return self._data["Lube Heat Recovery Curve Name"]

    @lube_heat_recovery_curve_name.setter
    def lube_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `lube_heat_recovery_curve_name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `lube_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lube_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lube_heat_recovery_curve_name`')

        self._data["Lube Heat Recovery Curve Name"] = value

    @property
    def total_exhaust_energy_curve_name(self):
        """Get total_exhaust_energy_curve_name

        Returns:
            str: the value of `total_exhaust_energy_curve_name` or None if not set
        """
        return self._data["Total Exhaust Energy Curve Name"]

    @total_exhaust_energy_curve_name.setter
    def total_exhaust_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `total_exhaust_energy_curve_name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `total_exhaust_energy_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_exhaust_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_exhaust_energy_curve_name`')

        self._data["Total Exhaust Energy Curve Name"] = value

    @property
    def exhaust_temperature_curve_name(self):
        """Get exhaust_temperature_curve_name

        Returns:
            str: the value of `exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Temperature Curve Name"]

    @exhaust_temperature_curve_name.setter
    def exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_temperature_curve_name`
        Curve is a function of Part Load Ratio (PLR)
        curve = a + b*PLR + c*PLR**2
        Table:OneIndependentVariable object can also be used
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_temperature_curve_name`')

        self._data["Exhaust Temperature Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`
        curve = C1 * (nominal capacity)**C2

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        curve = C1 * (nominal capacity)**C2
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Unit: (kg/s)/W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`')

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `design_minimum_exhaust_temperature`

        Args:
            value (float): value for IDD Field `design_minimum_exhaust_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_minimum_exhaust_temperature`'.format(value))

        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node(self):
        """Get maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node

        Returns:
            float: the value of `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node` or None if not set
        """
        return self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"]

    @maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node.setter
    def maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node(self, value=60.0 ):
        """  Corresponds to IDD Field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`

        Args:
            value (float): value for IDD Field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`
                Unit: C
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`')

        self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Unit: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Unit: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_condenser_inlet_temperature))
        out.append(self._to_str(self.temperature_rise_coefficient))
        out.append(self._to_str(self.design_chilled_water_outlet_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.coefficient_1_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_full_load_ratio_curve))
        out.append(self._to_str(self.chilled_water_outlet_temperature_lower_limit))
        out.append(self._to_str(self.fuel_use_curve_name))
        out.append(self._to_str(self.jacket_heat_recovery_curve_name))
        out.append(self._to_str(self.lube_heat_recovery_curve_name))
        out.append(self._to_str(self.total_exhaust_energy_curve_name))
        out.append(self._to_str(self.exhaust_temperature_curve_name))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_minimum_exhaust_temperature))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        return ",".join(out)

class ChillerCombustionTurbine(object):
    """ Corresponds to IDD object `Chiller:CombustionTurbine`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:CombustionTurbine"
    field_count = 60

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:CombustionTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Coefficient 1 of Fuel Input Curve"] = None
        self._data["Coefficient 2 of Fuel Input Curve"] = None
        self._data["Coefficient 3 of Fuel Input Curve"] = None
        self._data["Coefficient 1 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 2 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 3 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 1 of Exhaust Flow Curve"] = None
        self._data["Coefficient 2 of Exhaust Flow Curve"] = None
        self._data["Coefficient 3 of Exhaust Flow Curve"] = None
        self._data["Coefficient 1 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 2 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 3 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 1 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 2 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 3 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Gas Turbine Engine Capacity"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Steam Saturation Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_fuel_input_curve = None
        else:
            self.coefficient_1_of_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_fuel_input_curve = None
        else:
            self.coefficient_2_of_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_fuel_input_curve = None
        else:
            self.coefficient_3_of_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_1_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_2_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_3_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_exhaust_flow_curve = None
        else:
            self.coefficient_1_of_exhaust_flow_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_exhaust_flow_curve = None
        else:
            self.coefficient_2_of_exhaust_flow_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_exhaust_flow_curve = None
        else:
            self.coefficient_3_of_exhaust_flow_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_1_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_2_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_3_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_1_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_2_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_3_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_1_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_2_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_3_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_3_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_turbine_engine_capacity = None
        else:
            self.gas_turbine_engine_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_steam_saturation_temperature = None
        else:
            self.design_steam_saturation_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            vals.add("EvaporativelyCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_condenser_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_condenser_inlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_inlet_temperature`'.format(value))

        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `temperature_rise_coefficient`

        Args:
            value (float): value for IDD Field `temperature_rise_coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')

        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `design_chilled_water_outlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))

        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_capacity_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_capacity_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_power_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_power_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_full_load_ratio_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_full_load_ratio_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))

        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_temperature_lower_limit`
        Special Gas Turbine Chiller Parameters Below

        Args:
            value (float): value for IDD Field `chilled_water_outlet_temperature_lower_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def coefficient_1_of_fuel_input_curve(self):
        """Get coefficient_1_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_1_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 1 of Fuel Input Curve"]

    @coefficient_1_of_fuel_input_curve.setter
    def coefficient_1_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_fuel_input_curve`'.format(value))

        self._data["Coefficient 1 of Fuel Input Curve"] = value

    @property
    def coefficient_2_of_fuel_input_curve(self):
        """Get coefficient_2_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_2_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 2 of Fuel Input Curve"]

    @coefficient_2_of_fuel_input_curve.setter
    def coefficient_2_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_fuel_input_curve`'.format(value))

        self._data["Coefficient 2 of Fuel Input Curve"] = value

    @property
    def coefficient_3_of_fuel_input_curve(self):
        """Get coefficient_3_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_3_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 3 of Fuel Input Curve"]

    @coefficient_3_of_fuel_input_curve.setter
    def coefficient_3_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_fuel_input_curve`'.format(value))

        self._data["Coefficient 3 of Fuel Input Curve"] = value

    @property
    def coefficient_1_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_1_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_1_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 1 of Temperature Based Fuel Input Curve"]

    @coefficient_1_of_temperature_based_fuel_input_curve.setter
    def coefficient_1_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_temperature_based_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_temperature_based_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_temperature_based_fuel_input_curve`'.format(value))

        self._data["Coefficient 1 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_2_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_2_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_2_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 2 of Temperature Based Fuel Input Curve"]

    @coefficient_2_of_temperature_based_fuel_input_curve.setter
    def coefficient_2_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_temperature_based_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_temperature_based_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_temperature_based_fuel_input_curve`'.format(value))

        self._data["Coefficient 2 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_3_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_3_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_3_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 3 of Temperature Based Fuel Input Curve"]

    @coefficient_3_of_temperature_based_fuel_input_curve.setter
    def coefficient_3_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_temperature_based_fuel_input_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_temperature_based_fuel_input_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_temperature_based_fuel_input_curve`'.format(value))

        self._data["Coefficient 3 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_1_of_exhaust_flow_curve(self):
        """Get coefficient_1_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_1_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 1 of Exhaust Flow Curve"]

    @coefficient_1_of_exhaust_flow_curve.setter
    def coefficient_1_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_exhaust_flow_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_exhaust_flow_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_exhaust_flow_curve`'.format(value))

        self._data["Coefficient 1 of Exhaust Flow Curve"] = value

    @property
    def coefficient_2_of_exhaust_flow_curve(self):
        """Get coefficient_2_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_2_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 2 of Exhaust Flow Curve"]

    @coefficient_2_of_exhaust_flow_curve.setter
    def coefficient_2_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_exhaust_flow_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_exhaust_flow_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_exhaust_flow_curve`'.format(value))

        self._data["Coefficient 2 of Exhaust Flow Curve"] = value

    @property
    def coefficient_3_of_exhaust_flow_curve(self):
        """Get coefficient_3_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_3_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 3 of Exhaust Flow Curve"]

    @coefficient_3_of_exhaust_flow_curve.setter
    def coefficient_3_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_exhaust_flow_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_exhaust_flow_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_exhaust_flow_curve`'.format(value))

        self._data["Coefficient 3 of Exhaust Flow Curve"] = value

    @property
    def coefficient_1_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_1_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_1_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 1 of Exhaust Gas Temperature Curve"]

    @coefficient_1_of_exhaust_gas_temperature_curve.setter
    def coefficient_1_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 1 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_2_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_2_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_2_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 2 of Exhaust Gas Temperature Curve"]

    @coefficient_2_of_exhaust_gas_temperature_curve.setter
    def coefficient_2_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 2 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_3_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_3_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_3_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 3 of Exhaust Gas Temperature Curve"]

    @coefficient_3_of_exhaust_gas_temperature_curve.setter
    def coefficient_3_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 3 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_1_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_1_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_1_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_1_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_2_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_2_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_2_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_2_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_3_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_3_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_3_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_3_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))

        self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_1_of_recovery_lube_heat_curve(self):
        """Get coefficient_1_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_1_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 1 of Recovery Lube Heat Curve"]

    @coefficient_1_of_recovery_lube_heat_curve.setter
    def coefficient_1_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_recovery_lube_heat_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_recovery_lube_heat_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_recovery_lube_heat_curve`'.format(value))

        self._data["Coefficient 1 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_2_of_recovery_lube_heat_curve(self):
        """Get coefficient_2_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_2_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 2 of Recovery Lube Heat Curve"]

    @coefficient_2_of_recovery_lube_heat_curve.setter
    def coefficient_2_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_recovery_lube_heat_curve`

        Args:
            value (float): value for IDD Field `coefficient_2_of_recovery_lube_heat_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_recovery_lube_heat_curve`'.format(value))

        self._data["Coefficient 2 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_3_of_recovery_lube_heat_curve(self):
        """Get coefficient_3_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_3_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 3 of Recovery Lube Heat Curve"]

    @coefficient_3_of_recovery_lube_heat_curve.setter
    def coefficient_3_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_3_of_recovery_lube_heat_curve`

        Args:
            value (float): value for IDD Field `coefficient_3_of_recovery_lube_heat_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_3_of_recovery_lube_heat_curve`'.format(value))

        self._data["Coefficient 3 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def gas_turbine_engine_capacity(self):
        """Get gas_turbine_engine_capacity

        Returns:
            float: the value of `gas_turbine_engine_capacity` or None if not set
        """
        return self._data["Gas Turbine Engine Capacity"]

    @gas_turbine_engine_capacity.setter
    def gas_turbine_engine_capacity(self, value=None):
        """  Corresponds to IDD Field `gas_turbine_engine_capacity`

        Args:
            value (float): value for IDD Field `gas_turbine_engine_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_turbine_engine_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gas_turbine_engine_capacity`')

        self._data["Gas Turbine Engine Capacity"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Unit: (kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_steam_saturation_temperature(self):
        """Get design_steam_saturation_temperature

        Returns:
            float: the value of `design_steam_saturation_temperature` or None if not set
        """
        return self._data["Design Steam Saturation Temperature"]

    @design_steam_saturation_temperature.setter
    def design_steam_saturation_temperature(self, value=None):
        """  Corresponds to IDD Field `design_steam_saturation_temperature`

        Args:
            value (float): value for IDD Field `design_steam_saturation_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_steam_saturation_temperature`'.format(value))

        self._data["Design Steam Saturation Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `chiller_flow_mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("LeavingSetpointModulated")
            vals.add("NotModulated")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_flow_mode`'.format(value))

        self._data["Chiller Flow Mode"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `heat_recovery_maximum_temperature`

        Args:
            value (float): value for IDD Field `heat_recovery_maximum_temperature`
                Unit: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')

        self._data["Heat Recovery Maximum Temperature"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, The heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Unit: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Unit: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `basin_heater_operating_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `basin_heater_operating_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')

        self._data["Basin Heater Operating Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_condenser_inlet_temperature))
        out.append(self._to_str(self.temperature_rise_coefficient))
        out.append(self._to_str(self.design_chilled_water_outlet_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.coefficient_1_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_capacity_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_power_ratio_curve))
        out.append(self._to_str(self.coefficient_1_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_2_of_full_load_ratio_curve))
        out.append(self._to_str(self.coefficient_3_of_full_load_ratio_curve))
        out.append(self._to_str(self.chilled_water_outlet_temperature_lower_limit))
        out.append(self._to_str(self.coefficient_1_of_fuel_input_curve))
        out.append(self._to_str(self.coefficient_2_of_fuel_input_curve))
        out.append(self._to_str(self.coefficient_3_of_fuel_input_curve))
        out.append(self._to_str(self.coefficient_1_of_temperature_based_fuel_input_curve))
        out.append(self._to_str(self.coefficient_2_of_temperature_based_fuel_input_curve))
        out.append(self._to_str(self.coefficient_3_of_temperature_based_fuel_input_curve))
        out.append(self._to_str(self.coefficient_1_of_exhaust_flow_curve))
        out.append(self._to_str(self.coefficient_2_of_exhaust_flow_curve))
        out.append(self._to_str(self.coefficient_3_of_exhaust_flow_curve))
        out.append(self._to_str(self.coefficient_1_of_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_2_of_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_3_of_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_1_of_temperature_based_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_2_of_temperature_based_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_3_of_temperature_based_exhaust_gas_temperature_curve))
        out.append(self._to_str(self.coefficient_1_of_recovery_lube_heat_curve))
        out.append(self._to_str(self.coefficient_2_of_recovery_lube_heat_curve))
        out.append(self._to_str(self.coefficient_3_of_recovery_lube_heat_curve))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.gas_turbine_engine_capacity))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_steam_saturation_temperature))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.heat_recovery_maximum_temperature))
        out.append(self._to_str(self.sizing_factor))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.basin_heater_operating_schedule_name))
        return ",".join(out)

class ChillerHeaterAbsorptionDirectFired(object):
    """ Corresponds to IDD object `ChillerHeater:Absorption:DirectFired`
        Direct fired gas absorption chiller-heater using performance curves similar to DOE-2
    """
    internal_name = "ChillerHeater:Absorption:DirectFired"
    field_count = 35

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeater:Absorption:DirectFired`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Cooling Capacity"] = None
        self._data["Heating to Cooling Capacity Ratio"] = None
        self._data["Fuel Input to Cooling Output Ratio"] = None
        self._data["Fuel Input to Heating Output Ratio"] = None
        self._data["Electric Input to Cooling Output Ratio"] = None
        self._data["Electric Input to Heating Output Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Entering Condenser Water Temperature"] = None
        self._data["Design Leaving Chilled Water Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = None
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = None
        self._data["Temperature Curve Input Variable"] = None
        self._data["Condenser Type"] = None
        self._data["Chilled Water Temperature Lower Limit"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Fuel Type"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cooling_capacity = None
        else:
            self.nominal_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_to_cooling_capacity_ratio = None
        else:
            self.heating_to_cooling_capacity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio = None
        else:
            self.fuel_input_to_cooling_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_heating_output_ratio = None
        else:
            self.fuel_input_to_heating_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio = None
        else:
            self.electric_input_to_cooling_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_heating_output_ratio = None
        else:
            self.electric_input_to_heating_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_entering_condenser_water_temperature = None
        else:
            self.design_entering_condenser_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_leaving_chilled_water_temperature = None
        else:
            self.design_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_cooling_capacity_curve_name = None
        else:
            self.heating_capacity_function_of_cooling_capacity_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = None
        else:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_curve_input_variable = None
        else:
            self.temperature_curve_input_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_temperature_lower_limit = None
        else:
            self.chilled_water_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def nominal_cooling_capacity(self):
        """Get nominal_cooling_capacity

        Returns:
            float: the value of `nominal_cooling_capacity` or None if not set
        """
        return self._data["Nominal Cooling Capacity"]

    @nominal_cooling_capacity.setter
    def nominal_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_cooling_capacity`

        Args:
            value (float): value for IDD Field `nominal_cooling_capacity`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cooling_capacity`'.format(value))

        self._data["Nominal Cooling Capacity"] = value

    @property
    def heating_to_cooling_capacity_ratio(self):
        """Get heating_to_cooling_capacity_ratio

        Returns:
            float: the value of `heating_to_cooling_capacity_ratio` or None if not set
        """
        return self._data["Heating to Cooling Capacity Ratio"]

    @heating_to_cooling_capacity_ratio.setter
    def heating_to_cooling_capacity_ratio(self, value=0.8 ):
        """  Corresponds to IDD Field `heating_to_cooling_capacity_ratio`
        A positive fraction that represents the ratio of the
        heating capacity divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `heating_to_cooling_capacity_ratio`
                Default value: 0.8
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_to_cooling_capacity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_to_cooling_capacity_ratio`')

        self._data["Heating to Cooling Capacity Ratio"] = value

    @property
    def fuel_input_to_cooling_output_ratio(self):
        """Get fuel_input_to_cooling_output_ratio

        Returns:
            float: the value of `fuel_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio"]

    @fuel_input_to_cooling_output_ratio.setter
    def fuel_input_to_cooling_output_ratio(self, value=0.97 ):
        """  Corresponds to IDD Field `fuel_input_to_cooling_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `fuel_input_to_cooling_output_ratio`
                Default value: 0.97
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_input_to_cooling_output_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_input_to_cooling_output_ratio`')

        self._data["Fuel Input to Cooling Output Ratio"] = value

    @property
    def fuel_input_to_heating_output_ratio(self):
        """Get fuel_input_to_heating_output_ratio

        Returns:
            float: the value of `fuel_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Fuel Input to Heating Output Ratio"]

    @fuel_input_to_heating_output_ratio.setter
    def fuel_input_to_heating_output_ratio(self, value=1.25 ):
        """  Corresponds to IDD Field `fuel_input_to_heating_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the nominal heating capacity.

        Args:
            value (float): value for IDD Field `fuel_input_to_heating_output_ratio`
                Default value: 1.25
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fuel_input_to_heating_output_ratio`')

        self._data["Fuel Input to Heating Output Ratio"] = value

    @property
    def electric_input_to_cooling_output_ratio(self):
        """Get electric_input_to_cooling_output_ratio

        Returns:
            float: the value of `electric_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio"]

    @electric_input_to_cooling_output_ratio.setter
    def electric_input_to_cooling_output_ratio(self, value=0.01 ):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the cooling capacity at rated conditions.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `electric_input_to_cooling_output_ratio`
                Default value: 0.01
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `electric_input_to_cooling_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_cooling_output_ratio`')

        self._data["Electric Input to Cooling Output Ratio"] = value

    @property
    def electric_input_to_heating_output_ratio(self):
        """Get electric_input_to_heating_output_ratio

        Returns:
            float: the value of `electric_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Electric Input to Heating Output Ratio"]

    @electric_input_to_heating_output_ratio.setter
    def electric_input_to_heating_output_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `electric_input_to_heating_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the nominal heating capacity.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `electric_input_to_heating_output_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `electric_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_heating_output_ratio`')

        self._data["Electric Input to Heating Output Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')

        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')

        self._data["Hot Water Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`
        The positive fraction that represents the minimum cooling output possible when
        operated continually at rated temperature conditions divided by the nominal
        cooling capacity at those same conditions.  If the load on the chiller is below
        this fraction the chiller will cycle.

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.1
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`
        The positive fraction that represents the maximum cooling output possible at
        rated temperature conditions divided by the nominal cooling capacity at those
        same conditions.  If greater than 1.0, the chiller is typically thought of as
        capable of being overloaded.

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`
        The positive fraction that represents the optimal cooling output at rated
        temperature conditions divided by the nominal cooling capacity at those same
        conditions.  It represents the most desirable operating point for the chiller.

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_entering_condenser_water_temperature(self):
        """Get design_entering_condenser_water_temperature

        Returns:
            float: the value of `design_entering_condenser_water_temperature` or None if not set
        """
        return self._data["Design Entering Condenser Water Temperature"]

    @design_entering_condenser_water_temperature.setter
    def design_entering_condenser_water_temperature(self, value=29.0 ):
        """  Corresponds to IDD Field `design_entering_condenser_water_temperature`
        The temperature of the water entering the condenser of the chiller when
        operating at design conditions.  This is usually based on the temperature
        delivered by the cooling tower in a water cooled application.

        Args:
            value (float): value for IDD Field `design_entering_condenser_water_temperature`
                Unit: C
                Default value: 29.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_entering_condenser_water_temperature`'.format(value))

        self._data["Design Entering Condenser Water Temperature"] = value

    @property
    def design_leaving_chilled_water_temperature(self):
        """Get design_leaving_chilled_water_temperature

        Returns:
            float: the value of `design_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Design Leaving Chilled Water Temperature"]

    @design_leaving_chilled_water_temperature.setter
    def design_leaving_chilled_water_temperature(self, value=7.0 ):
        """  Corresponds to IDD Field `design_leaving_chilled_water_temperature`
        The temperature of the water leaving the evaporator of the chiller when
        operating at design conditions also called the chilled water supply temperature
        or leaving chilled water temperature.

        Args:
            value (float): value for IDD Field `design_leaving_chilled_water_temperature`
                Unit: C
                Default value: 7.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_leaving_chilled_water_temperature`'.format(value))

        self._data["Design Leaving Chilled Water Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        The water flow rate at design conditions through the condenser.
        This field is not used for Condenser Type = AirCooled

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_hot_water_flow_rate`
        The water flow rate at design conditions through the heater side.

        Args:
            value (float): value for IDD Field `design_hot_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_hot_water_flow_rate`'.format(value))

        self._data["Design Hot Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_function_of_temperature_curve_name`
        The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it
        varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')

        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        The curve represents the fraction of the fuel input to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        The curve represents the fraction of the fuel input to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        The curve represents the fraction of the electricity to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        The curve represents the fraction of the electricity to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_capacity_function_of_cooling_capacity_curve_name(self):
        """Get heating_capacity_function_of_cooling_capacity_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_cooling_capacity_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Cooling Capacity Curve Name"]

    @heating_capacity_function_of_cooling_capacity_curve_name.setter
    def heating_capacity_function_of_cooling_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_function_of_cooling_capacity_curve_name`
        The curve represents how the heating capacity of the chiller varies with cooling
        capacity when the chiller is simultaeous heating and cooling.  The curve is normalized
        so an input of 1.0 represents the nominal cooling capacity and an output of 1.0
        represents the full heating capacity (see the Heating to cooling capacity ratio input)
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `heating_capacity_function_of_cooling_capacity_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')

        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = value

    @property
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self):
        """Get fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name

        Returns:
            str: the value of `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name` or None if not set
        """
        return self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"]

    @fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name.setter
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`
        When the chiller is operating as only a heater, this curve is used to represent the
        fraction of fuel used as the heating load varies.  It is normalized so that a value
        of 1.0 is the full heating capacity.  The curve is usually linear or quadratic and
        will probably be similar to a boiler curve for most chillers.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')

        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = value

    @property
    def temperature_curve_input_variable(self):
        """Get temperature_curve_input_variable

        Returns:
            str: the value of `temperature_curve_input_variable` or None if not set
        """
        return self._data["Temperature Curve Input Variable"]

    @temperature_curve_input_variable.setter
    def temperature_curve_input_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `temperature_curve_input_variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature.  Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).

        Args:
            value (str): value for IDD Field `temperature_curve_input_variable`
                Accepted values are:
                      - LeavingCondenser
                      - EnteringCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_curve_input_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_curve_input_variable`')
            vals = set()
            vals.add("LeavingCondenser")
            vals.add("EnteringCondenser")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_curve_input_variable`'.format(value))

        self._data["Temperature Curve Input Variable"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `condenser_type`
        The condenser can either be air cooled or connected to a cooling tower.

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def chilled_water_temperature_lower_limit(self):
        """Get chilled_water_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Temperature Lower Limit"]

    @chilled_water_temperature_lower_limit.setter
    def chilled_water_temperature_lower_limit(self, value=2.0 ):
        """  Corresponds to IDD Field `chilled_water_temperature_lower_limit`
        The chilled water supply temperature below which the chiller
        will shut off.

        Args:
            value (float): value for IDD Field `chilled_water_temperature_lower_limit`
                Unit: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Temperature Lower Limit"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=0.0 ):
        """  Corresponds to IDD Field `fuel_higher_heating_value`
        Not currently used.

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value=None):
        """  Corresponds to IDD Field `chiller_flow_mode`

        Args:
            value (str): value for IDD Field `chiller_flow_mode`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')

        self._data["Chiller Flow Mode"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.nominal_cooling_capacity))
        out.append(self._to_str(self.heating_to_cooling_capacity_ratio))
        out.append(self._to_str(self.fuel_input_to_cooling_output_ratio))
        out.append(self._to_str(self.fuel_input_to_heating_output_ratio))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio))
        out.append(self._to_str(self.electric_input_to_heating_output_ratio))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.hot_water_inlet_node_name))
        out.append(self._to_str(self.hot_water_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_entering_condenser_water_temperature))
        out.append(self._to_str(self.design_leaving_chilled_water_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.design_hot_water_flow_rate))
        out.append(self._to_str(self.cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.heating_capacity_function_of_cooling_capacity_curve_name))
        out.append(self._to_str(self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name))
        out.append(self._to_str(self.temperature_curve_input_variable))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.chilled_water_temperature_lower_limit))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.chiller_flow_mode))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class ChillerHeaterAbsorptionDoubleEffect(object):
    """ Corresponds to IDD object `ChillerHeater:Absorption:DoubleEffect`
        Exhaust fired absorption chiller-heater using performance curves similar to DOE-2
    """
    internal_name = "ChillerHeater:Absorption:DoubleEffect"
    field_count = 34

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeater:Absorption:DoubleEffect`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Cooling Capacity"] = None
        self._data["Heating to Cooling Capacity Ratio"] = None
        self._data["Thermal Energy Input to Cooling Output Ratio"] = None
        self._data["Thermal Energy Input to Heating Output Ratio"] = None
        self._data["Electric Input to Cooling Output Ratio"] = None
        self._data["Electric Input to Heating Output Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Entering Condenser Water Temperature"] = None
        self._data["Design Leaving Chilled Water Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = None
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = None
        self._data["Temperature Curve Input Variable"] = None
        self._data["Condenser Type"] = None
        self._data["Chilled Water Temperature Lower Limit"] = None
        self._data["Exhaust Source Object Type"] = None
        self._data["Exhaust Source Object Name"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cooling_capacity = None
        else:
            self.nominal_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_to_cooling_capacity_ratio = None
        else:
            self.heating_to_cooling_capacity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_energy_input_to_cooling_output_ratio = None
        else:
            self.thermal_energy_input_to_cooling_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_energy_input_to_heating_output_ratio = None
        else:
            self.thermal_energy_input_to_heating_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio = None
        else:
            self.electric_input_to_cooling_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_heating_output_ratio = None
        else:
            self.electric_input_to_heating_output_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_entering_condenser_water_temperature = None
        else:
            self.design_entering_condenser_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_leaving_chilled_water_temperature = None
        else:
            self.design_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_cooling_capacity_curve_name = None
        else:
            self.heating_capacity_function_of_cooling_capacity_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = None
        else:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_curve_input_variable = None
        else:
            self.temperature_curve_input_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_temperature_lower_limit = None
        else:
            self.chilled_water_temperature_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_source_object_type = None
        else:
            self.exhaust_source_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_source_object_name = None
        else:
            self.exhaust_source_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def nominal_cooling_capacity(self):
        """Get nominal_cooling_capacity

        Returns:
            float: the value of `nominal_cooling_capacity` or None if not set
        """
        return self._data["Nominal Cooling Capacity"]

    @nominal_cooling_capacity.setter
    def nominal_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_cooling_capacity`

        Args:
            value (float): value for IDD Field `nominal_cooling_capacity`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cooling_capacity`'.format(value))

        self._data["Nominal Cooling Capacity"] = value

    @property
    def heating_to_cooling_capacity_ratio(self):
        """Get heating_to_cooling_capacity_ratio

        Returns:
            float: the value of `heating_to_cooling_capacity_ratio` or None if not set
        """
        return self._data["Heating to Cooling Capacity Ratio"]

    @heating_to_cooling_capacity_ratio.setter
    def heating_to_cooling_capacity_ratio(self, value=0.8 ):
        """  Corresponds to IDD Field `heating_to_cooling_capacity_ratio`
        A positive fraction that represents the ratio of the
        heating capacity divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `heating_to_cooling_capacity_ratio`
                Default value: 0.8
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_to_cooling_capacity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_to_cooling_capacity_ratio`')

        self._data["Heating to Cooling Capacity Ratio"] = value

    @property
    def thermal_energy_input_to_cooling_output_ratio(self):
        """Get thermal_energy_input_to_cooling_output_ratio

        Returns:
            float: the value of `thermal_energy_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Thermal Energy Input to Cooling Output Ratio"]

    @thermal_energy_input_to_cooling_output_ratio.setter
    def thermal_energy_input_to_cooling_output_ratio(self, value=0.97 ):
        """  Corresponds to IDD Field `thermal_energy_input_to_cooling_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `thermal_energy_input_to_cooling_output_ratio`
                Default value: 0.97
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `thermal_energy_input_to_cooling_output_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `thermal_energy_input_to_cooling_output_ratio`')

        self._data["Thermal Energy Input to Cooling Output Ratio"] = value

    @property
    def thermal_energy_input_to_heating_output_ratio(self):
        """Get thermal_energy_input_to_heating_output_ratio

        Returns:
            float: the value of `thermal_energy_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Thermal Energy Input to Heating Output Ratio"]

    @thermal_energy_input_to_heating_output_ratio.setter
    def thermal_energy_input_to_heating_output_ratio(self, value=1.25 ):
        """  Corresponds to IDD Field `thermal_energy_input_to_heating_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the nominal heating capacity.

        Args:
            value (float): value for IDD Field `thermal_energy_input_to_heating_output_ratio`
                Default value: 1.25
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `thermal_energy_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `thermal_energy_input_to_heating_output_ratio`')

        self._data["Thermal Energy Input to Heating Output Ratio"] = value

    @property
    def electric_input_to_cooling_output_ratio(self):
        """Get electric_input_to_cooling_output_ratio

        Returns:
            float: the value of `electric_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio"]

    @electric_input_to_cooling_output_ratio.setter
    def electric_input_to_cooling_output_ratio(self, value=0.01 ):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the cooling capacity at rated conditions.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `electric_input_to_cooling_output_ratio`
                Default value: 0.01
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `electric_input_to_cooling_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_cooling_output_ratio`')

        self._data["Electric Input to Cooling Output Ratio"] = value

    @property
    def electric_input_to_heating_output_ratio(self):
        """Get electric_input_to_heating_output_ratio

        Returns:
            float: the value of `electric_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Electric Input to Heating Output Ratio"]

    @electric_input_to_heating_output_ratio.setter
    def electric_input_to_heating_output_ratio(self, value=0.0 ):
        """  Corresponds to IDD Field `electric_input_to_heating_output_ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the nominal heating capacity.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `electric_input_to_heating_output_ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `electric_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_heating_output_ratio`')

        self._data["Electric Input to Heating Output Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')

        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')

        self._data["Condenser Outlet Node Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')

        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')

        self._data["Hot Water Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1 ):
        """  Corresponds to IDD Field `minimum_part_load_ratio`
        The positive fraction that represents the minimum cooling output possible when
        operated continually at rated temperature conditions divided by the nominal
        cooling capacity at those same conditions.  If the load on the chiller is below
        this fraction the chiller will cycle.

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                Default value: 0.1
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `maximum_part_load_ratio`
        The positive fraction that represents the maximum cooling output possible at
        rated temperature conditions divided by the nominal cooling capacity at those
        same conditions.  If greater than 1.0, the chiller is typically thought of as
        capable of being overloaded.

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                Default value: 1.0
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `optimum_part_load_ratio`
        The positive fraction that represents the optimal cooling output at rated
        temperature conditions divided by the nominal cooling capacity at those same
        conditions.  It represents the most desirable operating point for the chiller.

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_entering_condenser_water_temperature(self):
        """Get design_entering_condenser_water_temperature

        Returns:
            float: the value of `design_entering_condenser_water_temperature` or None if not set
        """
        return self._data["Design Entering Condenser Water Temperature"]

    @design_entering_condenser_water_temperature.setter
    def design_entering_condenser_water_temperature(self, value=29.0 ):
        """  Corresponds to IDD Field `design_entering_condenser_water_temperature`
        The temperature of the water entering the condenser of the chiller when
        operating at design conditions.  This is usually based on the temperature
        delivered by the cooling tower in a water cooled application.

        Args:
            value (float): value for IDD Field `design_entering_condenser_water_temperature`
                Unit: C
                Default value: 29.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_entering_condenser_water_temperature`'.format(value))

        self._data["Design Entering Condenser Water Temperature"] = value

    @property
    def design_leaving_chilled_water_temperature(self):
        """Get design_leaving_chilled_water_temperature

        Returns:
            float: the value of `design_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Design Leaving Chilled Water Temperature"]

    @design_leaving_chilled_water_temperature.setter
    def design_leaving_chilled_water_temperature(self, value=7.0 ):
        """  Corresponds to IDD Field `design_leaving_chilled_water_temperature`
        The temperature of the water leaving the evaporator of the chiller when
        operating at design conditions also called the chilled water supply temperature
        or leaving chilled water temperature.

        Args:
            value (float): value for IDD Field `design_leaving_chilled_water_temperature`
                Unit: C
                Default value: 7.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_leaving_chilled_water_temperature`'.format(value))

        self._data["Design Leaving Chilled Water Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`
        The water flow rate at design conditions through the condenser.
        This field is not used for Condenser Type = AirCooled

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_hot_water_flow_rate`
        The water flow rate at design conditions through the heater side.

        Args:
            value (float): value for IDD Field `design_hot_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_hot_water_flow_rate`'.format(value))

        self._data["Design Hot Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_function_of_temperature_curve_name`
        The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it
        varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')

        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        The curve represents the fraction of the fuel input to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        The curve represents the fraction of the fuel input to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        The curve represents the fraction of the electricity to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        The curve represents the fraction of the electricity to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_capacity_function_of_cooling_capacity_curve_name(self):
        """Get heating_capacity_function_of_cooling_capacity_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_cooling_capacity_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Cooling Capacity Curve Name"]

    @heating_capacity_function_of_cooling_capacity_curve_name.setter
    def heating_capacity_function_of_cooling_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_function_of_cooling_capacity_curve_name`
        The curve represents how the heating capacity of the chiller varies with cooling
        capacity when the chiller is simultaeous heating and cooling.  The curve is normalized
        so an input of 1.0 represents the nominal cooling capacity and an output of 1.0
        represents the full heating capacity (see the Heating to cooling capacity ratio input)
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `heating_capacity_function_of_cooling_capacity_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')

        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = value

    @property
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self):
        """Get fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name

        Returns:
            str: the value of `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name` or None if not set
        """
        return self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"]

    @fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name.setter
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self, value=None):
        """  Corresponds to IDD Field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`
        When the chiller is operating as only a heater, this curve is used to represent the
        fraction of fuel used as the heating load varies.  It is normalized so that a value
        of 1.0 is the full heating capacity.  The curve is usually linear or quadratic and
        will probably be similar to a boiler curve for most chillers.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')

        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = value

    @property
    def temperature_curve_input_variable(self):
        """Get temperature_curve_input_variable

        Returns:
            str: the value of `temperature_curve_input_variable` or None if not set
        """
        return self._data["Temperature Curve Input Variable"]

    @temperature_curve_input_variable.setter
    def temperature_curve_input_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `temperature_curve_input_variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature.  Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).

        Args:
            value (str): value for IDD Field `temperature_curve_input_variable`
                Accepted values are:
                      - LeavingCondenser
                      - EnteringCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_curve_input_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_curve_input_variable`')
            vals = set()
            vals.add("LeavingCondenser")
            vals.add("EnteringCondenser")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_curve_input_variable`'.format(value))

        self._data["Temperature Curve Input Variable"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `condenser_type`
        The condenser can either be air cooled or connected to a cooling tower.

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def chilled_water_temperature_lower_limit(self):
        """Get chilled_water_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Temperature Lower Limit"]

    @chilled_water_temperature_lower_limit.setter
    def chilled_water_temperature_lower_limit(self, value=2.0 ):
        """  Corresponds to IDD Field `chilled_water_temperature_lower_limit`
        The chilled water supply temperature below which the chiller
        will shut off.

        Args:
            value (float): value for IDD Field `chilled_water_temperature_lower_limit`
                Unit: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `chilled_water_temperature_lower_limit`'.format(value))

        self._data["Chilled Water Temperature Lower Limit"] = value

    @property
    def exhaust_source_object_type(self):
        """Get exhaust_source_object_type

        Returns:
            str: the value of `exhaust_source_object_type` or None if not set
        """
        return self._data["Exhaust Source Object Type"]

    @exhaust_source_object_type.setter
    def exhaust_source_object_type(self, value=None):
        """  Corresponds to IDD Field `exhaust_source_object_type`

        Args:
            value (str): value for IDD Field `exhaust_source_object_type`
                Accepted values are:
                      - Generator:MicroTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_source_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_source_object_type`')
            vals = set()
            vals.add("Generator:MicroTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `exhaust_source_object_type`'.format(value))

        self._data["Exhaust Source Object Type"] = value

    @property
    def exhaust_source_object_name(self):
        """Get exhaust_source_object_name

        Returns:
            str: the value of `exhaust_source_object_name` or None if not set
        """
        return self._data["Exhaust Source Object Name"]

    @exhaust_source_object_name.setter
    def exhaust_source_object_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_source_object_name`

        Args:
            value (str): value for IDD Field `exhaust_source_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_source_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_source_object_name`')

        self._data["Exhaust Source Object Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.nominal_cooling_capacity))
        out.append(self._to_str(self.heating_to_cooling_capacity_ratio))
        out.append(self._to_str(self.thermal_energy_input_to_cooling_output_ratio))
        out.append(self._to_str(self.thermal_energy_input_to_heating_output_ratio))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio))
        out.append(self._to_str(self.electric_input_to_heating_output_ratio))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.condenser_inlet_node_name))
        out.append(self._to_str(self.condenser_outlet_node_name))
        out.append(self._to_str(self.hot_water_inlet_node_name))
        out.append(self._to_str(self.hot_water_outlet_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.design_entering_condenser_water_temperature))
        out.append(self._to_str(self.design_leaving_chilled_water_temperature))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.design_hot_water_flow_rate))
        out.append(self._to_str(self.cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.heating_capacity_function_of_cooling_capacity_curve_name))
        out.append(self._to_str(self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name))
        out.append(self._to_str(self.temperature_curve_input_variable))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.chilled_water_temperature_lower_limit))
        out.append(self._to_str(self.exhaust_source_object_type))
        out.append(self._to_str(self.exhaust_source_object_name))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class HeatPumpWaterToWaterEquationFitHeating(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:EquationFit:Heating`
        simple water-water hp curve-fit model
    """
    internal_name = "HeatPump:WaterToWater:EquationFit:Heating"
    field_count = 19

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:EquationFit:Heating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Rated Load Side Flow Rate"] = None
        self._data["Rated Source Side Flow Rate"] = None
        self._data["Rated Heating Capacity"] = None
        self._data["Rated Heating Power Consumption"] = None
        self._data["Heating Capacity Coefficient 1"] = None
        self._data["Heating Capacity Coefficient 2"] = None
        self._data["Heating Capacity Coefficient 3"] = None
        self._data["Heating Capacity Coefficient 4"] = None
        self._data["Heating Capacity Coefficient 5"] = None
        self._data["Heating Compressor Power Coefficient 1"] = None
        self._data["Heating Compressor Power Coefficient 2"] = None
        self._data["Heating Compressor Power Coefficient 3"] = None
        self._data["Heating Compressor Power Coefficient 4"] = None
        self._data["Heating Compressor Power Coefficient 5"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_load_side_flow_rate = None
        else:
            self.rated_load_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_source_side_flow_rate = None
        else:
            self.rated_source_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_heating_capacity = None
        else:
            self.rated_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_heating_power_consumption = None
        else:
            self.rated_heating_power_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_1 = None
        else:
            self.heating_capacity_coefficient_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_2 = None
        else:
            self.heating_capacity_coefficient_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_3 = None
        else:
            self.heating_capacity_coefficient_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_4 = None
        else:
            self.heating_capacity_coefficient_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_5 = None
        else:
            self.heating_capacity_coefficient_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_1 = None
        else:
            self.heating_compressor_power_coefficient_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_2 = None
        else:
            self.heating_compressor_power_coefficient_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_3 = None
        else:
            self.heating_compressor_power_coefficient_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_4 = None
        else:
            self.heating_compressor_power_coefficient_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_5 = None
        else:
            self.heating_compressor_power_coefficient_5 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')

        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')

        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')

        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')

        self._data["Load Side Outlet Node Name"] = value

    @property
    def rated_load_side_flow_rate(self):
        """Get rated_load_side_flow_rate

        Returns:
            float: the value of `rated_load_side_flow_rate` or None if not set
        """
        return self._data["Rated Load Side Flow Rate"]

    @rated_load_side_flow_rate.setter
    def rated_load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_load_side_flow_rate`

        Args:
            value (float): value for IDD Field `rated_load_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_load_side_flow_rate`')

        self._data["Rated Load Side Flow Rate"] = value

    @property
    def rated_source_side_flow_rate(self):
        """Get rated_source_side_flow_rate

        Returns:
            float: the value of `rated_source_side_flow_rate` or None if not set
        """
        return self._data["Rated Source Side Flow Rate"]

    @rated_source_side_flow_rate.setter
    def rated_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_source_side_flow_rate`

        Args:
            value (float): value for IDD Field `rated_source_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_source_side_flow_rate`')

        self._data["Rated Source Side Flow Rate"] = value

    @property
    def rated_heating_capacity(self):
        """Get rated_heating_capacity

        Returns:
            float: the value of `rated_heating_capacity` or None if not set
        """
        return self._data["Rated Heating Capacity"]

    @rated_heating_capacity.setter
    def rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `rated_heating_capacity`

        Args:
            value (float): value for IDD Field `rated_heating_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heating_capacity`')

        self._data["Rated Heating Capacity"] = value

    @property
    def rated_heating_power_consumption(self):
        """Get rated_heating_power_consumption

        Returns:
            float: the value of `rated_heating_power_consumption` or None if not set
        """
        return self._data["Rated Heating Power Consumption"]

    @rated_heating_power_consumption.setter
    def rated_heating_power_consumption(self, value=None):
        """  Corresponds to IDD Field `rated_heating_power_consumption`

        Args:
            value (float): value for IDD Field `rated_heating_power_consumption`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_power_consumption`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heating_power_consumption`')

        self._data["Rated Heating Power Consumption"] = value

    @property
    def heating_capacity_coefficient_1(self):
        """Get heating_capacity_coefficient_1

        Returns:
            float: the value of `heating_capacity_coefficient_1` or None if not set
        """
        return self._data["Heating Capacity Coefficient 1"]

    @heating_capacity_coefficient_1.setter
    def heating_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_coefficient_1`

        Args:
            value (float): value for IDD Field `heating_capacity_coefficient_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_1`'.format(value))

        self._data["Heating Capacity Coefficient 1"] = value

    @property
    def heating_capacity_coefficient_2(self):
        """Get heating_capacity_coefficient_2

        Returns:
            float: the value of `heating_capacity_coefficient_2` or None if not set
        """
        return self._data["Heating Capacity Coefficient 2"]

    @heating_capacity_coefficient_2.setter
    def heating_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_coefficient_2`

        Args:
            value (float): value for IDD Field `heating_capacity_coefficient_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_2`'.format(value))

        self._data["Heating Capacity Coefficient 2"] = value

    @property
    def heating_capacity_coefficient_3(self):
        """Get heating_capacity_coefficient_3

        Returns:
            float: the value of `heating_capacity_coefficient_3` or None if not set
        """
        return self._data["Heating Capacity Coefficient 3"]

    @heating_capacity_coefficient_3.setter
    def heating_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_coefficient_3`

        Args:
            value (float): value for IDD Field `heating_capacity_coefficient_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_3`'.format(value))

        self._data["Heating Capacity Coefficient 3"] = value

    @property
    def heating_capacity_coefficient_4(self):
        """Get heating_capacity_coefficient_4

        Returns:
            float: the value of `heating_capacity_coefficient_4` or None if not set
        """
        return self._data["Heating Capacity Coefficient 4"]

    @heating_capacity_coefficient_4.setter
    def heating_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_coefficient_4`

        Args:
            value (float): value for IDD Field `heating_capacity_coefficient_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_4`'.format(value))

        self._data["Heating Capacity Coefficient 4"] = value

    @property
    def heating_capacity_coefficient_5(self):
        """Get heating_capacity_coefficient_5

        Returns:
            float: the value of `heating_capacity_coefficient_5` or None if not set
        """
        return self._data["Heating Capacity Coefficient 5"]

    @heating_capacity_coefficient_5.setter
    def heating_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_coefficient_5`

        Args:
            value (float): value for IDD Field `heating_capacity_coefficient_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_5`'.format(value))

        self._data["Heating Capacity Coefficient 5"] = value

    @property
    def heating_compressor_power_coefficient_1(self):
        """Get heating_compressor_power_coefficient_1

        Returns:
            float: the value of `heating_compressor_power_coefficient_1` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 1"]

    @heating_compressor_power_coefficient_1.setter
    def heating_compressor_power_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `heating_compressor_power_coefficient_1`

        Args:
            value (float): value for IDD Field `heating_compressor_power_coefficient_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_compressor_power_coefficient_1`'.format(value))

        self._data["Heating Compressor Power Coefficient 1"] = value

    @property
    def heating_compressor_power_coefficient_2(self):
        """Get heating_compressor_power_coefficient_2

        Returns:
            float: the value of `heating_compressor_power_coefficient_2` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 2"]

    @heating_compressor_power_coefficient_2.setter
    def heating_compressor_power_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `heating_compressor_power_coefficient_2`

        Args:
            value (float): value for IDD Field `heating_compressor_power_coefficient_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_compressor_power_coefficient_2`'.format(value))

        self._data["Heating Compressor Power Coefficient 2"] = value

    @property
    def heating_compressor_power_coefficient_3(self):
        """Get heating_compressor_power_coefficient_3

        Returns:
            float: the value of `heating_compressor_power_coefficient_3` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 3"]

    @heating_compressor_power_coefficient_3.setter
    def heating_compressor_power_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `heating_compressor_power_coefficient_3`

        Args:
            value (float): value for IDD Field `heating_compressor_power_coefficient_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_compressor_power_coefficient_3`'.format(value))

        self._data["Heating Compressor Power Coefficient 3"] = value

    @property
    def heating_compressor_power_coefficient_4(self):
        """Get heating_compressor_power_coefficient_4

        Returns:
            float: the value of `heating_compressor_power_coefficient_4` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 4"]

    @heating_compressor_power_coefficient_4.setter
    def heating_compressor_power_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `heating_compressor_power_coefficient_4`

        Args:
            value (float): value for IDD Field `heating_compressor_power_coefficient_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_compressor_power_coefficient_4`'.format(value))

        self._data["Heating Compressor Power Coefficient 4"] = value

    @property
    def heating_compressor_power_coefficient_5(self):
        """Get heating_compressor_power_coefficient_5

        Returns:
            float: the value of `heating_compressor_power_coefficient_5` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 5"]

    @heating_compressor_power_coefficient_5.setter
    def heating_compressor_power_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `heating_compressor_power_coefficient_5`

        Args:
            value (float): value for IDD Field `heating_compressor_power_coefficient_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_compressor_power_coefficient_5`'.format(value))

        self._data["Heating Compressor Power Coefficient 5"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.source_side_inlet_node_name))
        out.append(self._to_str(self.source_side_outlet_node_name))
        out.append(self._to_str(self.load_side_inlet_node_name))
        out.append(self._to_str(self.load_side_outlet_node_name))
        out.append(self._to_str(self.rated_load_side_flow_rate))
        out.append(self._to_str(self.rated_source_side_flow_rate))
        out.append(self._to_str(self.rated_heating_capacity))
        out.append(self._to_str(self.rated_heating_power_consumption))
        out.append(self._to_str(self.heating_capacity_coefficient_1))
        out.append(self._to_str(self.heating_capacity_coefficient_2))
        out.append(self._to_str(self.heating_capacity_coefficient_3))
        out.append(self._to_str(self.heating_capacity_coefficient_4))
        out.append(self._to_str(self.heating_capacity_coefficient_5))
        out.append(self._to_str(self.heating_compressor_power_coefficient_1))
        out.append(self._to_str(self.heating_compressor_power_coefficient_2))
        out.append(self._to_str(self.heating_compressor_power_coefficient_3))
        out.append(self._to_str(self.heating_compressor_power_coefficient_4))
        out.append(self._to_str(self.heating_compressor_power_coefficient_5))
        return ",".join(out)

class HeatPumpWaterToWaterEquationFitCooling(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:EquationFit:Cooling`
        simple water-water heatpump curve-fit model
    """
    internal_name = "HeatPump:WaterToWater:EquationFit:Cooling"
    field_count = 19

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:EquationFit:Cooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Rated Load Side Flow Rate"] = None
        self._data["Rated Source Side Flow Rate"] = None
        self._data["Rated Cooling Capacity"] = None
        self._data["Rated Cooling Power Consumption"] = None
        self._data["Cooling Capacity Coefficient 1"] = None
        self._data["Cooling Capacity Coefficient 2"] = None
        self._data["Cooling Capacity Coefficient 3"] = None
        self._data["Cooling Capacity Coefficient 4"] = None
        self._data["Cooling Capacity Coefficient 5"] = None
        self._data["Cooling Compressor Power Coefficient 1"] = None
        self._data["Cooling Compressor Power Coefficient 2"] = None
        self._data["Cooling Compressor Power Coefficient 3"] = None
        self._data["Cooling Compressor Power Coefficient 4"] = None
        self._data["Cooling Compressor Power Coefficient 5"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_load_side_flow_rate = None
        else:
            self.rated_load_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_source_side_flow_rate = None
        else:
            self.rated_source_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_cooling_capacity = None
        else:
            self.rated_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_cooling_power_consumption = None
        else:
            self.rated_cooling_power_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_1 = None
        else:
            self.cooling_capacity_coefficient_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_2 = None
        else:
            self.cooling_capacity_coefficient_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_3 = None
        else:
            self.cooling_capacity_coefficient_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_4 = None
        else:
            self.cooling_capacity_coefficient_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_5 = None
        else:
            self.cooling_capacity_coefficient_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_1 = None
        else:
            self.cooling_compressor_power_coefficient_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_2 = None
        else:
            self.cooling_compressor_power_coefficient_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_3 = None
        else:
            self.cooling_compressor_power_coefficient_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_4 = None
        else:
            self.cooling_compressor_power_coefficient_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_5 = None
        else:
            self.cooling_compressor_power_coefficient_5 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')

        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')

        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')

        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')

        self._data["Load Side Outlet Node Name"] = value

    @property
    def rated_load_side_flow_rate(self):
        """Get rated_load_side_flow_rate

        Returns:
            float: the value of `rated_load_side_flow_rate` or None if not set
        """
        return self._data["Rated Load Side Flow Rate"]

    @rated_load_side_flow_rate.setter
    def rated_load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_load_side_flow_rate`

        Args:
            value (float): value for IDD Field `rated_load_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_load_side_flow_rate`')

        self._data["Rated Load Side Flow Rate"] = value

    @property
    def rated_source_side_flow_rate(self):
        """Get rated_source_side_flow_rate

        Returns:
            float: the value of `rated_source_side_flow_rate` or None if not set
        """
        return self._data["Rated Source Side Flow Rate"]

    @rated_source_side_flow_rate.setter
    def rated_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_source_side_flow_rate`

        Args:
            value (float): value for IDD Field `rated_source_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_source_side_flow_rate`')

        self._data["Rated Source Side Flow Rate"] = value

    @property
    def rated_cooling_capacity(self):
        """Get rated_cooling_capacity

        Returns:
            float: the value of `rated_cooling_capacity` or None if not set
        """
        return self._data["Rated Cooling Capacity"]

    @rated_cooling_capacity.setter
    def rated_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `rated_cooling_capacity`

        Args:
            value (float): value for IDD Field `rated_cooling_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_cooling_capacity`')

        self._data["Rated Cooling Capacity"] = value

    @property
    def rated_cooling_power_consumption(self):
        """Get rated_cooling_power_consumption

        Returns:
            float: the value of `rated_cooling_power_consumption` or None if not set
        """
        return self._data["Rated Cooling Power Consumption"]

    @rated_cooling_power_consumption.setter
    def rated_cooling_power_consumption(self, value=None):
        """  Corresponds to IDD Field `rated_cooling_power_consumption`

        Args:
            value (float): value for IDD Field `rated_cooling_power_consumption`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cooling_power_consumption`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_cooling_power_consumption`')

        self._data["Rated Cooling Power Consumption"] = value

    @property
    def cooling_capacity_coefficient_1(self):
        """Get cooling_capacity_coefficient_1

        Returns:
            float: the value of `cooling_capacity_coefficient_1` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 1"]

    @cooling_capacity_coefficient_1.setter
    def cooling_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_coefficient_1`

        Args:
            value (float): value for IDD Field `cooling_capacity_coefficient_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_capacity_coefficient_1`'.format(value))

        self._data["Cooling Capacity Coefficient 1"] = value

    @property
    def cooling_capacity_coefficient_2(self):
        """Get cooling_capacity_coefficient_2

        Returns:
            float: the value of `cooling_capacity_coefficient_2` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 2"]

    @cooling_capacity_coefficient_2.setter
    def cooling_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_coefficient_2`

        Args:
            value (float): value for IDD Field `cooling_capacity_coefficient_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_capacity_coefficient_2`'.format(value))

        self._data["Cooling Capacity Coefficient 2"] = value

    @property
    def cooling_capacity_coefficient_3(self):
        """Get cooling_capacity_coefficient_3

        Returns:
            float: the value of `cooling_capacity_coefficient_3` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 3"]

    @cooling_capacity_coefficient_3.setter
    def cooling_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_coefficient_3`

        Args:
            value (float): value for IDD Field `cooling_capacity_coefficient_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_capacity_coefficient_3`'.format(value))

        self._data["Cooling Capacity Coefficient 3"] = value

    @property
    def cooling_capacity_coefficient_4(self):
        """Get cooling_capacity_coefficient_4

        Returns:
            float: the value of `cooling_capacity_coefficient_4` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 4"]

    @cooling_capacity_coefficient_4.setter
    def cooling_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_coefficient_4`

        Args:
            value (float): value for IDD Field `cooling_capacity_coefficient_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_capacity_coefficient_4`'.format(value))

        self._data["Cooling Capacity Coefficient 4"] = value

    @property
    def cooling_capacity_coefficient_5(self):
        """Get cooling_capacity_coefficient_5

        Returns:
            float: the value of `cooling_capacity_coefficient_5` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 5"]

    @cooling_capacity_coefficient_5.setter
    def cooling_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `cooling_capacity_coefficient_5`

        Args:
            value (float): value for IDD Field `cooling_capacity_coefficient_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_capacity_coefficient_5`'.format(value))

        self._data["Cooling Capacity Coefficient 5"] = value

    @property
    def cooling_compressor_power_coefficient_1(self):
        """Get cooling_compressor_power_coefficient_1

        Returns:
            float: the value of `cooling_compressor_power_coefficient_1` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 1"]

    @cooling_compressor_power_coefficient_1.setter
    def cooling_compressor_power_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `cooling_compressor_power_coefficient_1`

        Args:
            value (float): value for IDD Field `cooling_compressor_power_coefficient_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_compressor_power_coefficient_1`'.format(value))

        self._data["Cooling Compressor Power Coefficient 1"] = value

    @property
    def cooling_compressor_power_coefficient_2(self):
        """Get cooling_compressor_power_coefficient_2

        Returns:
            float: the value of `cooling_compressor_power_coefficient_2` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 2"]

    @cooling_compressor_power_coefficient_2.setter
    def cooling_compressor_power_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `cooling_compressor_power_coefficient_2`

        Args:
            value (float): value for IDD Field `cooling_compressor_power_coefficient_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_compressor_power_coefficient_2`'.format(value))

        self._data["Cooling Compressor Power Coefficient 2"] = value

    @property
    def cooling_compressor_power_coefficient_3(self):
        """Get cooling_compressor_power_coefficient_3

        Returns:
            float: the value of `cooling_compressor_power_coefficient_3` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 3"]

    @cooling_compressor_power_coefficient_3.setter
    def cooling_compressor_power_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `cooling_compressor_power_coefficient_3`

        Args:
            value (float): value for IDD Field `cooling_compressor_power_coefficient_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_compressor_power_coefficient_3`'.format(value))

        self._data["Cooling Compressor Power Coefficient 3"] = value

    @property
    def cooling_compressor_power_coefficient_4(self):
        """Get cooling_compressor_power_coefficient_4

        Returns:
            float: the value of `cooling_compressor_power_coefficient_4` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 4"]

    @cooling_compressor_power_coefficient_4.setter
    def cooling_compressor_power_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `cooling_compressor_power_coefficient_4`

        Args:
            value (float): value for IDD Field `cooling_compressor_power_coefficient_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_compressor_power_coefficient_4`'.format(value))

        self._data["Cooling Compressor Power Coefficient 4"] = value

    @property
    def cooling_compressor_power_coefficient_5(self):
        """Get cooling_compressor_power_coefficient_5

        Returns:
            float: the value of `cooling_compressor_power_coefficient_5` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 5"]

    @cooling_compressor_power_coefficient_5.setter
    def cooling_compressor_power_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `cooling_compressor_power_coefficient_5`

        Args:
            value (float): value for IDD Field `cooling_compressor_power_coefficient_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_compressor_power_coefficient_5`'.format(value))

        self._data["Cooling Compressor Power Coefficient 5"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.source_side_inlet_node_name))
        out.append(self._to_str(self.source_side_outlet_node_name))
        out.append(self._to_str(self.load_side_inlet_node_name))
        out.append(self._to_str(self.load_side_outlet_node_name))
        out.append(self._to_str(self.rated_load_side_flow_rate))
        out.append(self._to_str(self.rated_source_side_flow_rate))
        out.append(self._to_str(self.rated_cooling_capacity))
        out.append(self._to_str(self.rated_cooling_power_consumption))
        out.append(self._to_str(self.cooling_capacity_coefficient_1))
        out.append(self._to_str(self.cooling_capacity_coefficient_2))
        out.append(self._to_str(self.cooling_capacity_coefficient_3))
        out.append(self._to_str(self.cooling_capacity_coefficient_4))
        out.append(self._to_str(self.cooling_capacity_coefficient_5))
        out.append(self._to_str(self.cooling_compressor_power_coefficient_1))
        out.append(self._to_str(self.cooling_compressor_power_coefficient_2))
        out.append(self._to_str(self.cooling_compressor_power_coefficient_3))
        out.append(self._to_str(self.cooling_compressor_power_coefficient_4))
        out.append(self._to_str(self.cooling_compressor_power_coefficient_5))
        return ",".join(out)

class HeatPumpWaterToWaterParameterEstimationCooling(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:ParameterEstimation:Cooling`
        OSU parameter estimation model
    """
    internal_name = "HeatPump:WaterToWater:ParameterEstimation:Cooling"
    field_count = 22

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:ParameterEstimation:Cooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Nominal COP"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Load Side Flow Rate"] = None
        self._data["Source Side Flow Rate"] = None
        self._data["Load Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Piston Displacement"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Compressor Suction and Discharge Pressure Drop"] = None
        self._data["Superheating"] = None
        self._data["Constant Part of Electromechanical Power Losses"] = None
        self._data["Loss Factor"] = None
        self._data["High Pressure Cut Off"] = None
        self._data["Low Pressure Cut Off"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_flow_rate = None
        else:
            self.load_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_flow_rate = None
        else:
            self.source_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_heat_transfer_coefficient = None
        else:
            self.load_side_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.piston_displacement = None
        else:
            self.piston_displacement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_suction_and_discharge_pressure_drop = None
        else:
            self.compressor_suction_and_discharge_pressure_drop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.superheating = None
        else:
            self.superheating = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_part_of_electromechanical_power_losses = None
        else:
            self.constant_part_of_electromechanical_power_losses = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loss_factor = None
        else:
            self.loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_pressure_cut_off = None
        else:
            self.high_pressure_cut_off = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_pressure_cut_off = None
        else:
            self.low_pressure_cut_off = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')

        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')

        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')

        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')

        self._data["Load Side Outlet Node Name"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def load_side_flow_rate(self):
        """Get load_side_flow_rate

        Returns:
            float: the value of `load_side_flow_rate` or None if not set
        """
        return self._data["Load Side Flow Rate"]

    @load_side_flow_rate.setter
    def load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `load_side_flow_rate`

        Args:
            value (float): value for IDD Field `load_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_flow_rate`')

        self._data["Load Side Flow Rate"] = value

    @property
    def source_side_flow_rate(self):
        """Get source_side_flow_rate

        Returns:
            float: the value of `source_side_flow_rate` or None if not set
        """
        return self._data["Source Side Flow Rate"]

    @source_side_flow_rate.setter
    def source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `source_side_flow_rate`

        Args:
            value (float): value for IDD Field `source_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_flow_rate`')

        self._data["Source Side Flow Rate"] = value

    @property
    def load_side_heat_transfer_coefficient(self):
        """Get load_side_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Heat Transfer Coefficient"]

    @load_side_heat_transfer_coefficient.setter
    def load_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `load_side_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `load_side_heat_transfer_coefficient`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_heat_transfer_coefficient`')

        self._data["Load Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `source_side_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `source_side_heat_transfer_coefficient`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')

        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def piston_displacement(self):
        """Get piston_displacement

        Returns:
            float: the value of `piston_displacement` or None if not set
        """
        return self._data["Piston Displacement"]

    @piston_displacement.setter
    def piston_displacement(self, value=None):
        """  Corresponds to IDD Field `piston_displacement`

        Args:
            value (float): value for IDD Field `piston_displacement`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `piston_displacement`')

        self._data["Piston Displacement"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `compressor_clearance_factor`

        Args:
            value (float): value for IDD Field `compressor_clearance_factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')

        self._data["Compressor Clearance Factor"] = value

    @property
    def compressor_suction_and_discharge_pressure_drop(self):
        """Get compressor_suction_and_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_and_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction and Discharge Pressure Drop"]

    @compressor_suction_and_discharge_pressure_drop.setter
    def compressor_suction_and_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `compressor_suction_and_discharge_pressure_drop`

        Args:
            value (float): value for IDD Field `compressor_suction_and_discharge_pressure_drop`
                Unit: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_suction_and_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_and_discharge_pressure_drop`')

        self._data["Compressor Suction and Discharge Pressure Drop"] = value

    @property
    def superheating(self):
        """Get superheating

        Returns:
            float: the value of `superheating` or None if not set
        """
        return self._data["Superheating"]

    @superheating.setter
    def superheating(self, value=None):
        """  Corresponds to IDD Field `superheating`

        Args:
            value (float): value for IDD Field `superheating`
                Unit: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `superheating`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheating`')

        self._data["Superheating"] = value

    @property
    def constant_part_of_electromechanical_power_losses(self):
        """Get constant_part_of_electromechanical_power_losses

        Returns:
            float: the value of `constant_part_of_electromechanical_power_losses` or None if not set
        """
        return self._data["Constant Part of Electromechanical Power Losses"]

    @constant_part_of_electromechanical_power_losses.setter
    def constant_part_of_electromechanical_power_losses(self, value=None):
        """  Corresponds to IDD Field `constant_part_of_electromechanical_power_losses`

        Args:
            value (float): value for IDD Field `constant_part_of_electromechanical_power_losses`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_part_of_electromechanical_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `constant_part_of_electromechanical_power_losses`')

        self._data["Constant Part of Electromechanical Power Losses"] = value

    @property
    def loss_factor(self):
        """Get loss_factor

        Returns:
            float: the value of `loss_factor` or None if not set
        """
        return self._data["Loss Factor"]

    @loss_factor.setter
    def loss_factor(self, value=None):
        """  Corresponds to IDD Field `loss_factor`
        Used to define electromechanical loss that is proportional
        to the theoretical power %

        Args:
            value (float): value for IDD Field `loss_factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `loss_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `loss_factor`')

        self._data["Loss Factor"] = value

    @property
    def high_pressure_cut_off(self):
        """Get high_pressure_cut_off

        Returns:
            float: the value of `high_pressure_cut_off` or None if not set
        """
        return self._data["High Pressure Cut Off"]

    @high_pressure_cut_off.setter
    def high_pressure_cut_off(self, value=500000000.0 ):
        """  Corresponds to IDD Field `high_pressure_cut_off`

        Args:
            value (float): value for IDD Field `high_pressure_cut_off`
                Unit: Pa
                Default value: 500000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_pressure_cut_off`')

        self._data["High Pressure Cut Off"] = value

    @property
    def low_pressure_cut_off(self):
        """Get low_pressure_cut_off

        Returns:
            float: the value of `low_pressure_cut_off` or None if not set
        """
        return self._data["Low Pressure Cut Off"]

    @low_pressure_cut_off.setter
    def low_pressure_cut_off(self, value=0.0 ):
        """  Corresponds to IDD Field `low_pressure_cut_off`

        Args:
            value (float): value for IDD Field `low_pressure_cut_off`
                Unit: Pa
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cut_off`')

        self._data["Low Pressure Cut Off"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.source_side_inlet_node_name))
        out.append(self._to_str(self.source_side_outlet_node_name))
        out.append(self._to_str(self.load_side_inlet_node_name))
        out.append(self._to_str(self.load_side_outlet_node_name))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.load_side_flow_rate))
        out.append(self._to_str(self.source_side_flow_rate))
        out.append(self._to_str(self.load_side_heat_transfer_coefficient))
        out.append(self._to_str(self.source_side_heat_transfer_coefficient))
        out.append(self._to_str(self.piston_displacement))
        out.append(self._to_str(self.compressor_clearance_factor))
        out.append(self._to_str(self.compressor_suction_and_discharge_pressure_drop))
        out.append(self._to_str(self.superheating))
        out.append(self._to_str(self.constant_part_of_electromechanical_power_losses))
        out.append(self._to_str(self.loss_factor))
        out.append(self._to_str(self.high_pressure_cut_off))
        out.append(self._to_str(self.low_pressure_cut_off))
        return ",".join(out)

class HeatPumpWaterToWaterParameterEstimationHeating(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:ParameterEstimation:Heating`
        OSU parameter estimation model
    """
    internal_name = "HeatPump:WaterToWater:ParameterEstimation:Heating"
    field_count = 22

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:ParameterEstimation:Heating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Nominal COP"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Load Side Flow Rate"] = None
        self._data["Source Side Flow Rate"] = None
        self._data["Load Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Piston Displacement"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Compressor Suction and Discharge Pressure Drop"] = None
        self._data["Superheating"] = None
        self._data["Constant Part of Electromechanical Power Losses"] = None
        self._data["Loss Factor"] = None
        self._data["High Pressure Cut Off"] = None
        self._data["Low Pressure Cut Off"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_flow_rate = None
        else:
            self.load_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_flow_rate = None
        else:
            self.source_side_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_side_heat_transfer_coefficient = None
        else:
            self.load_side_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.piston_displacement = None
        else:
            self.piston_displacement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_suction_and_discharge_pressure_drop = None
        else:
            self.compressor_suction_and_discharge_pressure_drop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.superheating = None
        else:
            self.superheating = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_part_of_electromechanical_power_losses = None
        else:
            self.constant_part_of_electromechanical_power_losses = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loss_factor = None
        else:
            self.loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_pressure_cut_off = None
        else:
            self.high_pressure_cut_off = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_pressure_cut_off = None
        else:
            self.low_pressure_cut_off = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')

        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `source_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')

        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')

        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `load_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `load_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')

        self._data["Load Side Outlet Node Name"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `nominal_cop`

        Args:
            value (float): value for IDD Field `nominal_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')

        self._data["Nominal COP"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')

        self._data["Optimum Part Load Ratio"] = value

    @property
    def load_side_flow_rate(self):
        """Get load_side_flow_rate

        Returns:
            float: the value of `load_side_flow_rate` or None if not set
        """
        return self._data["Load Side Flow Rate"]

    @load_side_flow_rate.setter
    def load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `load_side_flow_rate`

        Args:
            value (float): value for IDD Field `load_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_flow_rate`')

        self._data["Load Side Flow Rate"] = value

    @property
    def source_side_flow_rate(self):
        """Get source_side_flow_rate

        Returns:
            float: the value of `source_side_flow_rate` or None if not set
        """
        return self._data["Source Side Flow Rate"]

    @source_side_flow_rate.setter
    def source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `source_side_flow_rate`

        Args:
            value (float): value for IDD Field `source_side_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_flow_rate`')

        self._data["Source Side Flow Rate"] = value

    @property
    def load_side_heat_transfer_coefficient(self):
        """Get load_side_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Heat Transfer Coefficient"]

    @load_side_heat_transfer_coefficient.setter
    def load_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `load_side_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `load_side_heat_transfer_coefficient`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_heat_transfer_coefficient`')

        self._data["Load Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `source_side_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `source_side_heat_transfer_coefficient`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')

        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def piston_displacement(self):
        """Get piston_displacement

        Returns:
            float: the value of `piston_displacement` or None if not set
        """
        return self._data["Piston Displacement"]

    @piston_displacement.setter
    def piston_displacement(self, value=None):
        """  Corresponds to IDD Field `piston_displacement`

        Args:
            value (float): value for IDD Field `piston_displacement`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `piston_displacement`')

        self._data["Piston Displacement"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `compressor_clearance_factor`

        Args:
            value (float): value for IDD Field `compressor_clearance_factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')

        self._data["Compressor Clearance Factor"] = value

    @property
    def compressor_suction_and_discharge_pressure_drop(self):
        """Get compressor_suction_and_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_and_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction and Discharge Pressure Drop"]

    @compressor_suction_and_discharge_pressure_drop.setter
    def compressor_suction_and_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `compressor_suction_and_discharge_pressure_drop`

        Args:
            value (float): value for IDD Field `compressor_suction_and_discharge_pressure_drop`
                Unit: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_suction_and_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_and_discharge_pressure_drop`')

        self._data["Compressor Suction and Discharge Pressure Drop"] = value

    @property
    def superheating(self):
        """Get superheating

        Returns:
            float: the value of `superheating` or None if not set
        """
        return self._data["Superheating"]

    @superheating.setter
    def superheating(self, value=None):
        """  Corresponds to IDD Field `superheating`

        Args:
            value (float): value for IDD Field `superheating`
                Unit: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `superheating`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheating`')

        self._data["Superheating"] = value

    @property
    def constant_part_of_electromechanical_power_losses(self):
        """Get constant_part_of_electromechanical_power_losses

        Returns:
            float: the value of `constant_part_of_electromechanical_power_losses` or None if not set
        """
        return self._data["Constant Part of Electromechanical Power Losses"]

    @constant_part_of_electromechanical_power_losses.setter
    def constant_part_of_electromechanical_power_losses(self, value=None):
        """  Corresponds to IDD Field `constant_part_of_electromechanical_power_losses`

        Args:
            value (float): value for IDD Field `constant_part_of_electromechanical_power_losses`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_part_of_electromechanical_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `constant_part_of_electromechanical_power_losses`')

        self._data["Constant Part of Electromechanical Power Losses"] = value

    @property
    def loss_factor(self):
        """Get loss_factor

        Returns:
            float: the value of `loss_factor` or None if not set
        """
        return self._data["Loss Factor"]

    @loss_factor.setter
    def loss_factor(self, value=None):
        """  Corresponds to IDD Field `loss_factor`
        Used to define electromechanical loss that is proportional
        to the theoretical power %

        Args:
            value (float): value for IDD Field `loss_factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `loss_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `loss_factor`')

        self._data["Loss Factor"] = value

    @property
    def high_pressure_cut_off(self):
        """Get high_pressure_cut_off

        Returns:
            float: the value of `high_pressure_cut_off` or None if not set
        """
        return self._data["High Pressure Cut Off"]

    @high_pressure_cut_off.setter
    def high_pressure_cut_off(self, value=500000000.0 ):
        """  Corresponds to IDD Field `high_pressure_cut_off`

        Args:
            value (float): value for IDD Field `high_pressure_cut_off`
                Unit: Pa
                Default value: 500000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_pressure_cut_off`')

        self._data["High Pressure Cut Off"] = value

    @property
    def low_pressure_cut_off(self):
        """Get low_pressure_cut_off

        Returns:
            float: the value of `low_pressure_cut_off` or None if not set
        """
        return self._data["Low Pressure Cut Off"]

    @low_pressure_cut_off.setter
    def low_pressure_cut_off(self, value=0.0 ):
        """  Corresponds to IDD Field `low_pressure_cut_off`

        Args:
            value (float): value for IDD Field `low_pressure_cut_off`
                Unit: Pa
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cut_off`')

        self._data["Low Pressure Cut Off"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.source_side_inlet_node_name))
        out.append(self._to_str(self.source_side_outlet_node_name))
        out.append(self._to_str(self.load_side_inlet_node_name))
        out.append(self._to_str(self.load_side_outlet_node_name))
        out.append(self._to_str(self.nominal_cop))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.load_side_flow_rate))
        out.append(self._to_str(self.source_side_flow_rate))
        out.append(self._to_str(self.load_side_heat_transfer_coefficient))
        out.append(self._to_str(self.source_side_heat_transfer_coefficient))
        out.append(self._to_str(self.piston_displacement))
        out.append(self._to_str(self.compressor_clearance_factor))
        out.append(self._to_str(self.compressor_suction_and_discharge_pressure_drop))
        out.append(self._to_str(self.superheating))
        out.append(self._to_str(self.constant_part_of_electromechanical_power_losses))
        out.append(self._to_str(self.loss_factor))
        out.append(self._to_str(self.high_pressure_cut_off))
        out.append(self._to_str(self.low_pressure_cut_off))
        return ",".join(out)

class DistrictCooling(object):
    """ Corresponds to IDD object `DistrictCooling`
        Centralized source of chilled water, such as a district cooling system.
    """
    internal_name = "DistrictCooling"
    field_count = 5

    def __init__(self):
        """ Init data dictionary object for IDD  `DistrictCooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Capacity Fraction Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_fraction_schedule_name = None
        else:
            self.capacity_fraction_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')

        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `chilled_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `chilled_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')

        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def capacity_fraction_schedule_name(self):
        """Get capacity_fraction_schedule_name

        Returns:
            str: the value of `capacity_fraction_schedule_name` or None if not set
        """
        return self._data["Capacity Fraction Schedule Name"]

    @capacity_fraction_schedule_name.setter
    def capacity_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `capacity_fraction_schedule_name`
        Schedule values are multiplied by Nominal Capacity for current capacity

        Args:
            value (str): value for IDD Field `capacity_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_fraction_schedule_name`')

        self._data["Capacity Fraction Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.chilled_water_inlet_node_name))
        out.append(self._to_str(self.chilled_water_outlet_node_name))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.capacity_fraction_schedule_name))
        return ",".join(out)

class DistrictHeating(object):
    """ Corresponds to IDD object `DistrictHeating`
        Centralized source of hot water, such as a district heating system.
    """
    internal_name = "DistrictHeating"
    field_count = 5

    def __init__(self):
        """ Init data dictionary object for IDD  `DistrictHeating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Capacity Fraction Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_fraction_schedule_name = None
        else:
            self.capacity_fraction_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')

        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')

        self._data["Hot Water Outlet Node Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `nominal_capacity`

        Args:
            value (float): value for IDD Field `nominal_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')

        self._data["Nominal Capacity"] = value

    @property
    def capacity_fraction_schedule_name(self):
        """Get capacity_fraction_schedule_name

        Returns:
            str: the value of `capacity_fraction_schedule_name` or None if not set
        """
        return self._data["Capacity Fraction Schedule Name"]

    @capacity_fraction_schedule_name.setter
    def capacity_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `capacity_fraction_schedule_name`
        Schedule values are multiplied by Nominal Capacity for current capacity

        Args:
            value (str): value for IDD Field `capacity_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_fraction_schedule_name`')

        self._data["Capacity Fraction Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.hot_water_inlet_node_name))
        out.append(self._to_str(self.hot_water_outlet_node_name))
        out.append(self._to_str(self.nominal_capacity))
        out.append(self._to_str(self.capacity_fraction_schedule_name))
        return ",".join(out)

class PlantComponentTemperatureSource(object):
    """ Corresponds to IDD object `PlantComponent:TemperatureSource`
        Simulates an object of pre-determined (constant or scheduled) source temperature
        The object introduces fluid into the plant loop at the specified temperature and
        at the same flow rate as the fluid enters the component
        Fluid entering the component vanishes equivalent to the relief air in an air system
    """
    internal_name = "PlantComponent:TemperatureSource"
    field_count = 7

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantComponent:TemperatureSource`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node"] = None
        self._data["Outlet Node"] = None
        self._data["Design Volume Flow Rate"] = None
        self._data["Temperature Specification Type"] = None
        self._data["Source Temperature"] = None
        self._data["Source Temperature Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node = None
        else:
            self.inlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node = None
        else:
            self.outlet_node = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_volume_flow_rate = None
        else:
            self.design_volume_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_specification_type = None
        else:
            self.temperature_specification_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_temperature = None
        else:
            self.source_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_temperature_schedule_name = None
        else:
            self.source_temperature_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Component Name

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inlet_node(self):
        """Get inlet_node

        Returns:
            str: the value of `inlet_node` or None if not set
        """
        return self._data["Inlet Node"]

    @inlet_node.setter
    def inlet_node(self, value=None):
        """  Corresponds to IDD Field `inlet_node`
        Name of the source inlet node

        Args:
            value (str): value for IDD Field `inlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node`')

        self._data["Inlet Node"] = value

    @property
    def outlet_node(self):
        """Get outlet_node

        Returns:
            str: the value of `outlet_node` or None if not set
        """
        return self._data["Outlet Node"]

    @outlet_node.setter
    def outlet_node(self, value=None):
        """  Corresponds to IDD Field `outlet_node`
        Name of the source outlet node

        Args:
            value (str): value for IDD Field `outlet_node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node`')

        self._data["Outlet Node"] = value

    @property
    def design_volume_flow_rate(self):
        """Get design_volume_flow_rate

        Returns:
            float: the value of `design_volume_flow_rate` or None if not set
        """
        return self._data["Design Volume Flow Rate"]

    @design_volume_flow_rate.setter
    def design_volume_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_volume_flow_rate`
        The design volumetric flow rate for this source

        Args:
            value (float): value for IDD Field `design_volume_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_volume_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_volume_flow_rate`')

        self._data["Design Volume Flow Rate"] = value

    @property
    def temperature_specification_type(self):
        """Get temperature_specification_type

        Returns:
            str: the value of `temperature_specification_type` or None if not set
        """
        return self._data["Temperature Specification Type"]

    @temperature_specification_type.setter
    def temperature_specification_type(self, value=None):
        """  Corresponds to IDD Field `temperature_specification_type`

        Args:
            value (str): value for IDD Field `temperature_specification_type`
                Accepted values are:
                      - Constant
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_specification_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_specification_type`')
            vals = set()
            vals.add("Constant")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_specification_type`'.format(value))

        self._data["Temperature Specification Type"] = value

    @property
    def source_temperature(self):
        """Get source_temperature

        Returns:
            float: the value of `source_temperature` or None if not set
        """
        return self._data["Source Temperature"]

    @source_temperature.setter
    def source_temperature(self, value=None):
        """  Corresponds to IDD Field `source_temperature`
        Used if Temperature Specification Type = Constant

        Args:
            value (float): value for IDD Field `source_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_temperature`'.format(value))

        self._data["Source Temperature"] = value

    @property
    def source_temperature_schedule_name(self):
        """Get source_temperature_schedule_name

        Returns:
            str: the value of `source_temperature_schedule_name` or None if not set
        """
        return self._data["Source Temperature Schedule Name"]

    @source_temperature_schedule_name.setter
    def source_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `source_temperature_schedule_name`
        Used if Temperature Specification Type = Scheduled

        Args:
            value (str): value for IDD Field `source_temperature_schedule_name`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_temperature_schedule_name`')

        self._data["Source Temperature Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inlet_node))
        out.append(self._to_str(self.outlet_node))
        out.append(self._to_str(self.design_volume_flow_rate))
        out.append(self._to_str(self.temperature_specification_type))
        out.append(self._to_str(self.source_temperature))
        out.append(self._to_str(self.source_temperature_schedule_name))
        return ",".join(out)

class CentralHeatPumpSystem(object):
    """ Corresponds to IDD object `CentralHeatPumpSystem`
        This chiller bank can contain multiple chiller heaters and heat pump performance objects.
        Its function is to encapsulate the extra controls needed to turn individual modules on/off
        and whether they are to operate in cooling-only, heating-only or simultaneous cooling/heating
        mode and whether to connect the source water to the evaporator or condenser side.
    """
    internal_name = "CentralHeatPumpSystem"
    field_count = 90

    def __init__(self):
        """ Init data dictionary object for IDD  `CentralHeatPumpSystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Control Method"] = None
        self._data["Cooling Loop Inlet Node Name"] = None
        self._data["Cooling Loop Outlet Node Name"] = None
        self._data["Source Loop Inlet Node Name"] = None
        self._data["Source Loop Outlet Node Name"] = None
        self._data["Heating Loop Inlet Node Name"] = None
        self._data["Heating Loop Outlet Node Name"] = None
        self._data["Ancillary Power"] = None
        self._data["Ancillary Operation Schedule Name"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 1"] = None
        self._data["Chiller Heater Modules Performance Component Name 1"] = None
        self._data["Chiller Heater Modules Control Schedule Name 1"] = None
        self._data["Number of Chiller Heater Modules 1"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 2"] = None
        self._data["Chiller Heater Modules Performance Component Name 2"] = None
        self._data["Chiller Heater Modules Control Schedule Name 2"] = None
        self._data["Number of Chiller Heater Modules 2"] = None
        self._data["Chiller Heater Performance Component Object Type 3"] = None
        self._data["Chiller Heater Performance Component Name 3"] = None
        self._data["Chiller Heater Modules Control Schedule Name 3"] = None
        self._data["Number of Chiller Heater Modules 3"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 4"] = None
        self._data["Chiller Heater Modules Performance Component Name 4"] = None
        self._data["Chiller Heater Modules Control Schedule Name 4"] = None
        self._data["Number of Chiller Heater Modules 4"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 5"] = None
        self._data["Chiller Heater Models Performance Component Name 5"] = None
        self._data["Chiller Heater Modules Control Schedule Name 5"] = None
        self._data["Number of Chiller Heater Modules 5"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 6"] = None
        self._data["Chiller Heater Modules Performance Component Name 6"] = None
        self._data["Chiller Heater Modules Control Schedule Name 6"] = None
        self._data["Number of Chiller Heater Modules 6"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 7"] = None
        self._data["Chiller Heater Modules Performance Component Name 7"] = None
        self._data["Chiller Heater Modules Control Schedule Name 7"] = None
        self._data["Number of Chiller Heater Modules 7"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 8"] = None
        self._data["Chiller Heater Modules Performance Component Name 8"] = None
        self._data["Chiller Heater Modules Control Schedule Name 8"] = None
        self._data["Number of Chiller Heater Modules 8"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 9"] = None
        self._data["Chiller Heater Modules Performance Component Name 9"] = None
        self._data["Chiller Heater Modules Control Schedule Name 9"] = None
        self._data["Number of Chiller Heater Modules 9"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 10"] = None
        self._data["Chiller Heater Modules Performance Component Name 10"] = None
        self._data["Chiller Heater Modules Control Schedule Name 10"] = None
        self._data["Number of Chiller Heater Modules 10"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 11"] = None
        self._data["Chiller Heater Modules Performance Component Name 11"] = None
        self._data["Chiller Heater Module Control Schedule Name 11"] = None
        self._data["Number of Chiller Heater Modules 11"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 12"] = None
        self._data["Chiller Heater Modules Performance Component Name 12"] = None
        self._data["Chiller Heater Modules Control Schedule Name 12"] = None
        self._data["Number of Chiller Heater Modules 12"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 13"] = None
        self._data["Chiller Heater Modules Performance Component Name 13"] = None
        self._data["Chiller Heater Modules Control Schedule Name 13"] = None
        self._data["Number of Chiller Heater Modules 13"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 14"] = None
        self._data["Chiller Heater Modules Performance Component Name 14"] = None
        self._data["Chiller Heater Modules Control Schedule Name 14"] = None
        self._data["Number of Chiller Heater Modules 14"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 15"] = None
        self._data["Chiller Heater Modules Performance Component Name 15"] = None
        self._data["Chiller Heater Modules Control Schedule Name 15"] = None
        self._data["Number of Chiller Heater Modules 15"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 16"] = None
        self._data["Chiller Heater Modules Performance Component Name 16"] = None
        self._data["Chiller Heater Modules Control Schedule Name 16"] = None
        self._data["Number of Chiller Heater Modules 16"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 17"] = None
        self._data["Chiller Heater Modules Performance Component Name 17"] = None
        self._data["Chiller Heater Modules Control Schedule Name 17"] = None
        self._data["Number of Chiller Heater Modules 17"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 18"] = None
        self._data["Chiller Heater Modules Performance Component Name 18"] = None
        self._data["Chiller Heater Modules Control Control Schedule Name 18"] = None
        self._data["Number of Chiller Heater Modules 18"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 19"] = None
        self._data["Chiller Heater Modules Performance Component Name 19"] = None
        self._data["Chiller Heater Modules Control Schedule Name 19"] = None
        self._data["Number of Chiller Heater Modules 19"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 20"] = None
        self._data["Chiller Heater Modules Performance Component Name 20"] = None
        self._data["Chiller Heater Modules Control Schedule Name 20"] = None
        self._data["Number of Chiller Heater Modules 20"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_method = None
        else:
            self.control_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_loop_inlet_node_name = None
        else:
            self.cooling_loop_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_loop_outlet_node_name = None
        else:
            self.cooling_loop_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_loop_inlet_node_name = None
        else:
            self.source_loop_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_loop_outlet_node_name = None
        else:
            self.source_loop_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_loop_inlet_node_name = None
        else:
            self.heating_loop_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_loop_outlet_node_name = None
        else:
            self.heating_loop_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power = None
        else:
            self.ancillary_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_operation_schedule_name = None
        else:
            self.ancillary_operation_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_1 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_1 = None
        else:
            self.chiller_heater_modules_performance_component_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_1 = None
        else:
            self.chiller_heater_modules_control_schedule_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_1 = None
        else:
            self.number_of_chiller_heater_modules_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_2 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_2 = None
        else:
            self.chiller_heater_modules_performance_component_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_2 = None
        else:
            self.chiller_heater_modules_control_schedule_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_2 = None
        else:
            self.number_of_chiller_heater_modules_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_performance_component_object_type_3 = None
        else:
            self.chiller_heater_performance_component_object_type_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_performance_component_name_3 = None
        else:
            self.chiller_heater_performance_component_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_3 = None
        else:
            self.chiller_heater_modules_control_schedule_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_3 = None
        else:
            self.number_of_chiller_heater_modules_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_4 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_4 = None
        else:
            self.chiller_heater_modules_performance_component_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_4 = None
        else:
            self.chiller_heater_modules_control_schedule_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_4 = None
        else:
            self.number_of_chiller_heater_modules_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_5 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_models_performance_component_name_5 = None
        else:
            self.chiller_heater_models_performance_component_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_5 = None
        else:
            self.chiller_heater_modules_control_schedule_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_5 = None
        else:
            self.number_of_chiller_heater_modules_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_6 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_6 = None
        else:
            self.chiller_heater_modules_performance_component_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_6 = None
        else:
            self.chiller_heater_modules_control_schedule_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_6 = None
        else:
            self.number_of_chiller_heater_modules_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_7 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_7 = None
        else:
            self.chiller_heater_modules_performance_component_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_7 = None
        else:
            self.chiller_heater_modules_control_schedule_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_7 = None
        else:
            self.number_of_chiller_heater_modules_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_8 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_8 = None
        else:
            self.chiller_heater_modules_performance_component_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_8 = None
        else:
            self.chiller_heater_modules_control_schedule_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_8 = None
        else:
            self.number_of_chiller_heater_modules_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_9 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_9 = None
        else:
            self.chiller_heater_modules_performance_component_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_9 = None
        else:
            self.chiller_heater_modules_control_schedule_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_9 = None
        else:
            self.number_of_chiller_heater_modules_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_10 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_10 = None
        else:
            self.chiller_heater_modules_performance_component_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_10 = None
        else:
            self.chiller_heater_modules_control_schedule_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_10 = None
        else:
            self.number_of_chiller_heater_modules_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_11 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_11 = None
        else:
            self.chiller_heater_modules_performance_component_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_module_control_schedule_name_11 = None
        else:
            self.chiller_heater_module_control_schedule_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_11 = None
        else:
            self.number_of_chiller_heater_modules_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_12 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_12 = None
        else:
            self.chiller_heater_modules_performance_component_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_12 = None
        else:
            self.chiller_heater_modules_control_schedule_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_12 = None
        else:
            self.number_of_chiller_heater_modules_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_13 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_13 = None
        else:
            self.chiller_heater_modules_performance_component_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_13 = None
        else:
            self.chiller_heater_modules_control_schedule_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_13 = None
        else:
            self.number_of_chiller_heater_modules_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_14 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_14 = None
        else:
            self.chiller_heater_modules_performance_component_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_14 = None
        else:
            self.chiller_heater_modules_control_schedule_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_14 = None
        else:
            self.number_of_chiller_heater_modules_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_15 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_15 = None
        else:
            self.chiller_heater_modules_performance_component_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_15 = None
        else:
            self.chiller_heater_modules_control_schedule_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_15 = None
        else:
            self.number_of_chiller_heater_modules_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_16 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_16 = None
        else:
            self.chiller_heater_modules_performance_component_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_16 = None
        else:
            self.chiller_heater_modules_control_schedule_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_16 = None
        else:
            self.number_of_chiller_heater_modules_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_17 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_17 = None
        else:
            self.chiller_heater_modules_performance_component_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_17 = None
        else:
            self.chiller_heater_modules_control_schedule_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_17 = None
        else:
            self.number_of_chiller_heater_modules_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_18 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_18 = None
        else:
            self.chiller_heater_modules_performance_component_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_control_schedule_name_18 = None
        else:
            self.chiller_heater_modules_control_control_schedule_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_18 = None
        else:
            self.number_of_chiller_heater_modules_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_19 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_19 = None
        else:
            self.chiller_heater_modules_performance_component_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_19 = None
        else:
            self.chiller_heater_modules_control_schedule_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_19 = None
        else:
            self.number_of_chiller_heater_modules_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_20 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_20 = None
        else:
            self.chiller_heater_modules_performance_component_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_20 = None
        else:
            self.chiller_heater_modules_control_schedule_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_20 = None
        else:
            self.number_of_chiller_heater_modules_20 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def control_method(self):
        """Get control_method

        Returns:
            str: the value of `control_method` or None if not set
        """
        return self._data["Control Method"]

    @control_method.setter
    def control_method(self, value="SmartMixing"):
        """  Corresponds to IDD Field `control_method`

        Args:
            value (str): value for IDD Field `control_method`
                Accepted values are:
                      - SmartMixing
                Default value: SmartMixing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_method`')
            vals = set()
            vals.add("SmartMixing")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_method`'.format(value))

        self._data["Control Method"] = value

    @property
    def cooling_loop_inlet_node_name(self):
        """Get cooling_loop_inlet_node_name

        Returns:
            str: the value of `cooling_loop_inlet_node_name` or None if not set
        """
        return self._data["Cooling Loop Inlet Node Name"]

    @cooling_loop_inlet_node_name.setter
    def cooling_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_loop_inlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_loop_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_loop_inlet_node_name`')

        self._data["Cooling Loop Inlet Node Name"] = value

    @property
    def cooling_loop_outlet_node_name(self):
        """Get cooling_loop_outlet_node_name

        Returns:
            str: the value of `cooling_loop_outlet_node_name` or None if not set
        """
        return self._data["Cooling Loop Outlet Node Name"]

    @cooling_loop_outlet_node_name.setter
    def cooling_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_loop_outlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_loop_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_loop_outlet_node_name`')

        self._data["Cooling Loop Outlet Node Name"] = value

    @property
    def source_loop_inlet_node_name(self):
        """Get source_loop_inlet_node_name

        Returns:
            str: the value of `source_loop_inlet_node_name` or None if not set
        """
        return self._data["Source Loop Inlet Node Name"]

    @source_loop_inlet_node_name.setter
    def source_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_loop_inlet_node_name`

        Args:
            value (str): value for IDD Field `source_loop_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_loop_inlet_node_name`')

        self._data["Source Loop Inlet Node Name"] = value

    @property
    def source_loop_outlet_node_name(self):
        """Get source_loop_outlet_node_name

        Returns:
            str: the value of `source_loop_outlet_node_name` or None if not set
        """
        return self._data["Source Loop Outlet Node Name"]

    @source_loop_outlet_node_name.setter
    def source_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `source_loop_outlet_node_name`

        Args:
            value (str): value for IDD Field `source_loop_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_loop_outlet_node_name`')

        self._data["Source Loop Outlet Node Name"] = value

    @property
    def heating_loop_inlet_node_name(self):
        """Get heating_loop_inlet_node_name

        Returns:
            str: the value of `heating_loop_inlet_node_name` or None if not set
        """
        return self._data["Heating Loop Inlet Node Name"]

    @heating_loop_inlet_node_name.setter
    def heating_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_loop_inlet_node_name`

        Args:
            value (str): value for IDD Field `heating_loop_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_loop_inlet_node_name`')

        self._data["Heating Loop Inlet Node Name"] = value

    @property
    def heating_loop_outlet_node_name(self):
        """Get heating_loop_outlet_node_name

        Returns:
            str: the value of `heating_loop_outlet_node_name` or None if not set
        """
        return self._data["Heating Loop Outlet Node Name"]

    @heating_loop_outlet_node_name.setter
    def heating_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_loop_outlet_node_name`

        Args:
            value (str): value for IDD Field `heating_loop_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_loop_outlet_node_name`')

        self._data["Heating Loop Outlet Node Name"] = value

    @property
    def ancillary_power(self):
        """Get ancillary_power

        Returns:
            float: the value of `ancillary_power` or None if not set
        """
        return self._data["Ancillary Power"]

    @ancillary_power.setter
    def ancillary_power(self, value=0.0 ):
        """  Corresponds to IDD Field `ancillary_power`
        Power as demanded from any auxiliary controls

        Args:
            value (float): value for IDD Field `ancillary_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_power`')

        self._data["Ancillary Power"] = value

    @property
    def ancillary_operation_schedule_name(self):
        """Get ancillary_operation_schedule_name

        Returns:
            str: the value of `ancillary_operation_schedule_name` or None if not set
        """
        return self._data["Ancillary Operation Schedule Name"]

    @ancillary_operation_schedule_name.setter
    def ancillary_operation_schedule_name(self, value=None):
        """  Corresponds to IDD Field `ancillary_operation_schedule_name`
        This value from this schedule is multiplied times the Ancilliary Power

        Args:
            value (str): value for IDD Field `ancillary_operation_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ancillary_operation_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ancillary_operation_schedule_name`')

        self._data["Ancillary Operation Schedule Name"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_1(self):
        """Get chiller_heater_modules_performance_component_object_type_1

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_1` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 1"]

    @chiller_heater_modules_performance_component_object_type_1.setter
    def chiller_heater_modules_performance_component_object_type_1(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_1`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_1`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_1`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_1`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 1"] = value

    @property
    def chiller_heater_modules_performance_component_name_1(self):
        """Get chiller_heater_modules_performance_component_name_1

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_1` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 1"]

    @chiller_heater_modules_performance_component_name_1.setter
    def chiller_heater_modules_performance_component_name_1(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_1`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_1`')

        self._data["Chiller Heater Modules Performance Component Name 1"] = value

    @property
    def chiller_heater_modules_control_schedule_name_1(self):
        """Get chiller_heater_modules_control_schedule_name_1

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_1` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 1"]

    @chiller_heater_modules_control_schedule_name_1.setter
    def chiller_heater_modules_control_schedule_name_1(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_1`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_1`')

        self._data["Chiller Heater Modules Control Schedule Name 1"] = value

    @property
    def number_of_chiller_heater_modules_1(self):
        """Get number_of_chiller_heater_modules_1

        Returns:
            int: the value of `number_of_chiller_heater_modules_1` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 1"]

    @number_of_chiller_heater_modules_1.setter
    def number_of_chiller_heater_modules_1(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_1`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_1`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_1`')

        self._data["Number of Chiller Heater Modules 1"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_2(self):
        """Get chiller_heater_modules_performance_component_object_type_2

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_2` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 2"]

    @chiller_heater_modules_performance_component_object_type_2.setter
    def chiller_heater_modules_performance_component_object_type_2(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_2`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_2`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_2`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_2`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 2"] = value

    @property
    def chiller_heater_modules_performance_component_name_2(self):
        """Get chiller_heater_modules_performance_component_name_2

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_2` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 2"]

    @chiller_heater_modules_performance_component_name_2.setter
    def chiller_heater_modules_performance_component_name_2(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_2`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_2`')

        self._data["Chiller Heater Modules Performance Component Name 2"] = value

    @property
    def chiller_heater_modules_control_schedule_name_2(self):
        """Get chiller_heater_modules_control_schedule_name_2

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_2` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 2"]

    @chiller_heater_modules_control_schedule_name_2.setter
    def chiller_heater_modules_control_schedule_name_2(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_2`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_2`')

        self._data["Chiller Heater Modules Control Schedule Name 2"] = value

    @property
    def number_of_chiller_heater_modules_2(self):
        """Get number_of_chiller_heater_modules_2

        Returns:
            int: the value of `number_of_chiller_heater_modules_2` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 2"]

    @number_of_chiller_heater_modules_2.setter
    def number_of_chiller_heater_modules_2(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_2`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_2`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_2`')

        self._data["Number of Chiller Heater Modules 2"] = value

    @property
    def chiller_heater_performance_component_object_type_3(self):
        """Get chiller_heater_performance_component_object_type_3

        Returns:
            str: the value of `chiller_heater_performance_component_object_type_3` or None if not set
        """
        return self._data["Chiller Heater Performance Component Object Type 3"]

    @chiller_heater_performance_component_object_type_3.setter
    def chiller_heater_performance_component_object_type_3(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_performance_component_object_type_3`

        Args:
            value (str): value for IDD Field `chiller_heater_performance_component_object_type_3`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_performance_component_object_type_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_performance_component_object_type_3`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_performance_component_object_type_3`'.format(value))

        self._data["Chiller Heater Performance Component Object Type 3"] = value

    @property
    def chiller_heater_performance_component_name_3(self):
        """Get chiller_heater_performance_component_name_3

        Returns:
            str: the value of `chiller_heater_performance_component_name_3` or None if not set
        """
        return self._data["Chiller Heater Performance Component Name 3"]

    @chiller_heater_performance_component_name_3.setter
    def chiller_heater_performance_component_name_3(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_performance_component_name_3`

        Args:
            value (str): value for IDD Field `chiller_heater_performance_component_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_performance_component_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_performance_component_name_3`')

        self._data["Chiller Heater Performance Component Name 3"] = value

    @property
    def chiller_heater_modules_control_schedule_name_3(self):
        """Get chiller_heater_modules_control_schedule_name_3

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_3` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 3"]

    @chiller_heater_modules_control_schedule_name_3.setter
    def chiller_heater_modules_control_schedule_name_3(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_3`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_3`')

        self._data["Chiller Heater Modules Control Schedule Name 3"] = value

    @property
    def number_of_chiller_heater_modules_3(self):
        """Get number_of_chiller_heater_modules_3

        Returns:
            int: the value of `number_of_chiller_heater_modules_3` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 3"]

    @number_of_chiller_heater_modules_3.setter
    def number_of_chiller_heater_modules_3(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_3`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_3`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_3`')

        self._data["Number of Chiller Heater Modules 3"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_4(self):
        """Get chiller_heater_modules_performance_component_object_type_4

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_4` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 4"]

    @chiller_heater_modules_performance_component_object_type_4.setter
    def chiller_heater_modules_performance_component_object_type_4(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_4`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_4`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_4`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_4`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 4"] = value

    @property
    def chiller_heater_modules_performance_component_name_4(self):
        """Get chiller_heater_modules_performance_component_name_4

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_4` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 4"]

    @chiller_heater_modules_performance_component_name_4.setter
    def chiller_heater_modules_performance_component_name_4(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_4`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_4`')

        self._data["Chiller Heater Modules Performance Component Name 4"] = value

    @property
    def chiller_heater_modules_control_schedule_name_4(self):
        """Get chiller_heater_modules_control_schedule_name_4

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_4` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 4"]

    @chiller_heater_modules_control_schedule_name_4.setter
    def chiller_heater_modules_control_schedule_name_4(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_4`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_4`')

        self._data["Chiller Heater Modules Control Schedule Name 4"] = value

    @property
    def number_of_chiller_heater_modules_4(self):
        """Get number_of_chiller_heater_modules_4

        Returns:
            int: the value of `number_of_chiller_heater_modules_4` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 4"]

    @number_of_chiller_heater_modules_4.setter
    def number_of_chiller_heater_modules_4(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_4`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_4`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_4`')

        self._data["Number of Chiller Heater Modules 4"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_5(self):
        """Get chiller_heater_modules_performance_component_object_type_5

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_5` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 5"]

    @chiller_heater_modules_performance_component_object_type_5.setter
    def chiller_heater_modules_performance_component_object_type_5(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_5`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_5`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_5`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_5`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 5"] = value

    @property
    def chiller_heater_models_performance_component_name_5(self):
        """Get chiller_heater_models_performance_component_name_5

        Returns:
            str: the value of `chiller_heater_models_performance_component_name_5` or None if not set
        """
        return self._data["Chiller Heater Models Performance Component Name 5"]

    @chiller_heater_models_performance_component_name_5.setter
    def chiller_heater_models_performance_component_name_5(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_models_performance_component_name_5`

        Args:
            value (str): value for IDD Field `chiller_heater_models_performance_component_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_models_performance_component_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_models_performance_component_name_5`')

        self._data["Chiller Heater Models Performance Component Name 5"] = value

    @property
    def chiller_heater_modules_control_schedule_name_5(self):
        """Get chiller_heater_modules_control_schedule_name_5

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_5` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 5"]

    @chiller_heater_modules_control_schedule_name_5.setter
    def chiller_heater_modules_control_schedule_name_5(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_5`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_5`')

        self._data["Chiller Heater Modules Control Schedule Name 5"] = value

    @property
    def number_of_chiller_heater_modules_5(self):
        """Get number_of_chiller_heater_modules_5

        Returns:
            int: the value of `number_of_chiller_heater_modules_5` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 5"]

    @number_of_chiller_heater_modules_5.setter
    def number_of_chiller_heater_modules_5(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_5`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_5`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_5`')

        self._data["Number of Chiller Heater Modules 5"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_6(self):
        """Get chiller_heater_modules_performance_component_object_type_6

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_6` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 6"]

    @chiller_heater_modules_performance_component_object_type_6.setter
    def chiller_heater_modules_performance_component_object_type_6(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_6`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_6`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_6`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_6`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 6"] = value

    @property
    def chiller_heater_modules_performance_component_name_6(self):
        """Get chiller_heater_modules_performance_component_name_6

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_6` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 6"]

    @chiller_heater_modules_performance_component_name_6.setter
    def chiller_heater_modules_performance_component_name_6(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_6`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_6`')

        self._data["Chiller Heater Modules Performance Component Name 6"] = value

    @property
    def chiller_heater_modules_control_schedule_name_6(self):
        """Get chiller_heater_modules_control_schedule_name_6

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_6` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 6"]

    @chiller_heater_modules_control_schedule_name_6.setter
    def chiller_heater_modules_control_schedule_name_6(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_6`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_6`')

        self._data["Chiller Heater Modules Control Schedule Name 6"] = value

    @property
    def number_of_chiller_heater_modules_6(self):
        """Get number_of_chiller_heater_modules_6

        Returns:
            int: the value of `number_of_chiller_heater_modules_6` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 6"]

    @number_of_chiller_heater_modules_6.setter
    def number_of_chiller_heater_modules_6(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_6`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_6`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_6`')

        self._data["Number of Chiller Heater Modules 6"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_7(self):
        """Get chiller_heater_modules_performance_component_object_type_7

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_7` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 7"]

    @chiller_heater_modules_performance_component_object_type_7.setter
    def chiller_heater_modules_performance_component_object_type_7(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_7`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_7`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_7`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_7`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 7"] = value

    @property
    def chiller_heater_modules_performance_component_name_7(self):
        """Get chiller_heater_modules_performance_component_name_7

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_7` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 7"]

    @chiller_heater_modules_performance_component_name_7.setter
    def chiller_heater_modules_performance_component_name_7(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_7`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_7`')

        self._data["Chiller Heater Modules Performance Component Name 7"] = value

    @property
    def chiller_heater_modules_control_schedule_name_7(self):
        """Get chiller_heater_modules_control_schedule_name_7

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_7` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 7"]

    @chiller_heater_modules_control_schedule_name_7.setter
    def chiller_heater_modules_control_schedule_name_7(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_7`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_7`')

        self._data["Chiller Heater Modules Control Schedule Name 7"] = value

    @property
    def number_of_chiller_heater_modules_7(self):
        """Get number_of_chiller_heater_modules_7

        Returns:
            int: the value of `number_of_chiller_heater_modules_7` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 7"]

    @number_of_chiller_heater_modules_7.setter
    def number_of_chiller_heater_modules_7(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_7`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_7`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_7`')

        self._data["Number of Chiller Heater Modules 7"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_8(self):
        """Get chiller_heater_modules_performance_component_object_type_8

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_8` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 8"]

    @chiller_heater_modules_performance_component_object_type_8.setter
    def chiller_heater_modules_performance_component_object_type_8(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_8`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_8`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_8`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_8`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 8"] = value

    @property
    def chiller_heater_modules_performance_component_name_8(self):
        """Get chiller_heater_modules_performance_component_name_8

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_8` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 8"]

    @chiller_heater_modules_performance_component_name_8.setter
    def chiller_heater_modules_performance_component_name_8(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_8`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_8`')

        self._data["Chiller Heater Modules Performance Component Name 8"] = value

    @property
    def chiller_heater_modules_control_schedule_name_8(self):
        """Get chiller_heater_modules_control_schedule_name_8

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_8` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 8"]

    @chiller_heater_modules_control_schedule_name_8.setter
    def chiller_heater_modules_control_schedule_name_8(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_8`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_8`')

        self._data["Chiller Heater Modules Control Schedule Name 8"] = value

    @property
    def number_of_chiller_heater_modules_8(self):
        """Get number_of_chiller_heater_modules_8

        Returns:
            int: the value of `number_of_chiller_heater_modules_8` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 8"]

    @number_of_chiller_heater_modules_8.setter
    def number_of_chiller_heater_modules_8(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_8`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_8`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_8`')

        self._data["Number of Chiller Heater Modules 8"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_9(self):
        """Get chiller_heater_modules_performance_component_object_type_9

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_9` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 9"]

    @chiller_heater_modules_performance_component_object_type_9.setter
    def chiller_heater_modules_performance_component_object_type_9(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_9`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_9`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_9`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_9`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 9"] = value

    @property
    def chiller_heater_modules_performance_component_name_9(self):
        """Get chiller_heater_modules_performance_component_name_9

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_9` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 9"]

    @chiller_heater_modules_performance_component_name_9.setter
    def chiller_heater_modules_performance_component_name_9(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_9`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_9`')

        self._data["Chiller Heater Modules Performance Component Name 9"] = value

    @property
    def chiller_heater_modules_control_schedule_name_9(self):
        """Get chiller_heater_modules_control_schedule_name_9

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_9` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 9"]

    @chiller_heater_modules_control_schedule_name_9.setter
    def chiller_heater_modules_control_schedule_name_9(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_9`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_9`')

        self._data["Chiller Heater Modules Control Schedule Name 9"] = value

    @property
    def number_of_chiller_heater_modules_9(self):
        """Get number_of_chiller_heater_modules_9

        Returns:
            int: the value of `number_of_chiller_heater_modules_9` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 9"]

    @number_of_chiller_heater_modules_9.setter
    def number_of_chiller_heater_modules_9(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_9`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_9`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_9`')

        self._data["Number of Chiller Heater Modules 9"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_10(self):
        """Get chiller_heater_modules_performance_component_object_type_10

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_10` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 10"]

    @chiller_heater_modules_performance_component_object_type_10.setter
    def chiller_heater_modules_performance_component_object_type_10(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_10`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_10`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_10`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_10`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 10"] = value

    @property
    def chiller_heater_modules_performance_component_name_10(self):
        """Get chiller_heater_modules_performance_component_name_10

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_10` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 10"]

    @chiller_heater_modules_performance_component_name_10.setter
    def chiller_heater_modules_performance_component_name_10(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_10`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_10`')

        self._data["Chiller Heater Modules Performance Component Name 10"] = value

    @property
    def chiller_heater_modules_control_schedule_name_10(self):
        """Get chiller_heater_modules_control_schedule_name_10

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_10` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 10"]

    @chiller_heater_modules_control_schedule_name_10.setter
    def chiller_heater_modules_control_schedule_name_10(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_10`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_10`')

        self._data["Chiller Heater Modules Control Schedule Name 10"] = value

    @property
    def number_of_chiller_heater_modules_10(self):
        """Get number_of_chiller_heater_modules_10

        Returns:
            int: the value of `number_of_chiller_heater_modules_10` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 10"]

    @number_of_chiller_heater_modules_10.setter
    def number_of_chiller_heater_modules_10(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_10`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_10`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_10`')

        self._data["Number of Chiller Heater Modules 10"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_11(self):
        """Get chiller_heater_modules_performance_component_object_type_11

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_11` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 11"]

    @chiller_heater_modules_performance_component_object_type_11.setter
    def chiller_heater_modules_performance_component_object_type_11(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_11`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_11`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_11`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_11`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 11"] = value

    @property
    def chiller_heater_modules_performance_component_name_11(self):
        """Get chiller_heater_modules_performance_component_name_11

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_11` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 11"]

    @chiller_heater_modules_performance_component_name_11.setter
    def chiller_heater_modules_performance_component_name_11(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_11`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_11`')

        self._data["Chiller Heater Modules Performance Component Name 11"] = value

    @property
    def chiller_heater_module_control_schedule_name_11(self):
        """Get chiller_heater_module_control_schedule_name_11

        Returns:
            str: the value of `chiller_heater_module_control_schedule_name_11` or None if not set
        """
        return self._data["Chiller Heater Module Control Schedule Name 11"]

    @chiller_heater_module_control_schedule_name_11.setter
    def chiller_heater_module_control_schedule_name_11(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_module_control_schedule_name_11`

        Args:
            value (str): value for IDD Field `chiller_heater_module_control_schedule_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_module_control_schedule_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_module_control_schedule_name_11`')

        self._data["Chiller Heater Module Control Schedule Name 11"] = value

    @property
    def number_of_chiller_heater_modules_11(self):
        """Get number_of_chiller_heater_modules_11

        Returns:
            int: the value of `number_of_chiller_heater_modules_11` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 11"]

    @number_of_chiller_heater_modules_11.setter
    def number_of_chiller_heater_modules_11(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_11`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_11`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_11`')

        self._data["Number of Chiller Heater Modules 11"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_12(self):
        """Get chiller_heater_modules_performance_component_object_type_12

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_12` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 12"]

    @chiller_heater_modules_performance_component_object_type_12.setter
    def chiller_heater_modules_performance_component_object_type_12(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_12`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_12`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_12`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_12`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 12"] = value

    @property
    def chiller_heater_modules_performance_component_name_12(self):
        """Get chiller_heater_modules_performance_component_name_12

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_12` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 12"]

    @chiller_heater_modules_performance_component_name_12.setter
    def chiller_heater_modules_performance_component_name_12(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_12`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_12`')

        self._data["Chiller Heater Modules Performance Component Name 12"] = value

    @property
    def chiller_heater_modules_control_schedule_name_12(self):
        """Get chiller_heater_modules_control_schedule_name_12

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_12` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 12"]

    @chiller_heater_modules_control_schedule_name_12.setter
    def chiller_heater_modules_control_schedule_name_12(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_12`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_12`')

        self._data["Chiller Heater Modules Control Schedule Name 12"] = value

    @property
    def number_of_chiller_heater_modules_12(self):
        """Get number_of_chiller_heater_modules_12

        Returns:
            int: the value of `number_of_chiller_heater_modules_12` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 12"]

    @number_of_chiller_heater_modules_12.setter
    def number_of_chiller_heater_modules_12(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_12`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_12`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_12`')

        self._data["Number of Chiller Heater Modules 12"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_13(self):
        """Get chiller_heater_modules_performance_component_object_type_13

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_13` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 13"]

    @chiller_heater_modules_performance_component_object_type_13.setter
    def chiller_heater_modules_performance_component_object_type_13(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_13`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_13`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_13`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_13`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 13"] = value

    @property
    def chiller_heater_modules_performance_component_name_13(self):
        """Get chiller_heater_modules_performance_component_name_13

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_13` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 13"]

    @chiller_heater_modules_performance_component_name_13.setter
    def chiller_heater_modules_performance_component_name_13(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_13`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_13`')

        self._data["Chiller Heater Modules Performance Component Name 13"] = value

    @property
    def chiller_heater_modules_control_schedule_name_13(self):
        """Get chiller_heater_modules_control_schedule_name_13

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_13` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 13"]

    @chiller_heater_modules_control_schedule_name_13.setter
    def chiller_heater_modules_control_schedule_name_13(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_13`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_13`')

        self._data["Chiller Heater Modules Control Schedule Name 13"] = value

    @property
    def number_of_chiller_heater_modules_13(self):
        """Get number_of_chiller_heater_modules_13

        Returns:
            int: the value of `number_of_chiller_heater_modules_13` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 13"]

    @number_of_chiller_heater_modules_13.setter
    def number_of_chiller_heater_modules_13(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_13`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_13`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_13`')

        self._data["Number of Chiller Heater Modules 13"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_14(self):
        """Get chiller_heater_modules_performance_component_object_type_14

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_14` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 14"]

    @chiller_heater_modules_performance_component_object_type_14.setter
    def chiller_heater_modules_performance_component_object_type_14(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_14`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_14`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_14`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_14`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 14"] = value

    @property
    def chiller_heater_modules_performance_component_name_14(self):
        """Get chiller_heater_modules_performance_component_name_14

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_14` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 14"]

    @chiller_heater_modules_performance_component_name_14.setter
    def chiller_heater_modules_performance_component_name_14(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_14`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_14`')

        self._data["Chiller Heater Modules Performance Component Name 14"] = value

    @property
    def chiller_heater_modules_control_schedule_name_14(self):
        """Get chiller_heater_modules_control_schedule_name_14

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_14` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 14"]

    @chiller_heater_modules_control_schedule_name_14.setter
    def chiller_heater_modules_control_schedule_name_14(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_14`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_14`')

        self._data["Chiller Heater Modules Control Schedule Name 14"] = value

    @property
    def number_of_chiller_heater_modules_14(self):
        """Get number_of_chiller_heater_modules_14

        Returns:
            int: the value of `number_of_chiller_heater_modules_14` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 14"]

    @number_of_chiller_heater_modules_14.setter
    def number_of_chiller_heater_modules_14(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_14`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_14`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_14`')

        self._data["Number of Chiller Heater Modules 14"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_15(self):
        """Get chiller_heater_modules_performance_component_object_type_15

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_15` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 15"]

    @chiller_heater_modules_performance_component_object_type_15.setter
    def chiller_heater_modules_performance_component_object_type_15(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_15`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_15`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_15`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_15`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 15"] = value

    @property
    def chiller_heater_modules_performance_component_name_15(self):
        """Get chiller_heater_modules_performance_component_name_15

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_15` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 15"]

    @chiller_heater_modules_performance_component_name_15.setter
    def chiller_heater_modules_performance_component_name_15(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_15`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_15`')

        self._data["Chiller Heater Modules Performance Component Name 15"] = value

    @property
    def chiller_heater_modules_control_schedule_name_15(self):
        """Get chiller_heater_modules_control_schedule_name_15

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_15` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 15"]

    @chiller_heater_modules_control_schedule_name_15.setter
    def chiller_heater_modules_control_schedule_name_15(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_15`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_15`')

        self._data["Chiller Heater Modules Control Schedule Name 15"] = value

    @property
    def number_of_chiller_heater_modules_15(self):
        """Get number_of_chiller_heater_modules_15

        Returns:
            int: the value of `number_of_chiller_heater_modules_15` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 15"]

    @number_of_chiller_heater_modules_15.setter
    def number_of_chiller_heater_modules_15(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_15`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_15`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_15`')

        self._data["Number of Chiller Heater Modules 15"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_16(self):
        """Get chiller_heater_modules_performance_component_object_type_16

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_16` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 16"]

    @chiller_heater_modules_performance_component_object_type_16.setter
    def chiller_heater_modules_performance_component_object_type_16(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_16`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_16`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_16`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_16`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 16"] = value

    @property
    def chiller_heater_modules_performance_component_name_16(self):
        """Get chiller_heater_modules_performance_component_name_16

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_16` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 16"]

    @chiller_heater_modules_performance_component_name_16.setter
    def chiller_heater_modules_performance_component_name_16(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_16`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_16`')

        self._data["Chiller Heater Modules Performance Component Name 16"] = value

    @property
    def chiller_heater_modules_control_schedule_name_16(self):
        """Get chiller_heater_modules_control_schedule_name_16

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_16` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 16"]

    @chiller_heater_modules_control_schedule_name_16.setter
    def chiller_heater_modules_control_schedule_name_16(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_16`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_16`')

        self._data["Chiller Heater Modules Control Schedule Name 16"] = value

    @property
    def number_of_chiller_heater_modules_16(self):
        """Get number_of_chiller_heater_modules_16

        Returns:
            int: the value of `number_of_chiller_heater_modules_16` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 16"]

    @number_of_chiller_heater_modules_16.setter
    def number_of_chiller_heater_modules_16(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_16`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_16`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_16`')

        self._data["Number of Chiller Heater Modules 16"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_17(self):
        """Get chiller_heater_modules_performance_component_object_type_17

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_17` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 17"]

    @chiller_heater_modules_performance_component_object_type_17.setter
    def chiller_heater_modules_performance_component_object_type_17(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_17`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_17`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_17`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_17`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 17"] = value

    @property
    def chiller_heater_modules_performance_component_name_17(self):
        """Get chiller_heater_modules_performance_component_name_17

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_17` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 17"]

    @chiller_heater_modules_performance_component_name_17.setter
    def chiller_heater_modules_performance_component_name_17(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_17`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_17`')

        self._data["Chiller Heater Modules Performance Component Name 17"] = value

    @property
    def chiller_heater_modules_control_schedule_name_17(self):
        """Get chiller_heater_modules_control_schedule_name_17

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_17` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 17"]

    @chiller_heater_modules_control_schedule_name_17.setter
    def chiller_heater_modules_control_schedule_name_17(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_17`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_17`')

        self._data["Chiller Heater Modules Control Schedule Name 17"] = value

    @property
    def number_of_chiller_heater_modules_17(self):
        """Get number_of_chiller_heater_modules_17

        Returns:
            int: the value of `number_of_chiller_heater_modules_17` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 17"]

    @number_of_chiller_heater_modules_17.setter
    def number_of_chiller_heater_modules_17(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_17`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_17`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_17`')

        self._data["Number of Chiller Heater Modules 17"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_18(self):
        """Get chiller_heater_modules_performance_component_object_type_18

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_18` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 18"]

    @chiller_heater_modules_performance_component_object_type_18.setter
    def chiller_heater_modules_performance_component_object_type_18(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_18`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_18`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_18`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_18`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 18"] = value

    @property
    def chiller_heater_modules_performance_component_name_18(self):
        """Get chiller_heater_modules_performance_component_name_18

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_18` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 18"]

    @chiller_heater_modules_performance_component_name_18.setter
    def chiller_heater_modules_performance_component_name_18(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_18`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_18`')

        self._data["Chiller Heater Modules Performance Component Name 18"] = value

    @property
    def chiller_heater_modules_control_control_schedule_name_18(self):
        """Get chiller_heater_modules_control_control_schedule_name_18

        Returns:
            str: the value of `chiller_heater_modules_control_control_schedule_name_18` or None if not set
        """
        return self._data["Chiller Heater Modules Control Control Schedule Name 18"]

    @chiller_heater_modules_control_control_schedule_name_18.setter
    def chiller_heater_modules_control_control_schedule_name_18(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_control_schedule_name_18`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_control_schedule_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_control_schedule_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_control_schedule_name_18`')

        self._data["Chiller Heater Modules Control Control Schedule Name 18"] = value

    @property
    def number_of_chiller_heater_modules_18(self):
        """Get number_of_chiller_heater_modules_18

        Returns:
            int: the value of `number_of_chiller_heater_modules_18` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 18"]

    @number_of_chiller_heater_modules_18.setter
    def number_of_chiller_heater_modules_18(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_18`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_18`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_18`')

        self._data["Number of Chiller Heater Modules 18"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_19(self):
        """Get chiller_heater_modules_performance_component_object_type_19

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_19` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 19"]

    @chiller_heater_modules_performance_component_object_type_19.setter
    def chiller_heater_modules_performance_component_object_type_19(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_19`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_19`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_19`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_19`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 19"] = value

    @property
    def chiller_heater_modules_performance_component_name_19(self):
        """Get chiller_heater_modules_performance_component_name_19

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_19` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 19"]

    @chiller_heater_modules_performance_component_name_19.setter
    def chiller_heater_modules_performance_component_name_19(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_19`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_19`')

        self._data["Chiller Heater Modules Performance Component Name 19"] = value

    @property
    def chiller_heater_modules_control_schedule_name_19(self):
        """Get chiller_heater_modules_control_schedule_name_19

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_19` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 19"]

    @chiller_heater_modules_control_schedule_name_19.setter
    def chiller_heater_modules_control_schedule_name_19(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_19`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_19`')

        self._data["Chiller Heater Modules Control Schedule Name 19"] = value

    @property
    def number_of_chiller_heater_modules_19(self):
        """Get number_of_chiller_heater_modules_19

        Returns:
            int: the value of `number_of_chiller_heater_modules_19` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 19"]

    @number_of_chiller_heater_modules_19.setter
    def number_of_chiller_heater_modules_19(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_19`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_19`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_19`')

        self._data["Number of Chiller Heater Modules 19"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_20(self):
        """Get chiller_heater_modules_performance_component_object_type_20

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_20` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 20"]

    @chiller_heater_modules_performance_component_object_type_20.setter
    def chiller_heater_modules_performance_component_object_type_20(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_object_type_20`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_object_type_20`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_object_type_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_20`')
            vals = set()
            vals.add("ChillerHeaterPerformance:Electric:EIR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chiller_heater_modules_performance_component_object_type_20`'.format(value))

        self._data["Chiller Heater Modules Performance Component Object Type 20"] = value

    @property
    def chiller_heater_modules_performance_component_name_20(self):
        """Get chiller_heater_modules_performance_component_name_20

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_20` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 20"]

    @chiller_heater_modules_performance_component_name_20.setter
    def chiller_heater_modules_performance_component_name_20(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_performance_component_name_20`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_performance_component_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_performance_component_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_20`')

        self._data["Chiller Heater Modules Performance Component Name 20"] = value

    @property
    def chiller_heater_modules_control_schedule_name_20(self):
        """Get chiller_heater_modules_control_schedule_name_20

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_20` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 20"]

    @chiller_heater_modules_control_schedule_name_20.setter
    def chiller_heater_modules_control_schedule_name_20(self, value=None):
        """  Corresponds to IDD Field `chiller_heater_modules_control_schedule_name_20`

        Args:
            value (str): value for IDD Field `chiller_heater_modules_control_schedule_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chiller_heater_modules_control_schedule_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_20`')

        self._data["Chiller Heater Modules Control Schedule Name 20"] = value

    @property
    def number_of_chiller_heater_modules_20(self):
        """Get number_of_chiller_heater_modules_20

        Returns:
            int: the value of `number_of_chiller_heater_modules_20` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 20"]

    @number_of_chiller_heater_modules_20.setter
    def number_of_chiller_heater_modules_20(self, value=1 ):
        """  Corresponds to IDD Field `number_of_chiller_heater_modules_20`

        Args:
            value (int): value for IDD Field `number_of_chiller_heater_modules_20`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_chiller_heater_modules_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_20`')

        self._data["Number of Chiller Heater Modules 20"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.control_method))
        out.append(self._to_str(self.cooling_loop_inlet_node_name))
        out.append(self._to_str(self.cooling_loop_outlet_node_name))
        out.append(self._to_str(self.source_loop_inlet_node_name))
        out.append(self._to_str(self.source_loop_outlet_node_name))
        out.append(self._to_str(self.heating_loop_inlet_node_name))
        out.append(self._to_str(self.heating_loop_outlet_node_name))
        out.append(self._to_str(self.ancillary_power))
        out.append(self._to_str(self.ancillary_operation_schedule_name))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_1))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_1))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_1))
        out.append(self._to_str(self.number_of_chiller_heater_modules_1))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_2))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_2))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_2))
        out.append(self._to_str(self.number_of_chiller_heater_modules_2))
        out.append(self._to_str(self.chiller_heater_performance_component_object_type_3))
        out.append(self._to_str(self.chiller_heater_performance_component_name_3))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_3))
        out.append(self._to_str(self.number_of_chiller_heater_modules_3))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_4))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_4))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_4))
        out.append(self._to_str(self.number_of_chiller_heater_modules_4))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_5))
        out.append(self._to_str(self.chiller_heater_models_performance_component_name_5))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_5))
        out.append(self._to_str(self.number_of_chiller_heater_modules_5))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_6))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_6))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_6))
        out.append(self._to_str(self.number_of_chiller_heater_modules_6))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_7))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_7))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_7))
        out.append(self._to_str(self.number_of_chiller_heater_modules_7))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_8))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_8))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_8))
        out.append(self._to_str(self.number_of_chiller_heater_modules_8))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_9))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_9))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_9))
        out.append(self._to_str(self.number_of_chiller_heater_modules_9))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_10))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_10))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_10))
        out.append(self._to_str(self.number_of_chiller_heater_modules_10))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_11))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_11))
        out.append(self._to_str(self.chiller_heater_module_control_schedule_name_11))
        out.append(self._to_str(self.number_of_chiller_heater_modules_11))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_12))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_12))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_12))
        out.append(self._to_str(self.number_of_chiller_heater_modules_12))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_13))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_13))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_13))
        out.append(self._to_str(self.number_of_chiller_heater_modules_13))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_14))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_14))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_14))
        out.append(self._to_str(self.number_of_chiller_heater_modules_14))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_15))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_15))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_15))
        out.append(self._to_str(self.number_of_chiller_heater_modules_15))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_16))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_16))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_16))
        out.append(self._to_str(self.number_of_chiller_heater_modules_16))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_17))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_17))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_17))
        out.append(self._to_str(self.number_of_chiller_heater_modules_17))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_18))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_18))
        out.append(self._to_str(self.chiller_heater_modules_control_control_schedule_name_18))
        out.append(self._to_str(self.number_of_chiller_heater_modules_18))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_19))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_19))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_19))
        out.append(self._to_str(self.number_of_chiller_heater_modules_19))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_object_type_20))
        out.append(self._to_str(self.chiller_heater_modules_performance_component_name_20))
        out.append(self._to_str(self.chiller_heater_modules_control_schedule_name_20))
        out.append(self._to_str(self.number_of_chiller_heater_modules_20))
        return ",".join(out)

class ChillerHeaterPerformanceElectricEir(object):
    """ Corresponds to IDD object `ChillerHeaterPerformance:Electric:EIR`
        This chiller model is a generic chiller-heater where the cooling mode performance is a
        function of condenser entering or leaving fluid temperature and the heating mode performance
        is typically a function of condenser leaving fluid temperature. Performance at off-reference
        conditions is modeled using three polynomial equations per mode. Six curve objects are required.
    """
    internal_name = "ChillerHeaterPerformance:Electric:EIR"
    field_count = 29

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeaterPerformance:Electric:EIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Cooling Mode Evaporator Capacity"] = None
        self._data["Reference Cooling Mode COP"] = None
        self._data["Reference Cooling Mode Leaving Chilled Water Temperature"] = None
        self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"] = None
        self._data["Reference Cooling Mode Leaving Condenser Water Temperature"] = None
        self._data["Reference Heating Mode Cooling Capacity Ratio"] = None
        self._data["Reference Heating Mode Cooling Power Input Ratio"] = None
        self._data["Reference Heating Mode Leaving Chilled Water Temperature"] = None
        self._data["Reference Heating Mode Leaving Condenser Water Temperature"] = None
        self._data["Reference Heating Mode Entering Condenser Fluid Temperature"] = None
        self._data["Heating Mode Entering Chilled Water Temperature Low Limit"] = None
        self._data["Chilled Water Flow Mode Type"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Compressor Motor Efficiency"] = None
        self._data["Condenser Type"] = None
        self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"] = None
        self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"] = None
        self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"] = None
        self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"] = None
        self._data["Sizing Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cooling_mode_evaporator_capacity = None
        else:
            self.reference_cooling_mode_evaporator_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cooling_mode_cop = None
        else:
            self.reference_cooling_mode_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cooling_mode_leaving_chilled_water_temperature = None
        else:
            self.reference_cooling_mode_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cooling_mode_entering_condenser_fluid_temperature = None
        else:
            self.reference_cooling_mode_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_cooling_mode_leaving_condenser_water_temperature = None
        else:
            self.reference_cooling_mode_leaving_condenser_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heating_mode_cooling_capacity_ratio = None
        else:
            self.reference_heating_mode_cooling_capacity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heating_mode_cooling_power_input_ratio = None
        else:
            self.reference_heating_mode_cooling_power_input_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heating_mode_leaving_chilled_water_temperature = None
        else:
            self.reference_heating_mode_leaving_chilled_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heating_mode_leaving_condenser_water_temperature = None
        else:
            self.reference_heating_mode_leaving_condenser_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heating_mode_entering_condenser_fluid_temperature = None
        else:
            self.reference_heating_mode_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_entering_chilled_water_temperature_low_limit = None
        else:
            self.heating_mode_entering_chilled_water_temperature_low_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.chilled_water_flow_mode_type = None
        else:
            self.chilled_water_flow_mode_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_motor_efficiency = None
        else:
            self.compressor_motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_mode_temperature_curve_condenser_water_independent_variable = None
        else:
            self.cooling_mode_temperature_curve_condenser_water_independent_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_mode_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_mode_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_mode_cooling_capacity_optimum_part_load_ratio = None
        else:
            self.cooling_mode_cooling_capacity_optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_temperature_curve_condenser_water_independent_variable = None
        else:
            self.heating_mode_temperature_curve_condenser_water_independent_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.heating_mode_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_mode_cooling_capacity_optimum_part_load_ratio = None
        else:
            self.heating_mode_cooling_capacity_optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_cooling_mode_evaporator_capacity(self):
        """Get reference_cooling_mode_evaporator_capacity

        Returns:
            float: the value of `reference_cooling_mode_evaporator_capacity` or None if not set
        """
        return self._data["Reference Cooling Mode Evaporator Capacity"]

    @reference_cooling_mode_evaporator_capacity.setter
    def reference_cooling_mode_evaporator_capacity(self, value=None):
        """  Corresponds to IDD Field `reference_cooling_mode_evaporator_capacity`

        Args:
            value (float): value for IDD Field `reference_cooling_mode_evaporator_capacity`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cooling_mode_evaporator_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cooling_mode_evaporator_capacity`')

        self._data["Reference Cooling Mode Evaporator Capacity"] = value

    @property
    def reference_cooling_mode_cop(self):
        """Get reference_cooling_mode_cop

        Returns:
            float: the value of `reference_cooling_mode_cop` or None if not set
        """
        return self._data["Reference Cooling Mode COP"]

    @reference_cooling_mode_cop.setter
    def reference_cooling_mode_cop(self, value=None):
        """  Corresponds to IDD Field `reference_cooling_mode_cop`
        Efficiency of the chiller compressor (cooling output/compressor energy input).

        Args:
            value (float): value for IDD Field `reference_cooling_mode_cop`
                Unit: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cooling_mode_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cooling_mode_cop`')

        self._data["Reference Cooling Mode COP"] = value

    @property
    def reference_cooling_mode_leaving_chilled_water_temperature(self):
        """Get reference_cooling_mode_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_cooling_mode_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Leaving Chilled Water Temperature"]

    @reference_cooling_mode_leaving_chilled_water_temperature.setter
    def reference_cooling_mode_leaving_chilled_water_temperature(self, value=6.67 ):
        """  Corresponds to IDD Field `reference_cooling_mode_leaving_chilled_water_temperature`

        Args:
            value (float): value for IDD Field `reference_cooling_mode_leaving_chilled_water_temperature`
                Unit: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cooling_mode_leaving_chilled_water_temperature`'.format(value))

        self._data["Reference Cooling Mode Leaving Chilled Water Temperature"] = value

    @property
    def reference_cooling_mode_entering_condenser_fluid_temperature(self):
        """Get reference_cooling_mode_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_cooling_mode_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"]

    @reference_cooling_mode_entering_condenser_fluid_temperature.setter
    def reference_cooling_mode_entering_condenser_fluid_temperature(self, value=29.44 ):
        """  Corresponds to IDD Field `reference_cooling_mode_entering_condenser_fluid_temperature`

        Args:
            value (float): value for IDD Field `reference_cooling_mode_entering_condenser_fluid_temperature`
                Unit: C
                Default value: 29.44
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cooling_mode_entering_condenser_fluid_temperature`'.format(value))

        self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"] = value

    @property
    def reference_cooling_mode_leaving_condenser_water_temperature(self):
        """Get reference_cooling_mode_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_cooling_mode_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Leaving Condenser Water Temperature"]

    @reference_cooling_mode_leaving_condenser_water_temperature.setter
    def reference_cooling_mode_leaving_condenser_water_temperature(self, value=35.0 ):
        """  Corresponds to IDD Field `reference_cooling_mode_leaving_condenser_water_temperature`

        Args:
            value (float): value for IDD Field `reference_cooling_mode_leaving_condenser_water_temperature`
                Unit: C
                Default value: 35.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_cooling_mode_leaving_condenser_water_temperature`'.format(value))

        self._data["Reference Cooling Mode Leaving Condenser Water Temperature"] = value

    @property
    def reference_heating_mode_cooling_capacity_ratio(self):
        """Get reference_heating_mode_cooling_capacity_ratio

        Returns:
            float: the value of `reference_heating_mode_cooling_capacity_ratio` or None if not set
        """
        return self._data["Reference Heating Mode Cooling Capacity Ratio"]

    @reference_heating_mode_cooling_capacity_ratio.setter
    def reference_heating_mode_cooling_capacity_ratio(self, value=0.75 ):
        """  Corresponds to IDD Field `reference_heating_mode_cooling_capacity_ratio`
        During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode Cooling Capacity
        (Evaporator capacity at simul clg-htg mode ref condition)/ (Evaporator capacity at cooling mode ref condition)

        Args:
            value (float): value for IDD Field `reference_heating_mode_cooling_capacity_ratio`
                Default value: 0.75
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heating_mode_cooling_capacity_ratio`'.format(value))

        self._data["Reference Heating Mode Cooling Capacity Ratio"] = value

    @property
    def reference_heating_mode_cooling_power_input_ratio(self):
        """Get reference_heating_mode_cooling_power_input_ratio

        Returns:
            float: the value of `reference_heating_mode_cooling_power_input_ratio` or None if not set
        """
        return self._data["Reference Heating Mode Cooling Power Input Ratio"]

    @reference_heating_mode_cooling_power_input_ratio.setter
    def reference_heating_mode_cooling_power_input_ratio(self, value=1.38 ):
        """  Corresponds to IDD Field `reference_heating_mode_cooling_power_input_ratio`
        During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode COP
        (Power at simultaneous clg-htg mode reference condition)/ (Power at cooling mode reference condition)

        Args:
            value (float): value for IDD Field `reference_heating_mode_cooling_power_input_ratio`
                Default value: 1.38
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heating_mode_cooling_power_input_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_heating_mode_cooling_power_input_ratio`')

        self._data["Reference Heating Mode Cooling Power Input Ratio"] = value

    @property
    def reference_heating_mode_leaving_chilled_water_temperature(self):
        """Get reference_heating_mode_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_heating_mode_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Leaving Chilled Water Temperature"]

    @reference_heating_mode_leaving_chilled_water_temperature.setter
    def reference_heating_mode_leaving_chilled_water_temperature(self, value=6.67 ):
        """  Corresponds to IDD Field `reference_heating_mode_leaving_chilled_water_temperature`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `reference_heating_mode_leaving_chilled_water_temperature`
                Unit: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heating_mode_leaving_chilled_water_temperature`'.format(value))

        self._data["Reference Heating Mode Leaving Chilled Water Temperature"] = value

    @property
    def reference_heating_mode_leaving_condenser_water_temperature(self):
        """Get reference_heating_mode_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_heating_mode_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Leaving Condenser Water Temperature"]

    @reference_heating_mode_leaving_condenser_water_temperature.setter
    def reference_heating_mode_leaving_condenser_water_temperature(self, value=49.0 ):
        """  Corresponds to IDD Field `reference_heating_mode_leaving_condenser_water_temperature`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `reference_heating_mode_leaving_condenser_water_temperature`
                Unit: C
                Default value: 49.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heating_mode_leaving_condenser_water_temperature`'.format(value))

        self._data["Reference Heating Mode Leaving Condenser Water Temperature"] = value

    @property
    def reference_heating_mode_entering_condenser_fluid_temperature(self):
        """Get reference_heating_mode_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_heating_mode_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Entering Condenser Fluid Temperature"]

    @reference_heating_mode_entering_condenser_fluid_temperature.setter
    def reference_heating_mode_entering_condenser_fluid_temperature(self, value=29.44 ):
        """  Corresponds to IDD Field `reference_heating_mode_entering_condenser_fluid_temperature`

        Args:
            value (float): value for IDD Field `reference_heating_mode_entering_condenser_fluid_temperature`
                Unit: C
                Default value: 29.44
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heating_mode_entering_condenser_fluid_temperature`'.format(value))

        self._data["Reference Heating Mode Entering Condenser Fluid Temperature"] = value

    @property
    def heating_mode_entering_chilled_water_temperature_low_limit(self):
        """Get heating_mode_entering_chilled_water_temperature_low_limit

        Returns:
            float: the value of `heating_mode_entering_chilled_water_temperature_low_limit` or None if not set
        """
        return self._data["Heating Mode Entering Chilled Water Temperature Low Limit"]

    @heating_mode_entering_chilled_water_temperature_low_limit.setter
    def heating_mode_entering_chilled_water_temperature_low_limit(self, value=12.22 ):
        """  Corresponds to IDD Field `heating_mode_entering_chilled_water_temperature_low_limit`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `heating_mode_entering_chilled_water_temperature_low_limit`
                Unit: C
                Default value: 12.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_mode_entering_chilled_water_temperature_low_limit`'.format(value))

        self._data["Heating Mode Entering Chilled Water Temperature Low Limit"] = value

    @property
    def chilled_water_flow_mode_type(self):
        """Get chilled_water_flow_mode_type

        Returns:
            str: the value of `chilled_water_flow_mode_type` or None if not set
        """
        return self._data["Chilled Water Flow Mode Type"]

    @chilled_water_flow_mode_type.setter
    def chilled_water_flow_mode_type(self, value="ConstantFlow"):
        """  Corresponds to IDD Field `chilled_water_flow_mode_type`
        Sets chilled water flow rate to either constant or variable.

        Args:
            value (str): value for IDD Field `chilled_water_flow_mode_type`
                Accepted values are:
                      - ConstantFlow
                      - VariableFlow
                Default value: ConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `chilled_water_flow_mode_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_flow_mode_type`')
            vals = set()
            vals.add("ConstantFlow")
            vals.add("VariableFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `chilled_water_flow_mode_type`'.format(value))

        self._data["Chilled Water Flow Mode Type"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_chilled_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_chilled_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')

        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_condenser_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_condenser_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')

        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_hot_water_flow_rate`

        Args:
            value (float): value for IDD Field `design_hot_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_hot_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_hot_water_flow_rate`')

        self._data["Design Hot Water Flow Rate"] = value

    @property
    def compressor_motor_efficiency(self):
        """Get compressor_motor_efficiency

        Returns:
            float: the value of `compressor_motor_efficiency` or None if not set
        """
        return self._data["Compressor Motor Efficiency"]

    @compressor_motor_efficiency.setter
    def compressor_motor_efficiency(self, value=1.0 ):
        """  Corresponds to IDD Field `compressor_motor_efficiency`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter 1.0 or leave this field blank for a hermetic compressor.

        Args:
            value (float): value for IDD Field `compressor_motor_efficiency`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_motor_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `compressor_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `compressor_motor_efficiency`')

        self._data["Compressor Motor Efficiency"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `condenser_type`

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("WaterCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def cooling_mode_temperature_curve_condenser_water_independent_variable(self):
        """Get cooling_mode_temperature_curve_condenser_water_independent_variable

        Returns:
            str: the value of `cooling_mode_temperature_curve_condenser_water_independent_variable` or None if not set
        """
        return self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"]

    @cooling_mode_temperature_curve_condenser_water_independent_variable.setter
    def cooling_mode_temperature_curve_condenser_water_independent_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `cooling_mode_temperature_curve_condenser_water_independent_variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature. Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).
        Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature

        Args:
            value (str): value for IDD Field `cooling_mode_temperature_curve_condenser_water_independent_variable`
                Accepted values are:
                      - EnteringCondenser
                      - LeavingCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_temperature_curve_condenser_water_independent_variable`')
            vals = set()
            vals.add("EnteringCondenser")
            vals.add("LeavingCondenser")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_mode_temperature_curve_condenser_water_independent_variable`'.format(value))

        self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"] = value

    @property
    def cooling_mode_cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_mode_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_mode_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"]

    @cooling_mode_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_mode_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`
        Cooling capacity as a function of leaving chilled water temperature
        and either entering or leaving condenser fluid temperature
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`')

        self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        Bicubic = a + b*TCond + c*TCond**2 + d*PLR + e*PLR**2 + f*TCond*PLR +g*0 + h*PLR**3+i*0+j*0
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        Normally, a bicubic curve here should be in terms of LCT rather than ECT
        Also, a bicubic curve is more applicable for variable-speed compressor motor drives
        or
        Quadratic = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady-state capacity)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def cooling_mode_cooling_capacity_optimum_part_load_ratio(self):
        """Get cooling_mode_cooling_capacity_optimum_part_load_ratio

        Returns:
            float: the value of `cooling_mode_cooling_capacity_optimum_part_load_ratio` or None if not set
        """
        return self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"]

    @cooling_mode_cooling_capacity_optimum_part_load_ratio.setter
    def cooling_mode_cooling_capacity_optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `cooling_mode_cooling_capacity_optimum_part_load_ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.
        The Min/Max PLR are taken from their assoicated EIR-FPLR curve references.

        Args:
            value (float): value for IDD Field `cooling_mode_cooling_capacity_optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_mode_cooling_capacity_optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_mode_cooling_capacity_optimum_part_load_ratio`')

        self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"] = value

    @property
    def heating_mode_temperature_curve_condenser_water_independent_variable(self):
        """Get heating_mode_temperature_curve_condenser_water_independent_variable

        Returns:
            str: the value of `heating_mode_temperature_curve_condenser_water_independent_variable` or None if not set
        """
        return self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"]

    @heating_mode_temperature_curve_condenser_water_independent_variable.setter
    def heating_mode_temperature_curve_condenser_water_independent_variable(self, value="LeavingCondenser"):
        """  Corresponds to IDD Field `heating_mode_temperature_curve_condenser_water_independent_variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature. Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).
        Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature
        Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser

        Args:
            value (str): value for IDD Field `heating_mode_temperature_curve_condenser_water_independent_variable`
                Accepted values are:
                      - EnteringCondenser
                      - LeavingCondenser
                Default value: LeavingCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_temperature_curve_condenser_water_independent_variable`')
            vals = set()
            vals.add("EnteringCondenser")
            vals.add("LeavingCondenser")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_mode_temperature_curve_condenser_water_independent_variable`'.format(value))

        self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"] = value

    @property
    def heating_mode_cooling_capacity_function_of_temperature_curve_name(self):
        """Get heating_mode_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_mode_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"]

    @heating_mode_cooling_capacity_function_of_temperature_curve_name.setter
    def heating_mode_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `heating_mode_cooling_capacity_function_of_temperature_curve_name`
        Evaporator (cooling) capacity as a function of leaving chilled water temperature
        and leaving condenser fluid temperature when in heating or simultaneous cool/heat mode
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If independent variable = EnteringCondenser, TCond = ECT
        If independent variable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `heating_mode_cooling_capacity_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_mode_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_cooling_capacity_function_of_temperature_curve_name`')

        self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
        Electric Input Ratio (EIR) as a function of leaving chilled water temperature when in heating or simultaneous cool/heat mode
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If independent variable = EnteringCondenser, TCond = ECT
        If independent variable = LeavingCondenser, TCond = LCT
        CWS = leaving chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')

        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) when in heating or simultaneous cool/heat mode
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        Bicubic = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0
        Normally, a bicubic curve here should be in terms of LCT rather than ECT
        Also, a bicubic curve is more applicable for variable-speed compressor motor drives
        or
        Quadratic = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady-state capacity)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')

        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_mode_cooling_capacity_optimum_part_load_ratio(self):
        """Get heating_mode_cooling_capacity_optimum_part_load_ratio

        Returns:
            float: the value of `heating_mode_cooling_capacity_optimum_part_load_ratio` or None if not set
        """
        return self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"]

    @heating_mode_cooling_capacity_optimum_part_load_ratio.setter
    def heating_mode_cooling_capacity_optimum_part_load_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `heating_mode_cooling_capacity_optimum_part_load_ratio`
        Optimum part load ratio where the chiller is most efficient when in heating or simultaneous cool/heat mode.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.
        The Min/Max PLR are taken from their assoicated EIR-FPLR curve references.

        Args:
            value (float): value for IDD Field `heating_mode_cooling_capacity_optimum_part_load_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_mode_cooling_capacity_optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_mode_cooling_capacity_optimum_part_load_ratio`')

        self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `sizing_factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `sizing_factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')

        self._data["Sizing Factor"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_cooling_mode_evaporator_capacity))
        out.append(self._to_str(self.reference_cooling_mode_cop))
        out.append(self._to_str(self.reference_cooling_mode_leaving_chilled_water_temperature))
        out.append(self._to_str(self.reference_cooling_mode_entering_condenser_fluid_temperature))
        out.append(self._to_str(self.reference_cooling_mode_leaving_condenser_water_temperature))
        out.append(self._to_str(self.reference_heating_mode_cooling_capacity_ratio))
        out.append(self._to_str(self.reference_heating_mode_cooling_power_input_ratio))
        out.append(self._to_str(self.reference_heating_mode_leaving_chilled_water_temperature))
        out.append(self._to_str(self.reference_heating_mode_leaving_condenser_water_temperature))
        out.append(self._to_str(self.reference_heating_mode_entering_condenser_fluid_temperature))
        out.append(self._to_str(self.heating_mode_entering_chilled_water_temperature_low_limit))
        out.append(self._to_str(self.chilled_water_flow_mode_type))
        out.append(self._to_str(self.design_chilled_water_flow_rate))
        out.append(self._to_str(self.design_condenser_water_flow_rate))
        out.append(self._to_str(self.design_hot_water_flow_rate))
        out.append(self._to_str(self.compressor_motor_efficiency))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.cooling_mode_temperature_curve_condenser_water_independent_variable))
        out.append(self._to_str(self.cooling_mode_cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.cooling_mode_cooling_capacity_optimum_part_load_ratio))
        out.append(self._to_str(self.heating_mode_temperature_curve_condenser_water_independent_variable))
        out.append(self._to_str(self.heating_mode_cooling_capacity_function_of_temperature_curve_name))
        out.append(self._to_str(self.heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name))
        out.append(self._to_str(self.heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.heating_mode_cooling_capacity_optimum_part_load_ratio))
        out.append(self._to_str(self.sizing_factor))
        return ",".join(out)

class PlantLoop(object):
    """ Corresponds to IDD object `PlantLoop`
        Defines a central plant loop.
    """
    internal_name = "PlantLoop"
    field_count = 23

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantLoop`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fluid Type"] = None
        self._data["User Defined Fluid Type"] = None
        self._data["Plant Equipment Operation Scheme Name"] = None
        self._data["Loop Temperature Setpoint Node Name"] = None
        self._data["Maximum Loop Temperature"] = None
        self._data["Minimum Loop Temperature"] = None
        self._data["Maximum Loop Flow Rate"] = None
        self._data["Minimum Loop Flow Rate"] = None
        self._data["Plant Loop Volume"] = None
        self._data["Plant Side Inlet Node Name"] = None
        self._data["Plant Side Outlet Node Name"] = None
        self._data["Plant Side Branch List Name"] = None
        self._data["Plant Side Connector List Name"] = None
        self._data["Demand Side Inlet Node Name"] = None
        self._data["Demand Side Outlet Node Name"] = None
        self._data["Demand Side Branch List Name"] = None
        self._data["Demand Side Connector List Name"] = None
        self._data["Load Distribution Scheme"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Plant Loop Demand Calculation Scheme"] = None
        self._data["Common Pipe Simulation"] = None
        self._data["Pressure Simulation Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.user_defined_fluid_type = None
        else:
            self.user_defined_fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_equipment_operation_scheme_name = None
        else:
            self.plant_equipment_operation_scheme_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loop_temperature_setpoint_node_name = None
        else:
            self.loop_temperature_setpoint_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_loop_temperature = None
        else:
            self.maximum_loop_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_loop_temperature = None
        else:
            self.minimum_loop_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_loop_flow_rate = None
        else:
            self.maximum_loop_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_loop_flow_rate = None
        else:
            self.minimum_loop_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_loop_volume = None
        else:
            self.plant_loop_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_side_inlet_node_name = None
        else:
            self.plant_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_side_outlet_node_name = None
        else:
            self.plant_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_side_branch_list_name = None
        else:
            self.plant_side_branch_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_side_connector_list_name = None
        else:
            self.plant_side_connector_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_inlet_node_name = None
        else:
            self.demand_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_outlet_node_name = None
        else:
            self.demand_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_branch_list_name = None
        else:
            self.demand_side_branch_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_connector_list_name = None
        else:
            self.demand_side_connector_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_distribution_scheme = None
        else:
            self.load_distribution_scheme = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_loop_demand_calculation_scheme = None
        else:
            self.plant_loop_demand_calculation_scheme = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.common_pipe_simulation = None
        else:
            self.common_pipe_simulation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pressure_simulation_type = None
        else:
            self.pressure_simulation_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Water
                      - Steam
                      - UserDefinedFluidType
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Water")
            vals.add("Steam")
            vals.add("UserDefinedFluidType")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @property
    def user_defined_fluid_type(self):
        """Get user_defined_fluid_type

        Returns:
            str: the value of `user_defined_fluid_type` or None if not set
        """
        return self._data["User Defined Fluid Type"]

    @user_defined_fluid_type.setter
    def user_defined_fluid_type(self, value=None):
        """  Corresponds to IDD Field `user_defined_fluid_type`
        This field is only required when Fluid Type is UserDefinedFluidType

        Args:
            value (str): value for IDD Field `user_defined_fluid_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `user_defined_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `user_defined_fluid_type`')

        self._data["User Defined Fluid Type"] = value

    @property
    def plant_equipment_operation_scheme_name(self):
        """Get plant_equipment_operation_scheme_name

        Returns:
            str: the value of `plant_equipment_operation_scheme_name` or None if not set
        """
        return self._data["Plant Equipment Operation Scheme Name"]

    @plant_equipment_operation_scheme_name.setter
    def plant_equipment_operation_scheme_name(self, value=None):
        """  Corresponds to IDD Field `plant_equipment_operation_scheme_name`

        Args:
            value (str): value for IDD Field `plant_equipment_operation_scheme_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_equipment_operation_scheme_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_equipment_operation_scheme_name`')

        self._data["Plant Equipment Operation Scheme Name"] = value

    @property
    def loop_temperature_setpoint_node_name(self):
        """Get loop_temperature_setpoint_node_name

        Returns:
            str: the value of `loop_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Loop Temperature Setpoint Node Name"]

    @loop_temperature_setpoint_node_name.setter
    def loop_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `loop_temperature_setpoint_node_name`

        Args:
            value (str): value for IDD Field `loop_temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `loop_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `loop_temperature_setpoint_node_name`')

        self._data["Loop Temperature Setpoint Node Name"] = value

    @property
    def maximum_loop_temperature(self):
        """Get maximum_loop_temperature

        Returns:
            float: the value of `maximum_loop_temperature` or None if not set
        """
        return self._data["Maximum Loop Temperature"]

    @maximum_loop_temperature.setter
    def maximum_loop_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_loop_temperature`

        Args:
            value (float): value for IDD Field `maximum_loop_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_loop_temperature`'.format(value))

        self._data["Maximum Loop Temperature"] = value

    @property
    def minimum_loop_temperature(self):
        """Get minimum_loop_temperature

        Returns:
            float: the value of `minimum_loop_temperature` or None if not set
        """
        return self._data["Minimum Loop Temperature"]

    @minimum_loop_temperature.setter
    def minimum_loop_temperature(self, value=None):
        """  Corresponds to IDD Field `minimum_loop_temperature`

        Args:
            value (float): value for IDD Field `minimum_loop_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_loop_temperature`'.format(value))

        self._data["Minimum Loop Temperature"] = value

    @property
    def maximum_loop_flow_rate(self):
        """Get maximum_loop_flow_rate

        Returns:
            float: the value of `maximum_loop_flow_rate` or None if not set
        """
        return self._data["Maximum Loop Flow Rate"]

    @maximum_loop_flow_rate.setter
    def maximum_loop_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_loop_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_loop_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_loop_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_loop_flow_rate`')

        self._data["Maximum Loop Flow Rate"] = value

    @property
    def minimum_loop_flow_rate(self):
        """Get minimum_loop_flow_rate

        Returns:
            float: the value of `minimum_loop_flow_rate` or None if not set
        """
        return self._data["Minimum Loop Flow Rate"]

    @minimum_loop_flow_rate.setter
    def minimum_loop_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_loop_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_loop_flow_rate`
                Unit: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_loop_flow_rate`'.format(value))

        self._data["Minimum Loop Flow Rate"] = value

    @property
    def plant_loop_volume(self):
        """Get plant_loop_volume

        Returns:
            float: the value of `plant_loop_volume` or None if not set
        """
        return self._data["Plant Loop Volume"]

    @plant_loop_volume.setter
    def plant_loop_volume(self, value=None):
        """  Corresponds to IDD Field `plant_loop_volume`

        Args:
            value (float): value for IDD Field `plant_loop_volume`
                Unit: m3
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `plant_loop_volume`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `plant_loop_volume`')

        self._data["Plant Loop Volume"] = value

    @property
    def plant_side_inlet_node_name(self):
        """Get plant_side_inlet_node_name

        Returns:
            str: the value of `plant_side_inlet_node_name` or None if not set
        """
        return self._data["Plant Side Inlet Node Name"]

    @plant_side_inlet_node_name.setter
    def plant_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `plant_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_side_inlet_node_name`')

        self._data["Plant Side Inlet Node Name"] = value

    @property
    def plant_side_outlet_node_name(self):
        """Get plant_side_outlet_node_name

        Returns:
            str: the value of `plant_side_outlet_node_name` or None if not set
        """
        return self._data["Plant Side Outlet Node Name"]

    @plant_side_outlet_node_name.setter
    def plant_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `plant_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_side_outlet_node_name`')

        self._data["Plant Side Outlet Node Name"] = value

    @property
    def plant_side_branch_list_name(self):
        """Get plant_side_branch_list_name

        Returns:
            str: the value of `plant_side_branch_list_name` or None if not set
        """
        return self._data["Plant Side Branch List Name"]

    @plant_side_branch_list_name.setter
    def plant_side_branch_list_name(self, value=None):
        """  Corresponds to IDD Field `plant_side_branch_list_name`

        Args:
            value (str): value for IDD Field `plant_side_branch_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_side_branch_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_side_branch_list_name`')

        self._data["Plant Side Branch List Name"] = value

    @property
    def plant_side_connector_list_name(self):
        """Get plant_side_connector_list_name

        Returns:
            str: the value of `plant_side_connector_list_name` or None if not set
        """
        return self._data["Plant Side Connector List Name"]

    @plant_side_connector_list_name.setter
    def plant_side_connector_list_name(self, value=None):
        """  Corresponds to IDD Field `plant_side_connector_list_name`

        Args:
            value (str): value for IDD Field `plant_side_connector_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_side_connector_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_side_connector_list_name`')

        self._data["Plant Side Connector List Name"] = value

    @property
    def demand_side_inlet_node_name(self):
        """Get demand_side_inlet_node_name

        Returns:
            str: the value of `demand_side_inlet_node_name` or None if not set
        """
        return self._data["Demand Side Inlet Node Name"]

    @demand_side_inlet_node_name.setter
    def demand_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `demand_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_inlet_node_name`')

        self._data["Demand Side Inlet Node Name"] = value

    @property
    def demand_side_outlet_node_name(self):
        """Get demand_side_outlet_node_name

        Returns:
            str: the value of `demand_side_outlet_node_name` or None if not set
        """
        return self._data["Demand Side Outlet Node Name"]

    @demand_side_outlet_node_name.setter
    def demand_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `demand_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_outlet_node_name`')

        self._data["Demand Side Outlet Node Name"] = value

    @property
    def demand_side_branch_list_name(self):
        """Get demand_side_branch_list_name

        Returns:
            str: the value of `demand_side_branch_list_name` or None if not set
        """
        return self._data["Demand Side Branch List Name"]

    @demand_side_branch_list_name.setter
    def demand_side_branch_list_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_branch_list_name`

        Args:
            value (str): value for IDD Field `demand_side_branch_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_branch_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_branch_list_name`')

        self._data["Demand Side Branch List Name"] = value

    @property
    def demand_side_connector_list_name(self):
        """Get demand_side_connector_list_name

        Returns:
            str: the value of `demand_side_connector_list_name` or None if not set
        """
        return self._data["Demand Side Connector List Name"]

    @demand_side_connector_list_name.setter
    def demand_side_connector_list_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_connector_list_name`

        Args:
            value (str): value for IDD Field `demand_side_connector_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_connector_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_connector_list_name`')

        self._data["Demand Side Connector List Name"] = value

    @property
    def load_distribution_scheme(self):
        """Get load_distribution_scheme

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self._data["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `load_distribution_scheme`

        Args:
            value (str): value for IDD Field `load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `load_distribution_scheme`'.format(value))

        self._data["Load Distribution Scheme"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def plant_loop_demand_calculation_scheme(self):
        """Get plant_loop_demand_calculation_scheme

        Returns:
            str: the value of `plant_loop_demand_calculation_scheme` or None if not set
        """
        return self._data["Plant Loop Demand Calculation Scheme"]

    @plant_loop_demand_calculation_scheme.setter
    def plant_loop_demand_calculation_scheme(self, value="SingleSetpoint"):
        """  Corresponds to IDD Field `plant_loop_demand_calculation_scheme`

        Args:
            value (str): value for IDD Field `plant_loop_demand_calculation_scheme`
                Accepted values are:
                      - SingleSetpoint
                      - DualSetpointDeadband
                Default value: SingleSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_loop_demand_calculation_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_loop_demand_calculation_scheme`')
            vals = set()
            vals.add("SingleSetpoint")
            vals.add("DualSetpointDeadband")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `plant_loop_demand_calculation_scheme`'.format(value))

        self._data["Plant Loop Demand Calculation Scheme"] = value

    @property
    def common_pipe_simulation(self):
        """Get common_pipe_simulation

        Returns:
            str: the value of `common_pipe_simulation` or None if not set
        """
        return self._data["Common Pipe Simulation"]

    @common_pipe_simulation.setter
    def common_pipe_simulation(self, value="None"):
        """  Corresponds to IDD Field `common_pipe_simulation`
        Specifies a primary-secondary loop configuration. The plant side is the
        primary loop, and the demand side is the secondary loop.
        A secondary supply pump is required on the demand side.
        None = Primary-only, no secondary simulation
        CommonPipe = Primary-secondary with no temperature control at primary-secondary interface
        TwoWayCommonPipe = Primary-secondary with control of secondary supply temperature or
        primary return temperature (requires a setpoint be placed on the
        plant side or demand side inlet node).

        Args:
            value (str): value for IDD Field `common_pipe_simulation`
                Accepted values are:
                      - CommonPipe
                      - TwoWayCommonPipe
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `common_pipe_simulation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `common_pipe_simulation`')
            vals = set()
            vals.add("CommonPipe")
            vals.add("TwoWayCommonPipe")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `common_pipe_simulation`'.format(value))

        self._data["Common Pipe Simulation"] = value

    @property
    def pressure_simulation_type(self):
        """Get pressure_simulation_type

        Returns:
            str: the value of `pressure_simulation_type` or None if not set
        """
        return self._data["Pressure Simulation Type"]

    @pressure_simulation_type.setter
    def pressure_simulation_type(self, value="None"):
        """  Corresponds to IDD Field `pressure_simulation_type`

        Args:
            value (str): value for IDD Field `pressure_simulation_type`
                Accepted values are:
                      - PumpPowerCorrection
                      - LoopFlowCorrection
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pressure_simulation_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pressure_simulation_type`')
            vals = set()
            vals.add("PumpPowerCorrection")
            vals.add("LoopFlowCorrection")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pressure_simulation_type`'.format(value))

        self._data["Pressure Simulation Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fluid_type))
        out.append(self._to_str(self.user_defined_fluid_type))
        out.append(self._to_str(self.plant_equipment_operation_scheme_name))
        out.append(self._to_str(self.loop_temperature_setpoint_node_name))
        out.append(self._to_str(self.maximum_loop_temperature))
        out.append(self._to_str(self.minimum_loop_temperature))
        out.append(self._to_str(self.maximum_loop_flow_rate))
        out.append(self._to_str(self.minimum_loop_flow_rate))
        out.append(self._to_str(self.plant_loop_volume))
        out.append(self._to_str(self.plant_side_inlet_node_name))
        out.append(self._to_str(self.plant_side_outlet_node_name))
        out.append(self._to_str(self.plant_side_branch_list_name))
        out.append(self._to_str(self.plant_side_connector_list_name))
        out.append(self._to_str(self.demand_side_inlet_node_name))
        out.append(self._to_str(self.demand_side_outlet_node_name))
        out.append(self._to_str(self.demand_side_branch_list_name))
        out.append(self._to_str(self.demand_side_connector_list_name))
        out.append(self._to_str(self.load_distribution_scheme))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.plant_loop_demand_calculation_scheme))
        out.append(self._to_str(self.common_pipe_simulation))
        out.append(self._to_str(self.pressure_simulation_type))
        return ",".join(out)

class CondenserLoop(object):
    """ Corresponds to IDD object `CondenserLoop`
        Defines a central plant condenser loop. CondenserLoop and PlantLoop are nearly
        identical except some components and operation schemes are applicable to only one
        loop type or the other.
    """
    internal_name = "CondenserLoop"
    field_count = 20

    def __init__(self):
        """ Init data dictionary object for IDD  `CondenserLoop`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fluid Type"] = None
        self._data["User Defined Fluid Type"] = None
        self._data["Condenser Equipment Operation Scheme Name"] = None
        self._data["Condenser Loop Temperature Setpoint Node Name"] = None
        self._data["Maximum Loop Temperature"] = None
        self._data["Minimum Loop Temperature"] = None
        self._data["Maximum Loop Flow Rate"] = None
        self._data["Minimum Loop Flow Rate"] = None
        self._data["Condenser Loop Volume"] = None
        self._data["Condenser Side Inlet Node Name"] = None
        self._data["Condenser Side Outlet Node Name"] = None
        self._data["Condenser Side Branch List Name"] = None
        self._data["Condenser Side Connector List Name"] = None
        self._data["Demand Side Inlet Node Name"] = None
        self._data["Demand Side Outlet Node Name"] = None
        self._data["Condenser Demand Side Branch List Name"] = None
        self._data["Condenser Demand Side Connector List Name"] = None
        self._data["Load Distribution Scheme"] = None
        self._data["Pressure Simulation Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.user_defined_fluid_type = None
        else:
            self.user_defined_fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_equipment_operation_scheme_name = None
        else:
            self.condenser_equipment_operation_scheme_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_loop_temperature_setpoint_node_name = None
        else:
            self.condenser_loop_temperature_setpoint_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_loop_temperature = None
        else:
            self.maximum_loop_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_loop_temperature = None
        else:
            self.minimum_loop_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_loop_flow_rate = None
        else:
            self.maximum_loop_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_loop_flow_rate = None
        else:
            self.minimum_loop_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_loop_volume = None
        else:
            self.condenser_loop_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_side_inlet_node_name = None
        else:
            self.condenser_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_side_outlet_node_name = None
        else:
            self.condenser_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_side_branch_list_name = None
        else:
            self.condenser_side_branch_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_side_connector_list_name = None
        else:
            self.condenser_side_connector_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_inlet_node_name = None
        else:
            self.demand_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_outlet_node_name = None
        else:
            self.demand_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_demand_side_branch_list_name = None
        else:
            self.condenser_demand_side_branch_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_demand_side_connector_list_name = None
        else:
            self.condenser_demand_side_connector_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_distribution_scheme = None
        else:
            self.load_distribution_scheme = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pressure_simulation_type = None
        else:
            self.pressure_simulation_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Water
                      - UserDefinedFluidType
                Default value: Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Water")
            vals.add("UserDefinedFluidType")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    @property
    def user_defined_fluid_type(self):
        """Get user_defined_fluid_type

        Returns:
            str: the value of `user_defined_fluid_type` or None if not set
        """
        return self._data["User Defined Fluid Type"]

    @user_defined_fluid_type.setter
    def user_defined_fluid_type(self, value=None):
        """  Corresponds to IDD Field `user_defined_fluid_type`
        This field is only required when Fluid Type is UserDefinedFluidType

        Args:
            value (str): value for IDD Field `user_defined_fluid_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `user_defined_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `user_defined_fluid_type`')

        self._data["User Defined Fluid Type"] = value

    @property
    def condenser_equipment_operation_scheme_name(self):
        """Get condenser_equipment_operation_scheme_name

        Returns:
            str: the value of `condenser_equipment_operation_scheme_name` or None if not set
        """
        return self._data["Condenser Equipment Operation Scheme Name"]

    @condenser_equipment_operation_scheme_name.setter
    def condenser_equipment_operation_scheme_name(self, value=None):
        """  Corresponds to IDD Field `condenser_equipment_operation_scheme_name`

        Args:
            value (str): value for IDD Field `condenser_equipment_operation_scheme_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_equipment_operation_scheme_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_equipment_operation_scheme_name`')

        self._data["Condenser Equipment Operation Scheme Name"] = value

    @property
    def condenser_loop_temperature_setpoint_node_name(self):
        """Get condenser_loop_temperature_setpoint_node_name

        Returns:
            str: the value of `condenser_loop_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Condenser Loop Temperature Setpoint Node Name"]

    @condenser_loop_temperature_setpoint_node_name.setter
    def condenser_loop_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_loop_temperature_setpoint_node_name`

        Args:
            value (str): value for IDD Field `condenser_loop_temperature_setpoint_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_loop_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_loop_temperature_setpoint_node_name`')

        self._data["Condenser Loop Temperature Setpoint Node Name"] = value

    @property
    def maximum_loop_temperature(self):
        """Get maximum_loop_temperature

        Returns:
            float: the value of `maximum_loop_temperature` or None if not set
        """
        return self._data["Maximum Loop Temperature"]

    @maximum_loop_temperature.setter
    def maximum_loop_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_loop_temperature`

        Args:
            value (float): value for IDD Field `maximum_loop_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_loop_temperature`'.format(value))

        self._data["Maximum Loop Temperature"] = value

    @property
    def minimum_loop_temperature(self):
        """Get minimum_loop_temperature

        Returns:
            float: the value of `minimum_loop_temperature` or None if not set
        """
        return self._data["Minimum Loop Temperature"]

    @minimum_loop_temperature.setter
    def minimum_loop_temperature(self, value=None):
        """  Corresponds to IDD Field `minimum_loop_temperature`

        Args:
            value (float): value for IDD Field `minimum_loop_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_loop_temperature`'.format(value))

        self._data["Minimum Loop Temperature"] = value

    @property
    def maximum_loop_flow_rate(self):
        """Get maximum_loop_flow_rate

        Returns:
            float: the value of `maximum_loop_flow_rate` or None if not set
        """
        return self._data["Maximum Loop Flow Rate"]

    @maximum_loop_flow_rate.setter
    def maximum_loop_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_loop_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_loop_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_loop_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_loop_flow_rate`')

        self._data["Maximum Loop Flow Rate"] = value

    @property
    def minimum_loop_flow_rate(self):
        """Get minimum_loop_flow_rate

        Returns:
            float: the value of `minimum_loop_flow_rate` or None if not set
        """
        return self._data["Minimum Loop Flow Rate"]

    @minimum_loop_flow_rate.setter
    def minimum_loop_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_loop_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_loop_flow_rate`
                Unit: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_loop_flow_rate`'.format(value))

        self._data["Minimum Loop Flow Rate"] = value

    @property
    def condenser_loop_volume(self):
        """Get condenser_loop_volume

        Returns:
            float: the value of `condenser_loop_volume` or None if not set
        """
        return self._data["Condenser Loop Volume"]

    @condenser_loop_volume.setter
    def condenser_loop_volume(self, value=None):
        """  Corresponds to IDD Field `condenser_loop_volume`

        Args:
            value (float): value for IDD Field `condenser_loop_volume`
                Unit: m3
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_loop_volume`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_loop_volume`')

        self._data["Condenser Loop Volume"] = value

    @property
    def condenser_side_inlet_node_name(self):
        """Get condenser_side_inlet_node_name

        Returns:
            str: the value of `condenser_side_inlet_node_name` or None if not set
        """
        return self._data["Condenser Side Inlet Node Name"]

    @condenser_side_inlet_node_name.setter
    def condenser_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_side_inlet_node_name`')

        self._data["Condenser Side Inlet Node Name"] = value

    @property
    def condenser_side_outlet_node_name(self):
        """Get condenser_side_outlet_node_name

        Returns:
            str: the value of `condenser_side_outlet_node_name` or None if not set
        """
        return self._data["Condenser Side Outlet Node Name"]

    @condenser_side_outlet_node_name.setter
    def condenser_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `condenser_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_side_outlet_node_name`')

        self._data["Condenser Side Outlet Node Name"] = value

    @property
    def condenser_side_branch_list_name(self):
        """Get condenser_side_branch_list_name

        Returns:
            str: the value of `condenser_side_branch_list_name` or None if not set
        """
        return self._data["Condenser Side Branch List Name"]

    @condenser_side_branch_list_name.setter
    def condenser_side_branch_list_name(self, value=None):
        """  Corresponds to IDD Field `condenser_side_branch_list_name`

        Args:
            value (str): value for IDD Field `condenser_side_branch_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_side_branch_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_side_branch_list_name`')

        self._data["Condenser Side Branch List Name"] = value

    @property
    def condenser_side_connector_list_name(self):
        """Get condenser_side_connector_list_name

        Returns:
            str: the value of `condenser_side_connector_list_name` or None if not set
        """
        return self._data["Condenser Side Connector List Name"]

    @condenser_side_connector_list_name.setter
    def condenser_side_connector_list_name(self, value=None):
        """  Corresponds to IDD Field `condenser_side_connector_list_name`

        Args:
            value (str): value for IDD Field `condenser_side_connector_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_side_connector_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_side_connector_list_name`')

        self._data["Condenser Side Connector List Name"] = value

    @property
    def demand_side_inlet_node_name(self):
        """Get demand_side_inlet_node_name

        Returns:
            str: the value of `demand_side_inlet_node_name` or None if not set
        """
        return self._data["Demand Side Inlet Node Name"]

    @demand_side_inlet_node_name.setter
    def demand_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_inlet_node_name`

        Args:
            value (str): value for IDD Field `demand_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_inlet_node_name`')

        self._data["Demand Side Inlet Node Name"] = value

    @property
    def demand_side_outlet_node_name(self):
        """Get demand_side_outlet_node_name

        Returns:
            str: the value of `demand_side_outlet_node_name` or None if not set
        """
        return self._data["Demand Side Outlet Node Name"]

    @demand_side_outlet_node_name.setter
    def demand_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_outlet_node_name`

        Args:
            value (str): value for IDD Field `demand_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_outlet_node_name`')

        self._data["Demand Side Outlet Node Name"] = value

    @property
    def condenser_demand_side_branch_list_name(self):
        """Get condenser_demand_side_branch_list_name

        Returns:
            str: the value of `condenser_demand_side_branch_list_name` or None if not set
        """
        return self._data["Condenser Demand Side Branch List Name"]

    @condenser_demand_side_branch_list_name.setter
    def condenser_demand_side_branch_list_name(self, value=None):
        """  Corresponds to IDD Field `condenser_demand_side_branch_list_name`

        Args:
            value (str): value for IDD Field `condenser_demand_side_branch_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_demand_side_branch_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_demand_side_branch_list_name`')

        self._data["Condenser Demand Side Branch List Name"] = value

    @property
    def condenser_demand_side_connector_list_name(self):
        """Get condenser_demand_side_connector_list_name

        Returns:
            str: the value of `condenser_demand_side_connector_list_name` or None if not set
        """
        return self._data["Condenser Demand Side Connector List Name"]

    @condenser_demand_side_connector_list_name.setter
    def condenser_demand_side_connector_list_name(self, value=None):
        """  Corresponds to IDD Field `condenser_demand_side_connector_list_name`

        Args:
            value (str): value for IDD Field `condenser_demand_side_connector_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_demand_side_connector_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_demand_side_connector_list_name`')

        self._data["Condenser Demand Side Connector List Name"] = value

    @property
    def load_distribution_scheme(self):
        """Get load_distribution_scheme

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self._data["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """  Corresponds to IDD Field `load_distribution_scheme`

        Args:
            value (str): value for IDD Field `load_distribution_scheme`
                Accepted values are:
                      - Optimal
                      - SequentialLoad
                      - UniformLoad
                      - UniformPLR
                      - SequentialUniformPLR
                Default value: SequentialLoad
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `load_distribution_scheme`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_distribution_scheme`')
            vals = set()
            vals.add("Optimal")
            vals.add("SequentialLoad")
            vals.add("UniformLoad")
            vals.add("UniformPLR")
            vals.add("SequentialUniformPLR")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `load_distribution_scheme`'.format(value))

        self._data["Load Distribution Scheme"] = value

    @property
    def pressure_simulation_type(self):
        """Get pressure_simulation_type

        Returns:
            str: the value of `pressure_simulation_type` or None if not set
        """
        return self._data["Pressure Simulation Type"]

    @pressure_simulation_type.setter
    def pressure_simulation_type(self, value="None"):
        """  Corresponds to IDD Field `pressure_simulation_type`

        Args:
            value (str): value for IDD Field `pressure_simulation_type`
                Accepted values are:
                      - PumpPowerCorrection
                      - LoopFlowCorrection
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pressure_simulation_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pressure_simulation_type`')
            vals = set()
            vals.add("PumpPowerCorrection")
            vals.add("LoopFlowCorrection")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pressure_simulation_type`'.format(value))

        self._data["Pressure Simulation Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fluid_type))
        out.append(self._to_str(self.user_defined_fluid_type))
        out.append(self._to_str(self.condenser_equipment_operation_scheme_name))
        out.append(self._to_str(self.condenser_loop_temperature_setpoint_node_name))
        out.append(self._to_str(self.maximum_loop_temperature))
        out.append(self._to_str(self.minimum_loop_temperature))
        out.append(self._to_str(self.maximum_loop_flow_rate))
        out.append(self._to_str(self.minimum_loop_flow_rate))
        out.append(self._to_str(self.condenser_loop_volume))
        out.append(self._to_str(self.condenser_side_inlet_node_name))
        out.append(self._to_str(self.condenser_side_outlet_node_name))
        out.append(self._to_str(self.condenser_side_branch_list_name))
        out.append(self._to_str(self.condenser_side_connector_list_name))
        out.append(self._to_str(self.demand_side_inlet_node_name))
        out.append(self._to_str(self.demand_side_outlet_node_name))
        out.append(self._to_str(self.condenser_demand_side_branch_list_name))
        out.append(self._to_str(self.condenser_demand_side_connector_list_name))
        out.append(self._to_str(self.load_distribution_scheme))
        out.append(self._to_str(self.pressure_simulation_type))
        return ",".join(out)

class PlantEquipmentList(object):
    """ Corresponds to IDD object `PlantEquipmentList`
        List plant equipment in order of operating priority, 1st in list will be used 1st, etc
        Use only plant equipment in this list.
        If no equipment object types and equipment names are specified, then the corresponding
        PlantEquipmentOperation:* object will assume all available plant equipment for the loop
        should be OFF (not operate) within the specified lower/upper limit.
    """
    internal_name = "PlantEquipmentList"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Equipment 1 Object Type"] = None
        self._data["Equipment 1 Name"] = None
        self._data["Equipment 2 Object Type"] = None
        self._data["Equipment 2 Name"] = None
        self._data["Equipment 3 Object Type"] = None
        self._data["Equipment 3 Name"] = None
        self._data["Equipment 4 Object Type"] = None
        self._data["Equipment 4 Name"] = None
        self._data["Equipment 5 Object Type"] = None
        self._data["Equipment 5 Name"] = None
        self._data["Equipment 6 Object Type"] = None
        self._data["Equipment 6 Name"] = None
        self._data["Equipment 7 Object Type"] = None
        self._data["Equipment 7 Name"] = None
        self._data["Equipment 8 Object Type"] = None
        self._data["Equipment 8 Name"] = None
        self._data["Equipment 9 Object Type"] = None
        self._data["Equipment 9 Name"] = None
        self._data["Equipment 10 Object Type"] = None
        self._data["Equipment 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_object_type = None
        else:
            self.equipment_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_name = None
        else:
            self.equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_object_type = None
        else:
            self.equipment_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_name = None
        else:
            self.equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_object_type = None
        else:
            self.equipment_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_name = None
        else:
            self.equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_object_type = None
        else:
            self.equipment_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_name = None
        else:
            self.equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_object_type = None
        else:
            self.equipment_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_name = None
        else:
            self.equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_object_type = None
        else:
            self.equipment_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_name = None
        else:
            self.equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_object_type = None
        else:
            self.equipment_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_name = None
        else:
            self.equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_object_type = None
        else:
            self.equipment_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_name = None
        else:
            self.equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_object_type = None
        else:
            self.equipment_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_name = None
        else:
            self.equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_object_type = None
        else:
            self.equipment_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_name = None
        else:
            self.equipment_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def equipment_1_object_type(self):
        """Get equipment_1_object_type

        Returns:
            str: the value of `equipment_1_object_type` or None if not set
        """
        return self._data["Equipment 1 Object Type"]

    @equipment_1_object_type.setter
    def equipment_1_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_1_object_type`

        Args:
            value (str): value for IDD Field `equipment_1_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_object_type`')

        self._data["Equipment 1 Object Type"] = value

    @property
    def equipment_1_name(self):
        """Get equipment_1_name

        Returns:
            str: the value of `equipment_1_name` or None if not set
        """
        return self._data["Equipment 1 Name"]

    @equipment_1_name.setter
    def equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `equipment_1_name`

        Args:
            value (str): value for IDD Field `equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_name`')

        self._data["Equipment 1 Name"] = value

    @property
    def equipment_2_object_type(self):
        """Get equipment_2_object_type

        Returns:
            str: the value of `equipment_2_object_type` or None if not set
        """
        return self._data["Equipment 2 Object Type"]

    @equipment_2_object_type.setter
    def equipment_2_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_2_object_type`

        Args:
            value (str): value for IDD Field `equipment_2_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_object_type`')

        self._data["Equipment 2 Object Type"] = value

    @property
    def equipment_2_name(self):
        """Get equipment_2_name

        Returns:
            str: the value of `equipment_2_name` or None if not set
        """
        return self._data["Equipment 2 Name"]

    @equipment_2_name.setter
    def equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `equipment_2_name`

        Args:
            value (str): value for IDD Field `equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_name`')

        self._data["Equipment 2 Name"] = value

    @property
    def equipment_3_object_type(self):
        """Get equipment_3_object_type

        Returns:
            str: the value of `equipment_3_object_type` or None if not set
        """
        return self._data["Equipment 3 Object Type"]

    @equipment_3_object_type.setter
    def equipment_3_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_3_object_type`

        Args:
            value (str): value for IDD Field `equipment_3_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_object_type`')

        self._data["Equipment 3 Object Type"] = value

    @property
    def equipment_3_name(self):
        """Get equipment_3_name

        Returns:
            str: the value of `equipment_3_name` or None if not set
        """
        return self._data["Equipment 3 Name"]

    @equipment_3_name.setter
    def equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `equipment_3_name`

        Args:
            value (str): value for IDD Field `equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_name`')

        self._data["Equipment 3 Name"] = value

    @property
    def equipment_4_object_type(self):
        """Get equipment_4_object_type

        Returns:
            str: the value of `equipment_4_object_type` or None if not set
        """
        return self._data["Equipment 4 Object Type"]

    @equipment_4_object_type.setter
    def equipment_4_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_4_object_type`

        Args:
            value (str): value for IDD Field `equipment_4_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_object_type`')

        self._data["Equipment 4 Object Type"] = value

    @property
    def equipment_4_name(self):
        """Get equipment_4_name

        Returns:
            str: the value of `equipment_4_name` or None if not set
        """
        return self._data["Equipment 4 Name"]

    @equipment_4_name.setter
    def equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `equipment_4_name`

        Args:
            value (str): value for IDD Field `equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_name`')

        self._data["Equipment 4 Name"] = value

    @property
    def equipment_5_object_type(self):
        """Get equipment_5_object_type

        Returns:
            str: the value of `equipment_5_object_type` or None if not set
        """
        return self._data["Equipment 5 Object Type"]

    @equipment_5_object_type.setter
    def equipment_5_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_5_object_type`

        Args:
            value (str): value for IDD Field `equipment_5_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_object_type`')

        self._data["Equipment 5 Object Type"] = value

    @property
    def equipment_5_name(self):
        """Get equipment_5_name

        Returns:
            str: the value of `equipment_5_name` or None if not set
        """
        return self._data["Equipment 5 Name"]

    @equipment_5_name.setter
    def equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `equipment_5_name`

        Args:
            value (str): value for IDD Field `equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_name`')

        self._data["Equipment 5 Name"] = value

    @property
    def equipment_6_object_type(self):
        """Get equipment_6_object_type

        Returns:
            str: the value of `equipment_6_object_type` or None if not set
        """
        return self._data["Equipment 6 Object Type"]

    @equipment_6_object_type.setter
    def equipment_6_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_6_object_type`

        Args:
            value (str): value for IDD Field `equipment_6_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_object_type`')

        self._data["Equipment 6 Object Type"] = value

    @property
    def equipment_6_name(self):
        """Get equipment_6_name

        Returns:
            str: the value of `equipment_6_name` or None if not set
        """
        return self._data["Equipment 6 Name"]

    @equipment_6_name.setter
    def equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `equipment_6_name`

        Args:
            value (str): value for IDD Field `equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_name`')

        self._data["Equipment 6 Name"] = value

    @property
    def equipment_7_object_type(self):
        """Get equipment_7_object_type

        Returns:
            str: the value of `equipment_7_object_type` or None if not set
        """
        return self._data["Equipment 7 Object Type"]

    @equipment_7_object_type.setter
    def equipment_7_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_7_object_type`

        Args:
            value (str): value for IDD Field `equipment_7_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_object_type`')

        self._data["Equipment 7 Object Type"] = value

    @property
    def equipment_7_name(self):
        """Get equipment_7_name

        Returns:
            str: the value of `equipment_7_name` or None if not set
        """
        return self._data["Equipment 7 Name"]

    @equipment_7_name.setter
    def equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `equipment_7_name`

        Args:
            value (str): value for IDD Field `equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_name`')

        self._data["Equipment 7 Name"] = value

    @property
    def equipment_8_object_type(self):
        """Get equipment_8_object_type

        Returns:
            str: the value of `equipment_8_object_type` or None if not set
        """
        return self._data["Equipment 8 Object Type"]

    @equipment_8_object_type.setter
    def equipment_8_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_8_object_type`

        Args:
            value (str): value for IDD Field `equipment_8_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_object_type`')

        self._data["Equipment 8 Object Type"] = value

    @property
    def equipment_8_name(self):
        """Get equipment_8_name

        Returns:
            str: the value of `equipment_8_name` or None if not set
        """
        return self._data["Equipment 8 Name"]

    @equipment_8_name.setter
    def equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `equipment_8_name`

        Args:
            value (str): value for IDD Field `equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_name`')

        self._data["Equipment 8 Name"] = value

    @property
    def equipment_9_object_type(self):
        """Get equipment_9_object_type

        Returns:
            str: the value of `equipment_9_object_type` or None if not set
        """
        return self._data["Equipment 9 Object Type"]

    @equipment_9_object_type.setter
    def equipment_9_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_9_object_type`

        Args:
            value (str): value for IDD Field `equipment_9_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_object_type`')

        self._data["Equipment 9 Object Type"] = value

    @property
    def equipment_9_name(self):
        """Get equipment_9_name

        Returns:
            str: the value of `equipment_9_name` or None if not set
        """
        return self._data["Equipment 9 Name"]

    @equipment_9_name.setter
    def equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `equipment_9_name`

        Args:
            value (str): value for IDD Field `equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_name`')

        self._data["Equipment 9 Name"] = value

    @property
    def equipment_10_object_type(self):
        """Get equipment_10_object_type

        Returns:
            str: the value of `equipment_10_object_type` or None if not set
        """
        return self._data["Equipment 10 Object Type"]

    @equipment_10_object_type.setter
    def equipment_10_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_10_object_type`

        Args:
            value (str): value for IDD Field `equipment_10_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_object_type`')

        self._data["Equipment 10 Object Type"] = value

    @property
    def equipment_10_name(self):
        """Get equipment_10_name

        Returns:
            str: the value of `equipment_10_name` or None if not set
        """
        return self._data["Equipment 10 Name"]

    @equipment_10_name.setter
    def equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `equipment_10_name`

        Args:
            value (str): value for IDD Field `equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_name`')

        self._data["Equipment 10 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.equipment_1_object_type))
        out.append(self._to_str(self.equipment_1_name))
        out.append(self._to_str(self.equipment_2_object_type))
        out.append(self._to_str(self.equipment_2_name))
        out.append(self._to_str(self.equipment_3_object_type))
        out.append(self._to_str(self.equipment_3_name))
        out.append(self._to_str(self.equipment_4_object_type))
        out.append(self._to_str(self.equipment_4_name))
        out.append(self._to_str(self.equipment_5_object_type))
        out.append(self._to_str(self.equipment_5_name))
        out.append(self._to_str(self.equipment_6_object_type))
        out.append(self._to_str(self.equipment_6_name))
        out.append(self._to_str(self.equipment_7_object_type))
        out.append(self._to_str(self.equipment_7_name))
        out.append(self._to_str(self.equipment_8_object_type))
        out.append(self._to_str(self.equipment_8_name))
        out.append(self._to_str(self.equipment_9_object_type))
        out.append(self._to_str(self.equipment_9_name))
        out.append(self._to_str(self.equipment_10_object_type))
        out.append(self._to_str(self.equipment_10_name))
        return ",".join(out)

class CondenserEquipmentList(object):
    """ Corresponds to IDD object `CondenserEquipmentList`
        List condenser equipment in order of operating priority, 1st in list will be used 1st, etc
        Use only condenser equipment in this list.
        If no equipment object types and equipment names are specified, then the corresponding
        PlantEquipmentOperation:* object will assume all available condenser equipment for the loop
        should be OFF (not operate) within the specified lower/upper limit.
    """
    internal_name = "CondenserEquipmentList"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for IDD  `CondenserEquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Equipment 1 Object Type"] = None
        self._data["Equipment 1 Name"] = None
        self._data["Equipment 2 Object Type"] = None
        self._data["Equipment 2 Name"] = None
        self._data["Equipment 3 Object Type"] = None
        self._data["Equipment 3 Name"] = None
        self._data["Equipment 4 Object Type"] = None
        self._data["Equipment 4 Name"] = None
        self._data["Equipment 5 Object Type"] = None
        self._data["Equipment 5 Name"] = None
        self._data["Equipment 6 Object Type"] = None
        self._data["Equipment 6 Name"] = None
        self._data["Equipment 7 Object Type"] = None
        self._data["Equipment 7 Name"] = None
        self._data["Equipment 8 Object Type"] = None
        self._data["Equipment 8 Name"] = None
        self._data["Equipment 9 Object Type"] = None
        self._data["Equipment 9 Name"] = None
        self._data["Equipment 10 Object Type"] = None
        self._data["Equipment 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_object_type = None
        else:
            self.equipment_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_name = None
        else:
            self.equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_object_type = None
        else:
            self.equipment_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_name = None
        else:
            self.equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_object_type = None
        else:
            self.equipment_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_name = None
        else:
            self.equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_object_type = None
        else:
            self.equipment_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_name = None
        else:
            self.equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_object_type = None
        else:
            self.equipment_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_name = None
        else:
            self.equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_object_type = None
        else:
            self.equipment_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_name = None
        else:
            self.equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_object_type = None
        else:
            self.equipment_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_name = None
        else:
            self.equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_object_type = None
        else:
            self.equipment_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_name = None
        else:
            self.equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_object_type = None
        else:
            self.equipment_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_name = None
        else:
            self.equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_object_type = None
        else:
            self.equipment_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_name = None
        else:
            self.equipment_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def equipment_1_object_type(self):
        """Get equipment_1_object_type

        Returns:
            str: the value of `equipment_1_object_type` or None if not set
        """
        return self._data["Equipment 1 Object Type"]

    @equipment_1_object_type.setter
    def equipment_1_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_1_object_type`

        Args:
            value (str): value for IDD Field `equipment_1_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_object_type`')

        self._data["Equipment 1 Object Type"] = value

    @property
    def equipment_1_name(self):
        """Get equipment_1_name

        Returns:
            str: the value of `equipment_1_name` or None if not set
        """
        return self._data["Equipment 1 Name"]

    @equipment_1_name.setter
    def equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `equipment_1_name`

        Args:
            value (str): value for IDD Field `equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_name`')

        self._data["Equipment 1 Name"] = value

    @property
    def equipment_2_object_type(self):
        """Get equipment_2_object_type

        Returns:
            str: the value of `equipment_2_object_type` or None if not set
        """
        return self._data["Equipment 2 Object Type"]

    @equipment_2_object_type.setter
    def equipment_2_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_2_object_type`

        Args:
            value (str): value for IDD Field `equipment_2_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_object_type`')

        self._data["Equipment 2 Object Type"] = value

    @property
    def equipment_2_name(self):
        """Get equipment_2_name

        Returns:
            str: the value of `equipment_2_name` or None if not set
        """
        return self._data["Equipment 2 Name"]

    @equipment_2_name.setter
    def equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `equipment_2_name`

        Args:
            value (str): value for IDD Field `equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_name`')

        self._data["Equipment 2 Name"] = value

    @property
    def equipment_3_object_type(self):
        """Get equipment_3_object_type

        Returns:
            str: the value of `equipment_3_object_type` or None if not set
        """
        return self._data["Equipment 3 Object Type"]

    @equipment_3_object_type.setter
    def equipment_3_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_3_object_type`

        Args:
            value (str): value for IDD Field `equipment_3_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_object_type`')

        self._data["Equipment 3 Object Type"] = value

    @property
    def equipment_3_name(self):
        """Get equipment_3_name

        Returns:
            str: the value of `equipment_3_name` or None if not set
        """
        return self._data["Equipment 3 Name"]

    @equipment_3_name.setter
    def equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `equipment_3_name`

        Args:
            value (str): value for IDD Field `equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_name`')

        self._data["Equipment 3 Name"] = value

    @property
    def equipment_4_object_type(self):
        """Get equipment_4_object_type

        Returns:
            str: the value of `equipment_4_object_type` or None if not set
        """
        return self._data["Equipment 4 Object Type"]

    @equipment_4_object_type.setter
    def equipment_4_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_4_object_type`

        Args:
            value (str): value for IDD Field `equipment_4_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_object_type`')

        self._data["Equipment 4 Object Type"] = value

    @property
    def equipment_4_name(self):
        """Get equipment_4_name

        Returns:
            str: the value of `equipment_4_name` or None if not set
        """
        return self._data["Equipment 4 Name"]

    @equipment_4_name.setter
    def equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `equipment_4_name`

        Args:
            value (str): value for IDD Field `equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_name`')

        self._data["Equipment 4 Name"] = value

    @property
    def equipment_5_object_type(self):
        """Get equipment_5_object_type

        Returns:
            str: the value of `equipment_5_object_type` or None if not set
        """
        return self._data["Equipment 5 Object Type"]

    @equipment_5_object_type.setter
    def equipment_5_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_5_object_type`

        Args:
            value (str): value for IDD Field `equipment_5_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_object_type`')

        self._data["Equipment 5 Object Type"] = value

    @property
    def equipment_5_name(self):
        """Get equipment_5_name

        Returns:
            str: the value of `equipment_5_name` or None if not set
        """
        return self._data["Equipment 5 Name"]

    @equipment_5_name.setter
    def equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `equipment_5_name`

        Args:
            value (str): value for IDD Field `equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_name`')

        self._data["Equipment 5 Name"] = value

    @property
    def equipment_6_object_type(self):
        """Get equipment_6_object_type

        Returns:
            str: the value of `equipment_6_object_type` or None if not set
        """
        return self._data["Equipment 6 Object Type"]

    @equipment_6_object_type.setter
    def equipment_6_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_6_object_type`

        Args:
            value (str): value for IDD Field `equipment_6_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_object_type`')

        self._data["Equipment 6 Object Type"] = value

    @property
    def equipment_6_name(self):
        """Get equipment_6_name

        Returns:
            str: the value of `equipment_6_name` or None if not set
        """
        return self._data["Equipment 6 Name"]

    @equipment_6_name.setter
    def equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `equipment_6_name`

        Args:
            value (str): value for IDD Field `equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_name`')

        self._data["Equipment 6 Name"] = value

    @property
    def equipment_7_object_type(self):
        """Get equipment_7_object_type

        Returns:
            str: the value of `equipment_7_object_type` or None if not set
        """
        return self._data["Equipment 7 Object Type"]

    @equipment_7_object_type.setter
    def equipment_7_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_7_object_type`

        Args:
            value (str): value for IDD Field `equipment_7_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_object_type`')

        self._data["Equipment 7 Object Type"] = value

    @property
    def equipment_7_name(self):
        """Get equipment_7_name

        Returns:
            str: the value of `equipment_7_name` or None if not set
        """
        return self._data["Equipment 7 Name"]

    @equipment_7_name.setter
    def equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `equipment_7_name`

        Args:
            value (str): value for IDD Field `equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_name`')

        self._data["Equipment 7 Name"] = value

    @property
    def equipment_8_object_type(self):
        """Get equipment_8_object_type

        Returns:
            str: the value of `equipment_8_object_type` or None if not set
        """
        return self._data["Equipment 8 Object Type"]

    @equipment_8_object_type.setter
    def equipment_8_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_8_object_type`

        Args:
            value (str): value for IDD Field `equipment_8_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_object_type`')

        self._data["Equipment 8 Object Type"] = value

    @property
    def equipment_8_name(self):
        """Get equipment_8_name

        Returns:
            str: the value of `equipment_8_name` or None if not set
        """
        return self._data["Equipment 8 Name"]

    @equipment_8_name.setter
    def equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `equipment_8_name`

        Args:
            value (str): value for IDD Field `equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_name`')

        self._data["Equipment 8 Name"] = value

    @property
    def equipment_9_object_type(self):
        """Get equipment_9_object_type

        Returns:
            str: the value of `equipment_9_object_type` or None if not set
        """
        return self._data["Equipment 9 Object Type"]

    @equipment_9_object_type.setter
    def equipment_9_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_9_object_type`

        Args:
            value (str): value for IDD Field `equipment_9_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_object_type`')

        self._data["Equipment 9 Object Type"] = value

    @property
    def equipment_9_name(self):
        """Get equipment_9_name

        Returns:
            str: the value of `equipment_9_name` or None if not set
        """
        return self._data["Equipment 9 Name"]

    @equipment_9_name.setter
    def equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `equipment_9_name`

        Args:
            value (str): value for IDD Field `equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_name`')

        self._data["Equipment 9 Name"] = value

    @property
    def equipment_10_object_type(self):
        """Get equipment_10_object_type

        Returns:
            str: the value of `equipment_10_object_type` or None if not set
        """
        return self._data["Equipment 10 Object Type"]

    @equipment_10_object_type.setter
    def equipment_10_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_10_object_type`

        Args:
            value (str): value for IDD Field `equipment_10_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_object_type`')

        self._data["Equipment 10 Object Type"] = value

    @property
    def equipment_10_name(self):
        """Get equipment_10_name

        Returns:
            str: the value of `equipment_10_name` or None if not set
        """
        return self._data["Equipment 10 Name"]

    @equipment_10_name.setter
    def equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `equipment_10_name`

        Args:
            value (str): value for IDD Field `equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_name`')

        self._data["Equipment 10 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.equipment_1_object_type))
        out.append(self._to_str(self.equipment_1_name))
        out.append(self._to_str(self.equipment_2_object_type))
        out.append(self._to_str(self.equipment_2_name))
        out.append(self._to_str(self.equipment_3_object_type))
        out.append(self._to_str(self.equipment_3_name))
        out.append(self._to_str(self.equipment_4_object_type))
        out.append(self._to_str(self.equipment_4_name))
        out.append(self._to_str(self.equipment_5_object_type))
        out.append(self._to_str(self.equipment_5_name))
        out.append(self._to_str(self.equipment_6_object_type))
        out.append(self._to_str(self.equipment_6_name))
        out.append(self._to_str(self.equipment_7_object_type))
        out.append(self._to_str(self.equipment_7_name))
        out.append(self._to_str(self.equipment_8_object_type))
        out.append(self._to_str(self.equipment_8_name))
        out.append(self._to_str(self.equipment_9_object_type))
        out.append(self._to_str(self.equipment_9_name))
        out.append(self._to_str(self.equipment_10_object_type))
        out.append(self._to_str(self.equipment_10_name))
        return ",".join(out)

class PlantEquipmentOperationUncontrolled(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:Uncontrolled`
        Plant equipment operation scheme for uncontrolled operation. Specifies a group of
        equipment that runs if the loop is active, unless turned off by the loop flow resolver
        to maintain continuity in the fluid loop.
    """
    internal_name = "PlantEquipmentOperation:Uncontrolled"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:Uncontrolled`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_list_name = None
        else:
            self.equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def equipment_list_name(self):
        """Get equipment_list_name

        Returns:
            str: the value of `equipment_list_name` or None if not set
        """
        return self._data["Equipment List Name"]

    @equipment_list_name.setter
    def equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `equipment_list_name`

        Args:
            value (str): value for IDD Field `equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_list_name`')

        self._data["Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationCoolingLoad(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:CoolingLoad`
        Plant equipment operation scheme for cooling load range operation. Specifies one or
        more groups of equipment which are available to operate for successive cooling load
        ranges.
    """
    internal_name = "PlantEquipmentOperation:CoolingLoad"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:CoolingLoad`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Load Range 1 Lower Limit"] = None
        self._data["Load Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Load Range 2 Lower Limit"] = None
        self._data["Load Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Load Range 3 Lower Limit"] = None
        self._data["Load Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Load Range 4 Lower Limit"] = None
        self._data["Load Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Load Range 5 Lower Limit"] = None
        self._data["Load Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Load Range 6 Lower Limit"] = None
        self._data["Load Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Load Range 7 Lower Limit"] = None
        self._data["Load Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Load Range 8 Lower Limit"] = None
        self._data["Load Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Load Range 9 Lower Limit"] = None
        self._data["Load Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Load Range 10 Lower Limit"] = None
        self._data["Load Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_1_lower_limit = None
        else:
            self.load_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_1_upper_limit = None
        else:
            self.load_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_2_lower_limit = None
        else:
            self.load_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_2_upper_limit = None
        else:
            self.load_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_3_lower_limit = None
        else:
            self.load_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_3_upper_limit = None
        else:
            self.load_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_4_lower_limit = None
        else:
            self.load_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_4_upper_limit = None
        else:
            self.load_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_5_lower_limit = None
        else:
            self.load_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_5_upper_limit = None
        else:
            self.load_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_6_lower_limit = None
        else:
            self.load_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_6_upper_limit = None
        else:
            self.load_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_7_lower_limit = None
        else:
            self.load_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_7_upper_limit = None
        else:
            self.load_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_8_lower_limit = None
        else:
            self.load_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_8_upper_limit = None
        else:
            self.load_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_9_lower_limit = None
        else:
            self.load_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_9_upper_limit = None
        else:
            self.load_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_10_lower_limit = None
        else:
            self.load_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_10_upper_limit = None
        else:
            self.load_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def load_range_1_lower_limit(self):
        """Get load_range_1_lower_limit

        Returns:
            float: the value of `load_range_1_lower_limit` or None if not set
        """
        return self._data["Load Range 1 Lower Limit"]

    @load_range_1_lower_limit.setter
    def load_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_1_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_1_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_1_lower_limit`')

        self._data["Load Range 1 Lower Limit"] = value

    @property
    def load_range_1_upper_limit(self):
        """Get load_range_1_upper_limit

        Returns:
            float: the value of `load_range_1_upper_limit` or None if not set
        """
        return self._data["Load Range 1 Upper Limit"]

    @load_range_1_upper_limit.setter
    def load_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_1_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_1_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_1_upper_limit`')

        self._data["Load Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def load_range_2_lower_limit(self):
        """Get load_range_2_lower_limit

        Returns:
            float: the value of `load_range_2_lower_limit` or None if not set
        """
        return self._data["Load Range 2 Lower Limit"]

    @load_range_2_lower_limit.setter
    def load_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_2_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_2_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_2_lower_limit`')

        self._data["Load Range 2 Lower Limit"] = value

    @property
    def load_range_2_upper_limit(self):
        """Get load_range_2_upper_limit

        Returns:
            float: the value of `load_range_2_upper_limit` or None if not set
        """
        return self._data["Load Range 2 Upper Limit"]

    @load_range_2_upper_limit.setter
    def load_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_2_upper_limit`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_2_upper_limit`'.format(value))

        self._data["Load Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def load_range_3_lower_limit(self):
        """Get load_range_3_lower_limit

        Returns:
            float: the value of `load_range_3_lower_limit` or None if not set
        """
        return self._data["Load Range 3 Lower Limit"]

    @load_range_3_lower_limit.setter
    def load_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_3_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_3_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_3_lower_limit`')

        self._data["Load Range 3 Lower Limit"] = value

    @property
    def load_range_3_upper_limit(self):
        """Get load_range_3_upper_limit

        Returns:
            float: the value of `load_range_3_upper_limit` or None if not set
        """
        return self._data["Load Range 3 Upper Limit"]

    @load_range_3_upper_limit.setter
    def load_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_3_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_3_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_3_upper_limit`')

        self._data["Load Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def load_range_4_lower_limit(self):
        """Get load_range_4_lower_limit

        Returns:
            float: the value of `load_range_4_lower_limit` or None if not set
        """
        return self._data["Load Range 4 Lower Limit"]

    @load_range_4_lower_limit.setter
    def load_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_4_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_4_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_4_lower_limit`')

        self._data["Load Range 4 Lower Limit"] = value

    @property
    def load_range_4_upper_limit(self):
        """Get load_range_4_upper_limit

        Returns:
            float: the value of `load_range_4_upper_limit` or None if not set
        """
        return self._data["Load Range 4 Upper Limit"]

    @load_range_4_upper_limit.setter
    def load_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_4_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_4_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_4_upper_limit`')

        self._data["Load Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def load_range_5_lower_limit(self):
        """Get load_range_5_lower_limit

        Returns:
            float: the value of `load_range_5_lower_limit` or None if not set
        """
        return self._data["Load Range 5 Lower Limit"]

    @load_range_5_lower_limit.setter
    def load_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_5_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_5_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_5_lower_limit`')

        self._data["Load Range 5 Lower Limit"] = value

    @property
    def load_range_5_upper_limit(self):
        """Get load_range_5_upper_limit

        Returns:
            float: the value of `load_range_5_upper_limit` or None if not set
        """
        return self._data["Load Range 5 Upper Limit"]

    @load_range_5_upper_limit.setter
    def load_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_5_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_5_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_5_upper_limit`')

        self._data["Load Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def load_range_6_lower_limit(self):
        """Get load_range_6_lower_limit

        Returns:
            float: the value of `load_range_6_lower_limit` or None if not set
        """
        return self._data["Load Range 6 Lower Limit"]

    @load_range_6_lower_limit.setter
    def load_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_6_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_6_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_6_lower_limit`')

        self._data["Load Range 6 Lower Limit"] = value

    @property
    def load_range_6_upper_limit(self):
        """Get load_range_6_upper_limit

        Returns:
            float: the value of `load_range_6_upper_limit` or None if not set
        """
        return self._data["Load Range 6 Upper Limit"]

    @load_range_6_upper_limit.setter
    def load_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_6_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_6_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_6_upper_limit`')

        self._data["Load Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def load_range_7_lower_limit(self):
        """Get load_range_7_lower_limit

        Returns:
            float: the value of `load_range_7_lower_limit` or None if not set
        """
        return self._data["Load Range 7 Lower Limit"]

    @load_range_7_lower_limit.setter
    def load_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_7_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_7_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_7_lower_limit`')

        self._data["Load Range 7 Lower Limit"] = value

    @property
    def load_range_7_upper_limit(self):
        """Get load_range_7_upper_limit

        Returns:
            float: the value of `load_range_7_upper_limit` or None if not set
        """
        return self._data["Load Range 7 Upper Limit"]

    @load_range_7_upper_limit.setter
    def load_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_7_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_7_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_7_upper_limit`')

        self._data["Load Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def load_range_8_lower_limit(self):
        """Get load_range_8_lower_limit

        Returns:
            float: the value of `load_range_8_lower_limit` or None if not set
        """
        return self._data["Load Range 8 Lower Limit"]

    @load_range_8_lower_limit.setter
    def load_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_8_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_8_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_8_lower_limit`')

        self._data["Load Range 8 Lower Limit"] = value

    @property
    def load_range_8_upper_limit(self):
        """Get load_range_8_upper_limit

        Returns:
            float: the value of `load_range_8_upper_limit` or None if not set
        """
        return self._data["Load Range 8 Upper Limit"]

    @load_range_8_upper_limit.setter
    def load_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_8_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_8_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_8_upper_limit`')

        self._data["Load Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def load_range_9_lower_limit(self):
        """Get load_range_9_lower_limit

        Returns:
            float: the value of `load_range_9_lower_limit` or None if not set
        """
        return self._data["Load Range 9 Lower Limit"]

    @load_range_9_lower_limit.setter
    def load_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_9_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_9_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_9_lower_limit`')

        self._data["Load Range 9 Lower Limit"] = value

    @property
    def load_range_9_upper_limit(self):
        """Get load_range_9_upper_limit

        Returns:
            float: the value of `load_range_9_upper_limit` or None if not set
        """
        return self._data["Load Range 9 Upper Limit"]

    @load_range_9_upper_limit.setter
    def load_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_9_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_9_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_9_upper_limit`')

        self._data["Load Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def load_range_10_lower_limit(self):
        """Get load_range_10_lower_limit

        Returns:
            float: the value of `load_range_10_lower_limit` or None if not set
        """
        return self._data["Load Range 10 Lower Limit"]

    @load_range_10_lower_limit.setter
    def load_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_10_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_10_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_10_lower_limit`')

        self._data["Load Range 10 Lower Limit"] = value

    @property
    def load_range_10_upper_limit(self):
        """Get load_range_10_upper_limit

        Returns:
            float: the value of `load_range_10_upper_limit` or None if not set
        """
        return self._data["Load Range 10 Upper Limit"]

    @load_range_10_upper_limit.setter
    def load_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_10_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_10_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_10_upper_limit`')

        self._data["Load Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.load_range_1_lower_limit))
        out.append(self._to_str(self.load_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.load_range_2_lower_limit))
        out.append(self._to_str(self.load_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.load_range_3_lower_limit))
        out.append(self._to_str(self.load_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.load_range_4_lower_limit))
        out.append(self._to_str(self.load_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.load_range_5_lower_limit))
        out.append(self._to_str(self.load_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.load_range_6_lower_limit))
        out.append(self._to_str(self.load_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.load_range_7_lower_limit))
        out.append(self._to_str(self.load_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.load_range_8_lower_limit))
        out.append(self._to_str(self.load_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.load_range_9_lower_limit))
        out.append(self._to_str(self.load_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.load_range_10_lower_limit))
        out.append(self._to_str(self.load_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationHeatingLoad(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:HeatingLoad`
        Plant equipment operation scheme for heating load range operation. Specifies one or
        more groups of equipment which are available to operate for successive heating load
        ranges.
    """
    internal_name = "PlantEquipmentOperation:HeatingLoad"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:HeatingLoad`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Load Range 1 Lower Limit"] = None
        self._data["Load Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Load Range 2 Lower Limit"] = None
        self._data["Load Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Load Range 3 Lower Limit"] = None
        self._data["Load Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Load Range 4 Lower Limit"] = None
        self._data["Load Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Load Range 5 Lower Limit"] = None
        self._data["Load Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Load Range 6 Lower Limit"] = None
        self._data["Load Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Load Range 7 Lower Limit"] = None
        self._data["Load Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Load Range 8 Lower Limit"] = None
        self._data["Load Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Load Range 9 Lower Limit"] = None
        self._data["Load Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Load Range 10 Lower Limit"] = None
        self._data["Load Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_1_lower_limit = None
        else:
            self.load_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_1_upper_limit = None
        else:
            self.load_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_2_lower_limit = None
        else:
            self.load_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_2_upper_limit = None
        else:
            self.load_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_3_lower_limit = None
        else:
            self.load_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_3_upper_limit = None
        else:
            self.load_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_4_lower_limit = None
        else:
            self.load_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_4_upper_limit = None
        else:
            self.load_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_5_lower_limit = None
        else:
            self.load_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_5_upper_limit = None
        else:
            self.load_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_6_lower_limit = None
        else:
            self.load_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_6_upper_limit = None
        else:
            self.load_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_7_lower_limit = None
        else:
            self.load_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_7_upper_limit = None
        else:
            self.load_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_8_lower_limit = None
        else:
            self.load_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_8_upper_limit = None
        else:
            self.load_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_9_lower_limit = None
        else:
            self.load_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_9_upper_limit = None
        else:
            self.load_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_10_lower_limit = None
        else:
            self.load_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.load_range_10_upper_limit = None
        else:
            self.load_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def load_range_1_lower_limit(self):
        """Get load_range_1_lower_limit

        Returns:
            float: the value of `load_range_1_lower_limit` or None if not set
        """
        return self._data["Load Range 1 Lower Limit"]

    @load_range_1_lower_limit.setter
    def load_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_1_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_1_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_1_lower_limit`')

        self._data["Load Range 1 Lower Limit"] = value

    @property
    def load_range_1_upper_limit(self):
        """Get load_range_1_upper_limit

        Returns:
            float: the value of `load_range_1_upper_limit` or None if not set
        """
        return self._data["Load Range 1 Upper Limit"]

    @load_range_1_upper_limit.setter
    def load_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_1_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_1_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_1_upper_limit`')

        self._data["Load Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def load_range_2_lower_limit(self):
        """Get load_range_2_lower_limit

        Returns:
            float: the value of `load_range_2_lower_limit` or None if not set
        """
        return self._data["Load Range 2 Lower Limit"]

    @load_range_2_lower_limit.setter
    def load_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_2_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_2_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_2_lower_limit`')

        self._data["Load Range 2 Lower Limit"] = value

    @property
    def load_range_2_upper_limit(self):
        """Get load_range_2_upper_limit

        Returns:
            float: the value of `load_range_2_upper_limit` or None if not set
        """
        return self._data["Load Range 2 Upper Limit"]

    @load_range_2_upper_limit.setter
    def load_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_2_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_2_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_2_upper_limit`')

        self._data["Load Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def load_range_3_lower_limit(self):
        """Get load_range_3_lower_limit

        Returns:
            float: the value of `load_range_3_lower_limit` or None if not set
        """
        return self._data["Load Range 3 Lower Limit"]

    @load_range_3_lower_limit.setter
    def load_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_3_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_3_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_3_lower_limit`')

        self._data["Load Range 3 Lower Limit"] = value

    @property
    def load_range_3_upper_limit(self):
        """Get load_range_3_upper_limit

        Returns:
            float: the value of `load_range_3_upper_limit` or None if not set
        """
        return self._data["Load Range 3 Upper Limit"]

    @load_range_3_upper_limit.setter
    def load_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_3_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_3_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_3_upper_limit`')

        self._data["Load Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def load_range_4_lower_limit(self):
        """Get load_range_4_lower_limit

        Returns:
            float: the value of `load_range_4_lower_limit` or None if not set
        """
        return self._data["Load Range 4 Lower Limit"]

    @load_range_4_lower_limit.setter
    def load_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_4_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_4_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_4_lower_limit`')

        self._data["Load Range 4 Lower Limit"] = value

    @property
    def load_range_4_upper_limit(self):
        """Get load_range_4_upper_limit

        Returns:
            float: the value of `load_range_4_upper_limit` or None if not set
        """
        return self._data["Load Range 4 Upper Limit"]

    @load_range_4_upper_limit.setter
    def load_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_4_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_4_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_4_upper_limit`')

        self._data["Load Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def load_range_5_lower_limit(self):
        """Get load_range_5_lower_limit

        Returns:
            float: the value of `load_range_5_lower_limit` or None if not set
        """
        return self._data["Load Range 5 Lower Limit"]

    @load_range_5_lower_limit.setter
    def load_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_5_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_5_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_5_lower_limit`')

        self._data["Load Range 5 Lower Limit"] = value

    @property
    def load_range_5_upper_limit(self):
        """Get load_range_5_upper_limit

        Returns:
            float: the value of `load_range_5_upper_limit` or None if not set
        """
        return self._data["Load Range 5 Upper Limit"]

    @load_range_5_upper_limit.setter
    def load_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_5_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_5_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_5_upper_limit`')

        self._data["Load Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def load_range_6_lower_limit(self):
        """Get load_range_6_lower_limit

        Returns:
            float: the value of `load_range_6_lower_limit` or None if not set
        """
        return self._data["Load Range 6 Lower Limit"]

    @load_range_6_lower_limit.setter
    def load_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_6_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_6_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_6_lower_limit`')

        self._data["Load Range 6 Lower Limit"] = value

    @property
    def load_range_6_upper_limit(self):
        """Get load_range_6_upper_limit

        Returns:
            float: the value of `load_range_6_upper_limit` or None if not set
        """
        return self._data["Load Range 6 Upper Limit"]

    @load_range_6_upper_limit.setter
    def load_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_6_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_6_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_6_upper_limit`')

        self._data["Load Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def load_range_7_lower_limit(self):
        """Get load_range_7_lower_limit

        Returns:
            float: the value of `load_range_7_lower_limit` or None if not set
        """
        return self._data["Load Range 7 Lower Limit"]

    @load_range_7_lower_limit.setter
    def load_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_7_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_7_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_7_lower_limit`')

        self._data["Load Range 7 Lower Limit"] = value

    @property
    def load_range_7_upper_limit(self):
        """Get load_range_7_upper_limit

        Returns:
            float: the value of `load_range_7_upper_limit` or None if not set
        """
        return self._data["Load Range 7 Upper Limit"]

    @load_range_7_upper_limit.setter
    def load_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_7_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_7_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_7_upper_limit`')

        self._data["Load Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def load_range_8_lower_limit(self):
        """Get load_range_8_lower_limit

        Returns:
            float: the value of `load_range_8_lower_limit` or None if not set
        """
        return self._data["Load Range 8 Lower Limit"]

    @load_range_8_lower_limit.setter
    def load_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_8_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_8_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_8_lower_limit`')

        self._data["Load Range 8 Lower Limit"] = value

    @property
    def load_range_8_upper_limit(self):
        """Get load_range_8_upper_limit

        Returns:
            float: the value of `load_range_8_upper_limit` or None if not set
        """
        return self._data["Load Range 8 Upper Limit"]

    @load_range_8_upper_limit.setter
    def load_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_8_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_8_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_8_upper_limit`')

        self._data["Load Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def load_range_9_lower_limit(self):
        """Get load_range_9_lower_limit

        Returns:
            float: the value of `load_range_9_lower_limit` or None if not set
        """
        return self._data["Load Range 9 Lower Limit"]

    @load_range_9_lower_limit.setter
    def load_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_9_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_9_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_9_lower_limit`')

        self._data["Load Range 9 Lower Limit"] = value

    @property
    def load_range_9_upper_limit(self):
        """Get load_range_9_upper_limit

        Returns:
            float: the value of `load_range_9_upper_limit` or None if not set
        """
        return self._data["Load Range 9 Upper Limit"]

    @load_range_9_upper_limit.setter
    def load_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_9_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_9_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_9_upper_limit`')

        self._data["Load Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def load_range_10_lower_limit(self):
        """Get load_range_10_lower_limit

        Returns:
            float: the value of `load_range_10_lower_limit` or None if not set
        """
        return self._data["Load Range 10 Lower Limit"]

    @load_range_10_lower_limit.setter
    def load_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `load_range_10_lower_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_10_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_10_lower_limit`')

        self._data["Load Range 10 Lower Limit"] = value

    @property
    def load_range_10_upper_limit(self):
        """Get load_range_10_upper_limit

        Returns:
            float: the value of `load_range_10_upper_limit` or None if not set
        """
        return self._data["Load Range 10 Upper Limit"]

    @load_range_10_upper_limit.setter
    def load_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `load_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `load_range_10_upper_limit`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_range_10_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `load_range_10_upper_limit`')

        self._data["Load Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.load_range_1_lower_limit))
        out.append(self._to_str(self.load_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.load_range_2_lower_limit))
        out.append(self._to_str(self.load_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.load_range_3_lower_limit))
        out.append(self._to_str(self.load_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.load_range_4_lower_limit))
        out.append(self._to_str(self.load_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.load_range_5_lower_limit))
        out.append(self._to_str(self.load_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.load_range_6_lower_limit))
        out.append(self._to_str(self.load_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.load_range_7_lower_limit))
        out.append(self._to_str(self.load_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.load_range_8_lower_limit))
        out.append(self._to_str(self.load_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.load_range_9_lower_limit))
        out.append(self._to_str(self.load_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.load_range_10_lower_limit))
        out.append(self._to_str(self.load_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorDryBulb(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorDryBulb`
        Plant equipment operation scheme for outdoor dry-bulb temperature range operation.
        Specifies one or more groups of equipment which are available to operate for
        successive outdoor dry-bulb temperature ranges.
    """
    internal_name = "PlantEquipmentOperation:OutdoorDryBulb"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorDryBulb`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Dry-Bulb Temperature Range 1 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 2 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 3 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 4 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 5 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 6 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 7 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 8 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 9 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Range 10 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_1_lower_limit = None
        else:
            self.drybulb_temperature_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_1_upper_limit = None
        else:
            self.drybulb_temperature_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_2_lower_limit = None
        else:
            self.drybulb_temperature_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_2_upper_limit = None
        else:
            self.drybulb_temperature_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_3_lower_limit = None
        else:
            self.drybulb_temperature_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_3_upper_limit = None
        else:
            self.drybulb_temperature_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_4_lower_limit = None
        else:
            self.drybulb_temperature_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_4_upper_limit = None
        else:
            self.drybulb_temperature_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_5_lower_limit = None
        else:
            self.drybulb_temperature_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_5_upper_limit = None
        else:
            self.drybulb_temperature_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_6_lower_limit = None
        else:
            self.drybulb_temperature_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_6_upper_limit = None
        else:
            self.drybulb_temperature_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_7_lower_limit = None
        else:
            self.drybulb_temperature_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_7_upper_limit = None
        else:
            self.drybulb_temperature_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_8_lower_limit = None
        else:
            self.drybulb_temperature_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_8_upper_limit = None
        else:
            self.drybulb_temperature_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_9_lower_limit = None
        else:
            self.drybulb_temperature_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_9_upper_limit = None
        else:
            self.drybulb_temperature_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_10_lower_limit = None
        else:
            self.drybulb_temperature_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_range_10_upper_limit = None
        else:
            self.drybulb_temperature_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def drybulb_temperature_range_1_lower_limit(self):
        """Get drybulb_temperature_range_1_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_1_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 1 Lower Limit"]

    @drybulb_temperature_range_1_lower_limit.setter
    def drybulb_temperature_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_1_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_1_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_1_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_1_lower_limit`')

        self._data["Dry-Bulb Temperature Range 1 Lower Limit"] = value

    @property
    def drybulb_temperature_range_1_upper_limit(self):
        """Get drybulb_temperature_range_1_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_1_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 1 Upper Limit"]

    @drybulb_temperature_range_1_upper_limit.setter
    def drybulb_temperature_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_1_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_1_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_1_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_1_upper_limit`')

        self._data["Dry-Bulb Temperature Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_2_lower_limit(self):
        """Get drybulb_temperature_range_2_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_2_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 2 Lower Limit"]

    @drybulb_temperature_range_2_lower_limit.setter
    def drybulb_temperature_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_2_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_2_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_2_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_2_lower_limit`')

        self._data["Dry-Bulb Temperature Range 2 Lower Limit"] = value

    @property
    def drybulb_temperature_range_2_upper_limit(self):
        """Get drybulb_temperature_range_2_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_2_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 2 Upper Limit"]

    @drybulb_temperature_range_2_upper_limit.setter
    def drybulb_temperature_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_2_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_2_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_2_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_2_upper_limit`')

        self._data["Dry-Bulb Temperature Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_3_lower_limit(self):
        """Get drybulb_temperature_range_3_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_3_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 3 Lower Limit"]

    @drybulb_temperature_range_3_lower_limit.setter
    def drybulb_temperature_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_3_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_3_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_3_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_3_lower_limit`')

        self._data["Dry-Bulb Temperature Range 3 Lower Limit"] = value

    @property
    def drybulb_temperature_range_3_upper_limit(self):
        """Get drybulb_temperature_range_3_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_3_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 3 Upper Limit"]

    @drybulb_temperature_range_3_upper_limit.setter
    def drybulb_temperature_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_3_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_3_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_3_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_3_upper_limit`')

        self._data["Dry-Bulb Temperature Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_4_lower_limit(self):
        """Get drybulb_temperature_range_4_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_4_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 4 Lower Limit"]

    @drybulb_temperature_range_4_lower_limit.setter
    def drybulb_temperature_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_4_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_4_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_4_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_4_lower_limit`')

        self._data["Dry-Bulb Temperature Range 4 Lower Limit"] = value

    @property
    def drybulb_temperature_range_4_upper_limit(self):
        """Get drybulb_temperature_range_4_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_4_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 4 Upper Limit"]

    @drybulb_temperature_range_4_upper_limit.setter
    def drybulb_temperature_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_4_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_4_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_4_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_4_upper_limit`')

        self._data["Dry-Bulb Temperature Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_5_lower_limit(self):
        """Get drybulb_temperature_range_5_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_5_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 5 Lower Limit"]

    @drybulb_temperature_range_5_lower_limit.setter
    def drybulb_temperature_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_5_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_5_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_5_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_5_lower_limit`')

        self._data["Dry-Bulb Temperature Range 5 Lower Limit"] = value

    @property
    def drybulb_temperature_range_5_upper_limit(self):
        """Get drybulb_temperature_range_5_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_5_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 5 Upper Limit"]

    @drybulb_temperature_range_5_upper_limit.setter
    def drybulb_temperature_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_5_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_5_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_5_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_5_upper_limit`')

        self._data["Dry-Bulb Temperature Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_6_lower_limit(self):
        """Get drybulb_temperature_range_6_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_6_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 6 Lower Limit"]

    @drybulb_temperature_range_6_lower_limit.setter
    def drybulb_temperature_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_6_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_6_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_6_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_6_lower_limit`')

        self._data["Dry-Bulb Temperature Range 6 Lower Limit"] = value

    @property
    def drybulb_temperature_range_6_upper_limit(self):
        """Get drybulb_temperature_range_6_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_6_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 6 Upper Limit"]

    @drybulb_temperature_range_6_upper_limit.setter
    def drybulb_temperature_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_6_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_6_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_6_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_6_upper_limit`')

        self._data["Dry-Bulb Temperature Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_7_lower_limit(self):
        """Get drybulb_temperature_range_7_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_7_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 7 Lower Limit"]

    @drybulb_temperature_range_7_lower_limit.setter
    def drybulb_temperature_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_7_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_7_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_7_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_7_lower_limit`')

        self._data["Dry-Bulb Temperature Range 7 Lower Limit"] = value

    @property
    def drybulb_temperature_range_7_upper_limit(self):
        """Get drybulb_temperature_range_7_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_7_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 7 Upper Limit"]

    @drybulb_temperature_range_7_upper_limit.setter
    def drybulb_temperature_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_7_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_7_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_7_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_7_upper_limit`')

        self._data["Dry-Bulb Temperature Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_8_lower_limit(self):
        """Get drybulb_temperature_range_8_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_8_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 8 Lower Limit"]

    @drybulb_temperature_range_8_lower_limit.setter
    def drybulb_temperature_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_8_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_8_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_8_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_8_lower_limit`')

        self._data["Dry-Bulb Temperature Range 8 Lower Limit"] = value

    @property
    def drybulb_temperature_range_8_upper_limit(self):
        """Get drybulb_temperature_range_8_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_8_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 8 Upper Limit"]

    @drybulb_temperature_range_8_upper_limit.setter
    def drybulb_temperature_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_8_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_8_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_8_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_8_upper_limit`')

        self._data["Dry-Bulb Temperature Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_9_lower_limit(self):
        """Get drybulb_temperature_range_9_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_9_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 9 Lower Limit"]

    @drybulb_temperature_range_9_lower_limit.setter
    def drybulb_temperature_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_9_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_9_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_9_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_9_lower_limit`')

        self._data["Dry-Bulb Temperature Range 9 Lower Limit"] = value

    @property
    def drybulb_temperature_range_9_upper_limit(self):
        """Get drybulb_temperature_range_9_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_9_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 9 Upper Limit"]

    @drybulb_temperature_range_9_upper_limit.setter
    def drybulb_temperature_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_9_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_9_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_9_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_9_upper_limit`')

        self._data["Dry-Bulb Temperature Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def drybulb_temperature_range_10_lower_limit(self):
        """Get drybulb_temperature_range_10_lower_limit

        Returns:
            float: the value of `drybulb_temperature_range_10_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 10 Lower Limit"]

    @drybulb_temperature_range_10_lower_limit.setter
    def drybulb_temperature_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_10_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_10_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_10_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_10_lower_limit`')

        self._data["Dry-Bulb Temperature Range 10 Lower Limit"] = value

    @property
    def drybulb_temperature_range_10_upper_limit(self):
        """Get drybulb_temperature_range_10_upper_limit

        Returns:
            float: the value of `drybulb_temperature_range_10_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Range 10 Upper Limit"]

    @drybulb_temperature_range_10_upper_limit.setter
    def drybulb_temperature_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_range_10_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_range_10_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `drybulb_temperature_range_10_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `drybulb_temperature_range_10_upper_limit`')

        self._data["Dry-Bulb Temperature Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.drybulb_temperature_range_1_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_2_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_3_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_4_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_5_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_6_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_7_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_8_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_9_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_range_10_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorWetBulb(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorWetBulb`
        Plant equipment operation scheme for outdoor wet-bulb temperature range operation.
        Specifies one or more groups of equipment which are available to operate for
        successive outdoor wet-bulb temperature ranges.
    """
    internal_name = "PlantEquipmentOperation:OutdoorWetBulb"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorWetBulb`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Wet-Bulb Temperature Range 1 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 2 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 3 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 4 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 5 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 6 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 7 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 8 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 9 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Range 10 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_1_lower_limit = None
        else:
            self.wetbulb_temperature_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_1_upper_limit = None
        else:
            self.wetbulb_temperature_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_2_lower_limit = None
        else:
            self.wetbulb_temperature_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_2_upper_limit = None
        else:
            self.wetbulb_temperature_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_3_lower_limit = None
        else:
            self.wetbulb_temperature_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_3_upper_limit = None
        else:
            self.wetbulb_temperature_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_4_lower_limit = None
        else:
            self.wetbulb_temperature_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_4_upper_limit = None
        else:
            self.wetbulb_temperature_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_5_lower_limit = None
        else:
            self.wetbulb_temperature_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_5_upper_limit = None
        else:
            self.wetbulb_temperature_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_6_lower_limit = None
        else:
            self.wetbulb_temperature_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_6_upper_limit = None
        else:
            self.wetbulb_temperature_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_7_lower_limit = None
        else:
            self.wetbulb_temperature_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_7_upper_limit = None
        else:
            self.wetbulb_temperature_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_8_lower_limit = None
        else:
            self.wetbulb_temperature_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_8_upper_limit = None
        else:
            self.wetbulb_temperature_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_9_lower_limit = None
        else:
            self.wetbulb_temperature_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_9_upper_limit = None
        else:
            self.wetbulb_temperature_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_10_lower_limit = None
        else:
            self.wetbulb_temperature_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_range_10_upper_limit = None
        else:
            self.wetbulb_temperature_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def wetbulb_temperature_range_1_lower_limit(self):
        """Get wetbulb_temperature_range_1_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_1_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 1 Lower Limit"]

    @wetbulb_temperature_range_1_lower_limit.setter
    def wetbulb_temperature_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_1_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_1_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_1_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_1_lower_limit`')

        self._data["Wet-Bulb Temperature Range 1 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_1_upper_limit(self):
        """Get wetbulb_temperature_range_1_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_1_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 1 Upper Limit"]

    @wetbulb_temperature_range_1_upper_limit.setter
    def wetbulb_temperature_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_1_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_1_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_1_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_1_upper_limit`')

        self._data["Wet-Bulb Temperature Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_2_lower_limit(self):
        """Get wetbulb_temperature_range_2_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_2_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 2 Lower Limit"]

    @wetbulb_temperature_range_2_lower_limit.setter
    def wetbulb_temperature_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_2_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_2_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_2_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_2_lower_limit`')

        self._data["Wet-Bulb Temperature Range 2 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_2_upper_limit(self):
        """Get wetbulb_temperature_range_2_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_2_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 2 Upper Limit"]

    @wetbulb_temperature_range_2_upper_limit.setter
    def wetbulb_temperature_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_2_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_2_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_2_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_2_upper_limit`')

        self._data["Wet-Bulb Temperature Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_3_lower_limit(self):
        """Get wetbulb_temperature_range_3_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_3_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 3 Lower Limit"]

    @wetbulb_temperature_range_3_lower_limit.setter
    def wetbulb_temperature_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_3_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_3_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_3_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_3_lower_limit`')

        self._data["Wet-Bulb Temperature Range 3 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_3_upper_limit(self):
        """Get wetbulb_temperature_range_3_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_3_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 3 Upper Limit"]

    @wetbulb_temperature_range_3_upper_limit.setter
    def wetbulb_temperature_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_3_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_3_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_3_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_3_upper_limit`')

        self._data["Wet-Bulb Temperature Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_4_lower_limit(self):
        """Get wetbulb_temperature_range_4_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_4_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 4 Lower Limit"]

    @wetbulb_temperature_range_4_lower_limit.setter
    def wetbulb_temperature_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_4_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_4_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_4_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_4_lower_limit`')

        self._data["Wet-Bulb Temperature Range 4 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_4_upper_limit(self):
        """Get wetbulb_temperature_range_4_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_4_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 4 Upper Limit"]

    @wetbulb_temperature_range_4_upper_limit.setter
    def wetbulb_temperature_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_4_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_4_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_4_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_4_upper_limit`')

        self._data["Wet-Bulb Temperature Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_5_lower_limit(self):
        """Get wetbulb_temperature_range_5_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_5_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 5 Lower Limit"]

    @wetbulb_temperature_range_5_lower_limit.setter
    def wetbulb_temperature_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_5_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_5_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_5_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_5_lower_limit`')

        self._data["Wet-Bulb Temperature Range 5 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_5_upper_limit(self):
        """Get wetbulb_temperature_range_5_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_5_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 5 Upper Limit"]

    @wetbulb_temperature_range_5_upper_limit.setter
    def wetbulb_temperature_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_5_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_5_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_5_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_5_upper_limit`')

        self._data["Wet-Bulb Temperature Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_6_lower_limit(self):
        """Get wetbulb_temperature_range_6_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_6_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 6 Lower Limit"]

    @wetbulb_temperature_range_6_lower_limit.setter
    def wetbulb_temperature_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_6_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_6_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_6_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_6_lower_limit`')

        self._data["Wet-Bulb Temperature Range 6 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_6_upper_limit(self):
        """Get wetbulb_temperature_range_6_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_6_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 6 Upper Limit"]

    @wetbulb_temperature_range_6_upper_limit.setter
    def wetbulb_temperature_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_6_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_6_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_6_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_6_upper_limit`')

        self._data["Wet-Bulb Temperature Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_7_lower_limit(self):
        """Get wetbulb_temperature_range_7_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_7_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 7 Lower Limit"]

    @wetbulb_temperature_range_7_lower_limit.setter
    def wetbulb_temperature_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_7_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_7_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_7_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_7_lower_limit`')

        self._data["Wet-Bulb Temperature Range 7 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_7_upper_limit(self):
        """Get wetbulb_temperature_range_7_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_7_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 7 Upper Limit"]

    @wetbulb_temperature_range_7_upper_limit.setter
    def wetbulb_temperature_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_7_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_7_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_7_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_7_upper_limit`')

        self._data["Wet-Bulb Temperature Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_8_lower_limit(self):
        """Get wetbulb_temperature_range_8_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_8_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 8 Lower Limit"]

    @wetbulb_temperature_range_8_lower_limit.setter
    def wetbulb_temperature_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_8_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_8_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_8_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_8_lower_limit`')

        self._data["Wet-Bulb Temperature Range 8 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_8_upper_limit(self):
        """Get wetbulb_temperature_range_8_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_8_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 8 Upper Limit"]

    @wetbulb_temperature_range_8_upper_limit.setter
    def wetbulb_temperature_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_8_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_8_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_8_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_8_upper_limit`')

        self._data["Wet-Bulb Temperature Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_9_lower_limit(self):
        """Get wetbulb_temperature_range_9_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_9_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 9 Lower Limit"]

    @wetbulb_temperature_range_9_lower_limit.setter
    def wetbulb_temperature_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_9_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_9_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_9_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_9_lower_limit`')

        self._data["Wet-Bulb Temperature Range 9 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_9_upper_limit(self):
        """Get wetbulb_temperature_range_9_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_9_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 9 Upper Limit"]

    @wetbulb_temperature_range_9_upper_limit.setter
    def wetbulb_temperature_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_9_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_9_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_9_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_9_upper_limit`')

        self._data["Wet-Bulb Temperature Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def wetbulb_temperature_range_10_lower_limit(self):
        """Get wetbulb_temperature_range_10_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_range_10_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 10 Lower Limit"]

    @wetbulb_temperature_range_10_lower_limit.setter
    def wetbulb_temperature_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_10_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_10_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_10_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_10_lower_limit`')

        self._data["Wet-Bulb Temperature Range 10 Lower Limit"] = value

    @property
    def wetbulb_temperature_range_10_upper_limit(self):
        """Get wetbulb_temperature_range_10_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_range_10_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Range 10 Upper Limit"]

    @wetbulb_temperature_range_10_upper_limit.setter
    def wetbulb_temperature_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_range_10_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_range_10_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `wetbulb_temperature_range_10_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `wetbulb_temperature_range_10_upper_limit`')

        self._data["Wet-Bulb Temperature Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.wetbulb_temperature_range_1_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_2_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_3_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_4_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_5_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_6_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_7_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_8_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_9_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_range_10_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorRelativeHumidity(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorRelativeHumidity`
        Plant equipment operation scheme for outdoor relative humidity range operation.
        Specifies one or more groups of equipment which are available to operate for
        successive outdoor relative humidity ranges.
    """
    internal_name = "PlantEquipmentOperation:OutdoorRelativeHumidity"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorRelativeHumidity`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Relative Humidity Range 1 Lower Limit"] = None
        self._data["Relative Humidity Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Relative Humidity Range 2 Lower Limit"] = None
        self._data["Relative Humidity Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Relative Humidity Range 3 Lower Limit"] = None
        self._data["Relative Humidity Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Relative Humidity Range 4 Lower Limit"] = None
        self._data["Relative Humidity Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Relative Humidity Range 5 Lower Limit"] = None
        self._data["Relative Humidity Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Relative Humidity Range 6 Lower Limit"] = None
        self._data["Relative Humidity Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Relative Humidity Range 7 Lower Limit"] = None
        self._data["Relative Humidity Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Relative Humidity Range 8 Lower Limit"] = None
        self._data["Relative Humidity Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Relative Humidity Range 9 Lower Limit"] = None
        self._data["Relative Humidity Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Relative Humidity Range 10 Lower Limit"] = None
        self._data["Relative Humidity Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_1_lower_limit = None
        else:
            self.relative_humidity_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_1_upper_limit = None
        else:
            self.relative_humidity_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_2_lower_limit = None
        else:
            self.relative_humidity_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_2_upper_limit = None
        else:
            self.relative_humidity_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_3_lower_limit = None
        else:
            self.relative_humidity_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_3_upper_limit = None
        else:
            self.relative_humidity_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_4_lower_limit = None
        else:
            self.relative_humidity_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_4_upper_limit = None
        else:
            self.relative_humidity_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_5_lower_limit = None
        else:
            self.relative_humidity_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_5_upper_limit = None
        else:
            self.relative_humidity_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_6_lower_limit = None
        else:
            self.relative_humidity_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_6_upper_limit = None
        else:
            self.relative_humidity_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_7_lower_limit = None
        else:
            self.relative_humidity_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_7_upper_limit = None
        else:
            self.relative_humidity_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_8_lower_limit = None
        else:
            self.relative_humidity_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_8_upper_limit = None
        else:
            self.relative_humidity_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_9_lower_limit = None
        else:
            self.relative_humidity_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_9_upper_limit = None
        else:
            self.relative_humidity_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_10_lower_limit = None
        else:
            self.relative_humidity_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relative_humidity_range_10_upper_limit = None
        else:
            self.relative_humidity_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def relative_humidity_range_1_lower_limit(self):
        """Get relative_humidity_range_1_lower_limit

        Returns:
            float: the value of `relative_humidity_range_1_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 1 Lower Limit"]

    @relative_humidity_range_1_lower_limit.setter
    def relative_humidity_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_1_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_1_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_1_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_1_lower_limit`')

        self._data["Relative Humidity Range 1 Lower Limit"] = value

    @property
    def relative_humidity_range_1_upper_limit(self):
        """Get relative_humidity_range_1_upper_limit

        Returns:
            float: the value of `relative_humidity_range_1_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 1 Upper Limit"]

    @relative_humidity_range_1_upper_limit.setter
    def relative_humidity_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_1_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_1_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_1_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_1_upper_limit`')

        self._data["Relative Humidity Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def relative_humidity_range_2_lower_limit(self):
        """Get relative_humidity_range_2_lower_limit

        Returns:
            float: the value of `relative_humidity_range_2_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 2 Lower Limit"]

    @relative_humidity_range_2_lower_limit.setter
    def relative_humidity_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_2_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_2_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_2_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_2_lower_limit`')

        self._data["Relative Humidity Range 2 Lower Limit"] = value

    @property
    def relative_humidity_range_2_upper_limit(self):
        """Get relative_humidity_range_2_upper_limit

        Returns:
            float: the value of `relative_humidity_range_2_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 2 Upper Limit"]

    @relative_humidity_range_2_upper_limit.setter
    def relative_humidity_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_2_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_2_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_2_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_2_upper_limit`')

        self._data["Relative Humidity Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def relative_humidity_range_3_lower_limit(self):
        """Get relative_humidity_range_3_lower_limit

        Returns:
            float: the value of `relative_humidity_range_3_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 3 Lower Limit"]

    @relative_humidity_range_3_lower_limit.setter
    def relative_humidity_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_3_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_3_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_3_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_3_lower_limit`')

        self._data["Relative Humidity Range 3 Lower Limit"] = value

    @property
    def relative_humidity_range_3_upper_limit(self):
        """Get relative_humidity_range_3_upper_limit

        Returns:
            float: the value of `relative_humidity_range_3_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 3 Upper Limit"]

    @relative_humidity_range_3_upper_limit.setter
    def relative_humidity_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_3_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_3_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_3_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_3_upper_limit`')

        self._data["Relative Humidity Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def relative_humidity_range_4_lower_limit(self):
        """Get relative_humidity_range_4_lower_limit

        Returns:
            float: the value of `relative_humidity_range_4_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 4 Lower Limit"]

    @relative_humidity_range_4_lower_limit.setter
    def relative_humidity_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_4_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_4_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_4_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_4_lower_limit`')

        self._data["Relative Humidity Range 4 Lower Limit"] = value

    @property
    def relative_humidity_range_4_upper_limit(self):
        """Get relative_humidity_range_4_upper_limit

        Returns:
            float: the value of `relative_humidity_range_4_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 4 Upper Limit"]

    @relative_humidity_range_4_upper_limit.setter
    def relative_humidity_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_4_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_4_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_4_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_4_upper_limit`')

        self._data["Relative Humidity Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def relative_humidity_range_5_lower_limit(self):
        """Get relative_humidity_range_5_lower_limit

        Returns:
            float: the value of `relative_humidity_range_5_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 5 Lower Limit"]

    @relative_humidity_range_5_lower_limit.setter
    def relative_humidity_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_5_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_5_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_5_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_5_lower_limit`')

        self._data["Relative Humidity Range 5 Lower Limit"] = value

    @property
    def relative_humidity_range_5_upper_limit(self):
        """Get relative_humidity_range_5_upper_limit

        Returns:
            float: the value of `relative_humidity_range_5_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 5 Upper Limit"]

    @relative_humidity_range_5_upper_limit.setter
    def relative_humidity_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_5_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_5_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_5_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_5_upper_limit`')

        self._data["Relative Humidity Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def relative_humidity_range_6_lower_limit(self):
        """Get relative_humidity_range_6_lower_limit

        Returns:
            float: the value of `relative_humidity_range_6_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 6 Lower Limit"]

    @relative_humidity_range_6_lower_limit.setter
    def relative_humidity_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_6_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_6_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_6_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_6_lower_limit`')

        self._data["Relative Humidity Range 6 Lower Limit"] = value

    @property
    def relative_humidity_range_6_upper_limit(self):
        """Get relative_humidity_range_6_upper_limit

        Returns:
            float: the value of `relative_humidity_range_6_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 6 Upper Limit"]

    @relative_humidity_range_6_upper_limit.setter
    def relative_humidity_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_6_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_6_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_6_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_6_upper_limit`')

        self._data["Relative Humidity Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def relative_humidity_range_7_lower_limit(self):
        """Get relative_humidity_range_7_lower_limit

        Returns:
            float: the value of `relative_humidity_range_7_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 7 Lower Limit"]

    @relative_humidity_range_7_lower_limit.setter
    def relative_humidity_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_7_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_7_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_7_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_7_lower_limit`')

        self._data["Relative Humidity Range 7 Lower Limit"] = value

    @property
    def relative_humidity_range_7_upper_limit(self):
        """Get relative_humidity_range_7_upper_limit

        Returns:
            float: the value of `relative_humidity_range_7_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 7 Upper Limit"]

    @relative_humidity_range_7_upper_limit.setter
    def relative_humidity_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_7_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_7_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_7_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_7_upper_limit`')

        self._data["Relative Humidity Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def relative_humidity_range_8_lower_limit(self):
        """Get relative_humidity_range_8_lower_limit

        Returns:
            float: the value of `relative_humidity_range_8_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 8 Lower Limit"]

    @relative_humidity_range_8_lower_limit.setter
    def relative_humidity_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_8_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_8_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_8_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_8_lower_limit`')

        self._data["Relative Humidity Range 8 Lower Limit"] = value

    @property
    def relative_humidity_range_8_upper_limit(self):
        """Get relative_humidity_range_8_upper_limit

        Returns:
            float: the value of `relative_humidity_range_8_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 8 Upper Limit"]

    @relative_humidity_range_8_upper_limit.setter
    def relative_humidity_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_8_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_8_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_8_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_8_upper_limit`')

        self._data["Relative Humidity Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def relative_humidity_range_9_lower_limit(self):
        """Get relative_humidity_range_9_lower_limit

        Returns:
            float: the value of `relative_humidity_range_9_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 9 Lower Limit"]

    @relative_humidity_range_9_lower_limit.setter
    def relative_humidity_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_9_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_9_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_9_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_9_lower_limit`')

        self._data["Relative Humidity Range 9 Lower Limit"] = value

    @property
    def relative_humidity_range_9_upper_limit(self):
        """Get relative_humidity_range_9_upper_limit

        Returns:
            float: the value of `relative_humidity_range_9_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 9 Upper Limit"]

    @relative_humidity_range_9_upper_limit.setter
    def relative_humidity_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_9_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_9_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_9_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_9_upper_limit`')

        self._data["Relative Humidity Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def relative_humidity_range_10_lower_limit(self):
        """Get relative_humidity_range_10_lower_limit

        Returns:
            float: the value of `relative_humidity_range_10_lower_limit` or None if not set
        """
        return self._data["Relative Humidity Range 10 Lower Limit"]

    @relative_humidity_range_10_lower_limit.setter
    def relative_humidity_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_10_lower_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_10_lower_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_10_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_10_lower_limit`')

        self._data["Relative Humidity Range 10 Lower Limit"] = value

    @property
    def relative_humidity_range_10_upper_limit(self):
        """Get relative_humidity_range_10_upper_limit

        Returns:
            float: the value of `relative_humidity_range_10_upper_limit` or None if not set
        """
        return self._data["Relative Humidity Range 10 Upper Limit"]

    @relative_humidity_range_10_upper_limit.setter
    def relative_humidity_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `relative_humidity_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `relative_humidity_range_10_upper_limit`
                Unit: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `relative_humidity_range_10_upper_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `relative_humidity_range_10_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `relative_humidity_range_10_upper_limit`')

        self._data["Relative Humidity Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.relative_humidity_range_1_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_2_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_3_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_4_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_5_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_6_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_7_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_8_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_9_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.relative_humidity_range_10_lower_limit))
        out.append(self._to_str(self.relative_humidity_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorDewpoint(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorDewpoint`
        Plant equipment operation scheme for outdoor dewpoint temperature range operation.
        Specifies one or more groups of equipment which are available to operate for
        successive outdoor dewpoint temperature ranges.
    """
    internal_name = "PlantEquipmentOperation:OutdoorDewpoint"
    field_count = 31

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorDewpoint`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Dewpoint Temperature Range 1 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 2 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 3 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 4 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 5 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 6 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 7 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 8 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 9 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Dewpoint Temperature Range 10 Lower Limit"] = None
        self._data["Dewpoint Temperature Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_1_lower_limit = None
        else:
            self.dewpoint_temperature_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_1_upper_limit = None
        else:
            self.dewpoint_temperature_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_2_lower_limit = None
        else:
            self.dewpoint_temperature_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_2_upper_limit = None
        else:
            self.dewpoint_temperature_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_3_lower_limit = None
        else:
            self.dewpoint_temperature_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_3_upper_limit = None
        else:
            self.dewpoint_temperature_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_4_lower_limit = None
        else:
            self.dewpoint_temperature_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_4_upper_limit = None
        else:
            self.dewpoint_temperature_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_5_lower_limit = None
        else:
            self.dewpoint_temperature_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_5_upper_limit = None
        else:
            self.dewpoint_temperature_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_6_lower_limit = None
        else:
            self.dewpoint_temperature_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_6_upper_limit = None
        else:
            self.dewpoint_temperature_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_7_lower_limit = None
        else:
            self.dewpoint_temperature_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_7_upper_limit = None
        else:
            self.dewpoint_temperature_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_8_lower_limit = None
        else:
            self.dewpoint_temperature_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_8_upper_limit = None
        else:
            self.dewpoint_temperature_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_9_lower_limit = None
        else:
            self.dewpoint_temperature_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_9_upper_limit = None
        else:
            self.dewpoint_temperature_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_10_lower_limit = None
        else:
            self.dewpoint_temperature_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_range_10_upper_limit = None
        else:
            self.dewpoint_temperature_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def dewpoint_temperature_range_1_lower_limit(self):
        """Get dewpoint_temperature_range_1_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_1_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 1 Lower Limit"]

    @dewpoint_temperature_range_1_lower_limit.setter
    def dewpoint_temperature_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_1_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_1_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_1_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_1_lower_limit`')

        self._data["Dewpoint Temperature Range 1 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_1_upper_limit(self):
        """Get dewpoint_temperature_range_1_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_1_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 1 Upper Limit"]

    @dewpoint_temperature_range_1_upper_limit.setter
    def dewpoint_temperature_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_1_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_1_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_1_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_1_upper_limit`')

        self._data["Dewpoint Temperature Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_2_lower_limit(self):
        """Get dewpoint_temperature_range_2_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_2_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 2 Lower Limit"]

    @dewpoint_temperature_range_2_lower_limit.setter
    def dewpoint_temperature_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_2_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_2_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_2_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_2_lower_limit`')

        self._data["Dewpoint Temperature Range 2 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_2_upper_limit(self):
        """Get dewpoint_temperature_range_2_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_2_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 2 Upper Limit"]

    @dewpoint_temperature_range_2_upper_limit.setter
    def dewpoint_temperature_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_2_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_2_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_2_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_2_upper_limit`')

        self._data["Dewpoint Temperature Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_3_lower_limit(self):
        """Get dewpoint_temperature_range_3_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_3_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 3 Lower Limit"]

    @dewpoint_temperature_range_3_lower_limit.setter
    def dewpoint_temperature_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_3_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_3_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_3_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_3_lower_limit`')

        self._data["Dewpoint Temperature Range 3 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_3_upper_limit(self):
        """Get dewpoint_temperature_range_3_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_3_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 3 Upper Limit"]

    @dewpoint_temperature_range_3_upper_limit.setter
    def dewpoint_temperature_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_3_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_3_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_3_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_3_upper_limit`')

        self._data["Dewpoint Temperature Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_4_lower_limit(self):
        """Get dewpoint_temperature_range_4_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_4_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 4 Lower Limit"]

    @dewpoint_temperature_range_4_lower_limit.setter
    def dewpoint_temperature_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_4_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_4_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_4_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_4_lower_limit`')

        self._data["Dewpoint Temperature Range 4 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_4_upper_limit(self):
        """Get dewpoint_temperature_range_4_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_4_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 4 Upper Limit"]

    @dewpoint_temperature_range_4_upper_limit.setter
    def dewpoint_temperature_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_4_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_4_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_4_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_4_upper_limit`')

        self._data["Dewpoint Temperature Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_5_lower_limit(self):
        """Get dewpoint_temperature_range_5_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_5_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 5 Lower Limit"]

    @dewpoint_temperature_range_5_lower_limit.setter
    def dewpoint_temperature_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_5_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_5_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_5_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_5_lower_limit`')

        self._data["Dewpoint Temperature Range 5 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_5_upper_limit(self):
        """Get dewpoint_temperature_range_5_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_5_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 5 Upper Limit"]

    @dewpoint_temperature_range_5_upper_limit.setter
    def dewpoint_temperature_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_5_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_5_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_5_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_5_upper_limit`')

        self._data["Dewpoint Temperature Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_6_lower_limit(self):
        """Get dewpoint_temperature_range_6_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_6_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 6 Lower Limit"]

    @dewpoint_temperature_range_6_lower_limit.setter
    def dewpoint_temperature_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_6_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_6_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_6_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_6_lower_limit`')

        self._data["Dewpoint Temperature Range 6 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_6_upper_limit(self):
        """Get dewpoint_temperature_range_6_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_6_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 6 Upper Limit"]

    @dewpoint_temperature_range_6_upper_limit.setter
    def dewpoint_temperature_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_6_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_6_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_6_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_6_upper_limit`')

        self._data["Dewpoint Temperature Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_7_lower_limit(self):
        """Get dewpoint_temperature_range_7_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_7_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 7 Lower Limit"]

    @dewpoint_temperature_range_7_lower_limit.setter
    def dewpoint_temperature_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_7_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_7_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_7_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_7_lower_limit`')

        self._data["Dewpoint Temperature Range 7 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_7_upper_limit(self):
        """Get dewpoint_temperature_range_7_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_7_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 7 Upper Limit"]

    @dewpoint_temperature_range_7_upper_limit.setter
    def dewpoint_temperature_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_7_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_7_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_7_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_7_upper_limit`')

        self._data["Dewpoint Temperature Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_8_lower_limit(self):
        """Get dewpoint_temperature_range_8_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_8_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 8 Lower Limit"]

    @dewpoint_temperature_range_8_lower_limit.setter
    def dewpoint_temperature_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_8_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_8_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_8_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_8_lower_limit`')

        self._data["Dewpoint Temperature Range 8 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_8_upper_limit(self):
        """Get dewpoint_temperature_range_8_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_8_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 8 Upper Limit"]

    @dewpoint_temperature_range_8_upper_limit.setter
    def dewpoint_temperature_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_8_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_8_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_8_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_8_upper_limit`')

        self._data["Dewpoint Temperature Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_9_lower_limit(self):
        """Get dewpoint_temperature_range_9_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_9_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 9 Lower Limit"]

    @dewpoint_temperature_range_9_lower_limit.setter
    def dewpoint_temperature_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_9_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_9_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_9_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_9_lower_limit`')

        self._data["Dewpoint Temperature Range 9 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_9_upper_limit(self):
        """Get dewpoint_temperature_range_9_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_9_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 9 Upper Limit"]

    @dewpoint_temperature_range_9_upper_limit.setter
    def dewpoint_temperature_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_9_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_9_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_9_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_9_upper_limit`')

        self._data["Dewpoint Temperature Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def dewpoint_temperature_range_10_lower_limit(self):
        """Get dewpoint_temperature_range_10_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_range_10_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 10 Lower Limit"]

    @dewpoint_temperature_range_10_lower_limit.setter
    def dewpoint_temperature_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_10_lower_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_10_lower_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_10_lower_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_10_lower_limit`')

        self._data["Dewpoint Temperature Range 10 Lower Limit"] = value

    @property
    def dewpoint_temperature_range_10_upper_limit(self):
        """Get dewpoint_temperature_range_10_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_range_10_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Range 10 Upper Limit"]

    @dewpoint_temperature_range_10_upper_limit.setter
    def dewpoint_temperature_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_range_10_upper_limit`
                Unit: C
                value >= -70.0
                value <= 70.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_range_10_upper_limit`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `dewpoint_temperature_range_10_upper_limit`')
            if value > 70.0:
                raise ValueError('value need to be smaller 70.0 '
                                 'for field `dewpoint_temperature_range_10_upper_limit`')

        self._data["Dewpoint Temperature Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.dewpoint_temperature_range_1_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_2_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_3_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_4_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_5_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_6_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_7_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_8_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_9_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_range_10_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationComponentSetpoint(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:ComponentSetpoint`
        Plant equipment operation scheme for component setpoint operation. Specifies one or
        pieces of equipment which are controlled to meet the temperature setpoint at the
        component outlet node.
    """
    internal_name = "PlantEquipmentOperation:ComponentSetpoint"
    field_count = 61

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:ComponentSetpoint`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Equipment 1 Object Type"] = None
        self._data["Equipment 1 Name"] = None
        self._data["Demand Calculation 1 Node Name"] = None
        self._data["Setpoint 1 Node Name"] = None
        self._data["Component 1 Flow Rate"] = None
        self._data["Operation 1 Type"] = None
        self._data["Equipment 2 Object Type"] = None
        self._data["Equipment 2 Name"] = None
        self._data["Demand Calculation 2 Node Name"] = None
        self._data["Setpoint 2 Node Name"] = None
        self._data["Component 2 Flow Rate"] = None
        self._data["Operation 2 Type"] = None
        self._data["Equipment 3 Object Type"] = None
        self._data["Equipment 3 Name"] = None
        self._data["Demand Calculation 3 Node Name"] = None
        self._data["Setpoint 3 Node Name"] = None
        self._data["Component 3 Flow Rate"] = None
        self._data["Operation 3 Type"] = None
        self._data["Equipment 4 Object Type"] = None
        self._data["Equipment 4 Name"] = None
        self._data["Demand Calculation 4 Node Name"] = None
        self._data["Setpoint 4 Node Name"] = None
        self._data["Component 4 Flow Rate"] = None
        self._data["Operation 4 Type"] = None
        self._data["Equipment 5 Object Type"] = None
        self._data["Equipment 5 Name"] = None
        self._data["Demand Calculation 5 Node Name"] = None
        self._data["Setpoint 5 Node Name"] = None
        self._data["Component 5 Flow Rate"] = None
        self._data["Operation 5 Type"] = None
        self._data["Equipment 6 Object Type"] = None
        self._data["Equipment 6 Name"] = None
        self._data["Demand Calculation 6 Node Name"] = None
        self._data["Setpoint 6 Node Name"] = None
        self._data["Component 6 Flow Rate"] = None
        self._data["Operation 6 Type"] = None
        self._data["Equipment 7 Object Type"] = None
        self._data["Equipment 7 Name"] = None
        self._data["Demand Calculation 7 Node Name"] = None
        self._data["Setpoint 7 Node Name"] = None
        self._data["Component 7 Flow Rate"] = None
        self._data["Operation 7 Type"] = None
        self._data["Equipment 8 Object Type"] = None
        self._data["Equipment 8 Name"] = None
        self._data["Demand Calculation 8 Node Name"] = None
        self._data["Setpoint 8 Node Name"] = None
        self._data["Component 8 Flow Rate"] = None
        self._data["Operation 8 Type"] = None
        self._data["Equipment 9 Object Type"] = None
        self._data["Equipment 9 Name"] = None
        self._data["Demand Calculation 9 Node Name"] = None
        self._data["Setpoint 9 Node Name"] = None
        self._data["Component 9 Flow Rate"] = None
        self._data["Operation 9 Type"] = None
        self._data["Equipment 10 Object Type"] = None
        self._data["Equipment 10 Name"] = None
        self._data["Demand Calculation 10 Node Name"] = None
        self._data["Setpoint 10 Node Name"] = None
        self._data["Component 10 Flow Rate"] = None
        self._data["Operation 10 Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_object_type = None
        else:
            self.equipment_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_1_name = None
        else:
            self.equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_1_node_name = None
        else:
            self.demand_calculation_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_1_node_name = None
        else:
            self.setpoint_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_flow_rate = None
        else:
            self.component_1_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_1_type = None
        else:
            self.operation_1_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_object_type = None
        else:
            self.equipment_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_2_name = None
        else:
            self.equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_2_node_name = None
        else:
            self.demand_calculation_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_2_node_name = None
        else:
            self.setpoint_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_flow_rate = None
        else:
            self.component_2_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_2_type = None
        else:
            self.operation_2_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_object_type = None
        else:
            self.equipment_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_3_name = None
        else:
            self.equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_3_node_name = None
        else:
            self.demand_calculation_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_3_node_name = None
        else:
            self.setpoint_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_flow_rate = None
        else:
            self.component_3_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_3_type = None
        else:
            self.operation_3_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_object_type = None
        else:
            self.equipment_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_4_name = None
        else:
            self.equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_4_node_name = None
        else:
            self.demand_calculation_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_4_node_name = None
        else:
            self.setpoint_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_flow_rate = None
        else:
            self.component_4_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_4_type = None
        else:
            self.operation_4_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_object_type = None
        else:
            self.equipment_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_5_name = None
        else:
            self.equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_5_node_name = None
        else:
            self.demand_calculation_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_5_node_name = None
        else:
            self.setpoint_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_flow_rate = None
        else:
            self.component_5_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_5_type = None
        else:
            self.operation_5_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_object_type = None
        else:
            self.equipment_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_6_name = None
        else:
            self.equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_6_node_name = None
        else:
            self.demand_calculation_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_6_node_name = None
        else:
            self.setpoint_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_flow_rate = None
        else:
            self.component_6_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_6_type = None
        else:
            self.operation_6_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_object_type = None
        else:
            self.equipment_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_7_name = None
        else:
            self.equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_7_node_name = None
        else:
            self.demand_calculation_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_7_node_name = None
        else:
            self.setpoint_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_flow_rate = None
        else:
            self.component_7_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_7_type = None
        else:
            self.operation_7_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_object_type = None
        else:
            self.equipment_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_8_name = None
        else:
            self.equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_8_node_name = None
        else:
            self.demand_calculation_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_8_node_name = None
        else:
            self.setpoint_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_flow_rate = None
        else:
            self.component_8_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_8_type = None
        else:
            self.operation_8_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_object_type = None
        else:
            self.equipment_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_9_name = None
        else:
            self.equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_9_node_name = None
        else:
            self.demand_calculation_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_9_node_name = None
        else:
            self.setpoint_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_flow_rate = None
        else:
            self.component_9_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_9_type = None
        else:
            self.operation_9_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_object_type = None
        else:
            self.equipment_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.equipment_10_name = None
        else:
            self.equipment_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_calculation_10_node_name = None
        else:
            self.demand_calculation_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.setpoint_10_node_name = None
        else:
            self.setpoint_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_10_flow_rate = None
        else:
            self.component_10_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operation_10_type = None
        else:
            self.operation_10_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def equipment_1_object_type(self):
        """Get equipment_1_object_type

        Returns:
            str: the value of `equipment_1_object_type` or None if not set
        """
        return self._data["Equipment 1 Object Type"]

    @equipment_1_object_type.setter
    def equipment_1_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_1_object_type`

        Args:
            value (str): value for IDD Field `equipment_1_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_object_type`')

        self._data["Equipment 1 Object Type"] = value

    @property
    def equipment_1_name(self):
        """Get equipment_1_name

        Returns:
            str: the value of `equipment_1_name` or None if not set
        """
        return self._data["Equipment 1 Name"]

    @equipment_1_name.setter
    def equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `equipment_1_name`

        Args:
            value (str): value for IDD Field `equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_1_name`')

        self._data["Equipment 1 Name"] = value

    @property
    def demand_calculation_1_node_name(self):
        """Get demand_calculation_1_node_name

        Returns:
            str: the value of `demand_calculation_1_node_name` or None if not set
        """
        return self._data["Demand Calculation 1 Node Name"]

    @demand_calculation_1_node_name.setter
    def demand_calculation_1_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_1_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_1_node_name`')

        self._data["Demand Calculation 1 Node Name"] = value

    @property
    def setpoint_1_node_name(self):
        """Get setpoint_1_node_name

        Returns:
            str: the value of `setpoint_1_node_name` or None if not set
        """
        return self._data["Setpoint 1 Node Name"]

    @setpoint_1_node_name.setter
    def setpoint_1_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_1_node_name`

        Args:
            value (str): value for IDD Field `setpoint_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_1_node_name`')

        self._data["Setpoint 1 Node Name"] = value

    @property
    def component_1_flow_rate(self):
        """Get component_1_flow_rate

        Returns:
            float: the value of `component_1_flow_rate` or None if not set
        """
        return self._data["Component 1 Flow Rate"]

    @component_1_flow_rate.setter
    def component_1_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_1_flow_rate`

        Args:
            value (float): value for IDD Field `component_1_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_1_flow_rate`'.format(value))

        self._data["Component 1 Flow Rate"] = value

    @property
    def operation_1_type(self):
        """Get operation_1_type

        Returns:
            str: the value of `operation_1_type` or None if not set
        """
        return self._data["Operation 1 Type"]

    @operation_1_type.setter
    def operation_1_type(self, value=None):
        """  Corresponds to IDD Field `operation_1_type`

        Args:
            value (str): value for IDD Field `operation_1_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_1_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_1_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_1_type`'.format(value))

        self._data["Operation 1 Type"] = value

    @property
    def equipment_2_object_type(self):
        """Get equipment_2_object_type

        Returns:
            str: the value of `equipment_2_object_type` or None if not set
        """
        return self._data["Equipment 2 Object Type"]

    @equipment_2_object_type.setter
    def equipment_2_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_2_object_type`

        Args:
            value (str): value for IDD Field `equipment_2_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_object_type`')

        self._data["Equipment 2 Object Type"] = value

    @property
    def equipment_2_name(self):
        """Get equipment_2_name

        Returns:
            str: the value of `equipment_2_name` or None if not set
        """
        return self._data["Equipment 2 Name"]

    @equipment_2_name.setter
    def equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `equipment_2_name`

        Args:
            value (str): value for IDD Field `equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_2_name`')

        self._data["Equipment 2 Name"] = value

    @property
    def demand_calculation_2_node_name(self):
        """Get demand_calculation_2_node_name

        Returns:
            str: the value of `demand_calculation_2_node_name` or None if not set
        """
        return self._data["Demand Calculation 2 Node Name"]

    @demand_calculation_2_node_name.setter
    def demand_calculation_2_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_2_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_2_node_name`')

        self._data["Demand Calculation 2 Node Name"] = value

    @property
    def setpoint_2_node_name(self):
        """Get setpoint_2_node_name

        Returns:
            str: the value of `setpoint_2_node_name` or None if not set
        """
        return self._data["Setpoint 2 Node Name"]

    @setpoint_2_node_name.setter
    def setpoint_2_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_2_node_name`

        Args:
            value (str): value for IDD Field `setpoint_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_2_node_name`')

        self._data["Setpoint 2 Node Name"] = value

    @property
    def component_2_flow_rate(self):
        """Get component_2_flow_rate

        Returns:
            float: the value of `component_2_flow_rate` or None if not set
        """
        return self._data["Component 2 Flow Rate"]

    @component_2_flow_rate.setter
    def component_2_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_2_flow_rate`

        Args:
            value (float): value for IDD Field `component_2_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_2_flow_rate`'.format(value))

        self._data["Component 2 Flow Rate"] = value

    @property
    def operation_2_type(self):
        """Get operation_2_type

        Returns:
            str: the value of `operation_2_type` or None if not set
        """
        return self._data["Operation 2 Type"]

    @operation_2_type.setter
    def operation_2_type(self, value=None):
        """  Corresponds to IDD Field `operation_2_type`

        Args:
            value (str): value for IDD Field `operation_2_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_2_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_2_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_2_type`'.format(value))

        self._data["Operation 2 Type"] = value

    @property
    def equipment_3_object_type(self):
        """Get equipment_3_object_type

        Returns:
            str: the value of `equipment_3_object_type` or None if not set
        """
        return self._data["Equipment 3 Object Type"]

    @equipment_3_object_type.setter
    def equipment_3_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_3_object_type`

        Args:
            value (str): value for IDD Field `equipment_3_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_object_type`')

        self._data["Equipment 3 Object Type"] = value

    @property
    def equipment_3_name(self):
        """Get equipment_3_name

        Returns:
            str: the value of `equipment_3_name` or None if not set
        """
        return self._data["Equipment 3 Name"]

    @equipment_3_name.setter
    def equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `equipment_3_name`

        Args:
            value (str): value for IDD Field `equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_3_name`')

        self._data["Equipment 3 Name"] = value

    @property
    def demand_calculation_3_node_name(self):
        """Get demand_calculation_3_node_name

        Returns:
            str: the value of `demand_calculation_3_node_name` or None if not set
        """
        return self._data["Demand Calculation 3 Node Name"]

    @demand_calculation_3_node_name.setter
    def demand_calculation_3_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_3_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_3_node_name`')

        self._data["Demand Calculation 3 Node Name"] = value

    @property
    def setpoint_3_node_name(self):
        """Get setpoint_3_node_name

        Returns:
            str: the value of `setpoint_3_node_name` or None if not set
        """
        return self._data["Setpoint 3 Node Name"]

    @setpoint_3_node_name.setter
    def setpoint_3_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_3_node_name`

        Args:
            value (str): value for IDD Field `setpoint_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_3_node_name`')

        self._data["Setpoint 3 Node Name"] = value

    @property
    def component_3_flow_rate(self):
        """Get component_3_flow_rate

        Returns:
            float: the value of `component_3_flow_rate` or None if not set
        """
        return self._data["Component 3 Flow Rate"]

    @component_3_flow_rate.setter
    def component_3_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_3_flow_rate`

        Args:
            value (float): value for IDD Field `component_3_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_3_flow_rate`'.format(value))

        self._data["Component 3 Flow Rate"] = value

    @property
    def operation_3_type(self):
        """Get operation_3_type

        Returns:
            str: the value of `operation_3_type` or None if not set
        """
        return self._data["Operation 3 Type"]

    @operation_3_type.setter
    def operation_3_type(self, value=None):
        """  Corresponds to IDD Field `operation_3_type`

        Args:
            value (str): value for IDD Field `operation_3_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_3_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_3_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_3_type`'.format(value))

        self._data["Operation 3 Type"] = value

    @property
    def equipment_4_object_type(self):
        """Get equipment_4_object_type

        Returns:
            str: the value of `equipment_4_object_type` or None if not set
        """
        return self._data["Equipment 4 Object Type"]

    @equipment_4_object_type.setter
    def equipment_4_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_4_object_type`

        Args:
            value (str): value for IDD Field `equipment_4_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_object_type`')

        self._data["Equipment 4 Object Type"] = value

    @property
    def equipment_4_name(self):
        """Get equipment_4_name

        Returns:
            str: the value of `equipment_4_name` or None if not set
        """
        return self._data["Equipment 4 Name"]

    @equipment_4_name.setter
    def equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `equipment_4_name`

        Args:
            value (str): value for IDD Field `equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_4_name`')

        self._data["Equipment 4 Name"] = value

    @property
    def demand_calculation_4_node_name(self):
        """Get demand_calculation_4_node_name

        Returns:
            str: the value of `demand_calculation_4_node_name` or None if not set
        """
        return self._data["Demand Calculation 4 Node Name"]

    @demand_calculation_4_node_name.setter
    def demand_calculation_4_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_4_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_4_node_name`')

        self._data["Demand Calculation 4 Node Name"] = value

    @property
    def setpoint_4_node_name(self):
        """Get setpoint_4_node_name

        Returns:
            str: the value of `setpoint_4_node_name` or None if not set
        """
        return self._data["Setpoint 4 Node Name"]

    @setpoint_4_node_name.setter
    def setpoint_4_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_4_node_name`

        Args:
            value (str): value for IDD Field `setpoint_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_4_node_name`')

        self._data["Setpoint 4 Node Name"] = value

    @property
    def component_4_flow_rate(self):
        """Get component_4_flow_rate

        Returns:
            float: the value of `component_4_flow_rate` or None if not set
        """
        return self._data["Component 4 Flow Rate"]

    @component_4_flow_rate.setter
    def component_4_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_4_flow_rate`

        Args:
            value (float): value for IDD Field `component_4_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_4_flow_rate`'.format(value))

        self._data["Component 4 Flow Rate"] = value

    @property
    def operation_4_type(self):
        """Get operation_4_type

        Returns:
            str: the value of `operation_4_type` or None if not set
        """
        return self._data["Operation 4 Type"]

    @operation_4_type.setter
    def operation_4_type(self, value=None):
        """  Corresponds to IDD Field `operation_4_type`

        Args:
            value (str): value for IDD Field `operation_4_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_4_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_4_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_4_type`'.format(value))

        self._data["Operation 4 Type"] = value

    @property
    def equipment_5_object_type(self):
        """Get equipment_5_object_type

        Returns:
            str: the value of `equipment_5_object_type` or None if not set
        """
        return self._data["Equipment 5 Object Type"]

    @equipment_5_object_type.setter
    def equipment_5_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_5_object_type`

        Args:
            value (str): value for IDD Field `equipment_5_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_object_type`')

        self._data["Equipment 5 Object Type"] = value

    @property
    def equipment_5_name(self):
        """Get equipment_5_name

        Returns:
            str: the value of `equipment_5_name` or None if not set
        """
        return self._data["Equipment 5 Name"]

    @equipment_5_name.setter
    def equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `equipment_5_name`

        Args:
            value (str): value for IDD Field `equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_5_name`')

        self._data["Equipment 5 Name"] = value

    @property
    def demand_calculation_5_node_name(self):
        """Get demand_calculation_5_node_name

        Returns:
            str: the value of `demand_calculation_5_node_name` or None if not set
        """
        return self._data["Demand Calculation 5 Node Name"]

    @demand_calculation_5_node_name.setter
    def demand_calculation_5_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_5_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_5_node_name`')

        self._data["Demand Calculation 5 Node Name"] = value

    @property
    def setpoint_5_node_name(self):
        """Get setpoint_5_node_name

        Returns:
            str: the value of `setpoint_5_node_name` or None if not set
        """
        return self._data["Setpoint 5 Node Name"]

    @setpoint_5_node_name.setter
    def setpoint_5_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_5_node_name`

        Args:
            value (str): value for IDD Field `setpoint_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_5_node_name`')

        self._data["Setpoint 5 Node Name"] = value

    @property
    def component_5_flow_rate(self):
        """Get component_5_flow_rate

        Returns:
            float: the value of `component_5_flow_rate` or None if not set
        """
        return self._data["Component 5 Flow Rate"]

    @component_5_flow_rate.setter
    def component_5_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_5_flow_rate`

        Args:
            value (float): value for IDD Field `component_5_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_5_flow_rate`'.format(value))

        self._data["Component 5 Flow Rate"] = value

    @property
    def operation_5_type(self):
        """Get operation_5_type

        Returns:
            str: the value of `operation_5_type` or None if not set
        """
        return self._data["Operation 5 Type"]

    @operation_5_type.setter
    def operation_5_type(self, value=None):
        """  Corresponds to IDD Field `operation_5_type`

        Args:
            value (str): value for IDD Field `operation_5_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_5_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_5_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_5_type`'.format(value))

        self._data["Operation 5 Type"] = value

    @property
    def equipment_6_object_type(self):
        """Get equipment_6_object_type

        Returns:
            str: the value of `equipment_6_object_type` or None if not set
        """
        return self._data["Equipment 6 Object Type"]

    @equipment_6_object_type.setter
    def equipment_6_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_6_object_type`

        Args:
            value (str): value for IDD Field `equipment_6_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_object_type`')

        self._data["Equipment 6 Object Type"] = value

    @property
    def equipment_6_name(self):
        """Get equipment_6_name

        Returns:
            str: the value of `equipment_6_name` or None if not set
        """
        return self._data["Equipment 6 Name"]

    @equipment_6_name.setter
    def equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `equipment_6_name`

        Args:
            value (str): value for IDD Field `equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_6_name`')

        self._data["Equipment 6 Name"] = value

    @property
    def demand_calculation_6_node_name(self):
        """Get demand_calculation_6_node_name

        Returns:
            str: the value of `demand_calculation_6_node_name` or None if not set
        """
        return self._data["Demand Calculation 6 Node Name"]

    @demand_calculation_6_node_name.setter
    def demand_calculation_6_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_6_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_6_node_name`')

        self._data["Demand Calculation 6 Node Name"] = value

    @property
    def setpoint_6_node_name(self):
        """Get setpoint_6_node_name

        Returns:
            str: the value of `setpoint_6_node_name` or None if not set
        """
        return self._data["Setpoint 6 Node Name"]

    @setpoint_6_node_name.setter
    def setpoint_6_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_6_node_name`

        Args:
            value (str): value for IDD Field `setpoint_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_6_node_name`')

        self._data["Setpoint 6 Node Name"] = value

    @property
    def component_6_flow_rate(self):
        """Get component_6_flow_rate

        Returns:
            float: the value of `component_6_flow_rate` or None if not set
        """
        return self._data["Component 6 Flow Rate"]

    @component_6_flow_rate.setter
    def component_6_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_6_flow_rate`

        Args:
            value (float): value for IDD Field `component_6_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_6_flow_rate`'.format(value))

        self._data["Component 6 Flow Rate"] = value

    @property
    def operation_6_type(self):
        """Get operation_6_type

        Returns:
            str: the value of `operation_6_type` or None if not set
        """
        return self._data["Operation 6 Type"]

    @operation_6_type.setter
    def operation_6_type(self, value=None):
        """  Corresponds to IDD Field `operation_6_type`

        Args:
            value (str): value for IDD Field `operation_6_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_6_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_6_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_6_type`'.format(value))

        self._data["Operation 6 Type"] = value

    @property
    def equipment_7_object_type(self):
        """Get equipment_7_object_type

        Returns:
            str: the value of `equipment_7_object_type` or None if not set
        """
        return self._data["Equipment 7 Object Type"]

    @equipment_7_object_type.setter
    def equipment_7_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_7_object_type`

        Args:
            value (str): value for IDD Field `equipment_7_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_object_type`')

        self._data["Equipment 7 Object Type"] = value

    @property
    def equipment_7_name(self):
        """Get equipment_7_name

        Returns:
            str: the value of `equipment_7_name` or None if not set
        """
        return self._data["Equipment 7 Name"]

    @equipment_7_name.setter
    def equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `equipment_7_name`

        Args:
            value (str): value for IDD Field `equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_7_name`')

        self._data["Equipment 7 Name"] = value

    @property
    def demand_calculation_7_node_name(self):
        """Get demand_calculation_7_node_name

        Returns:
            str: the value of `demand_calculation_7_node_name` or None if not set
        """
        return self._data["Demand Calculation 7 Node Name"]

    @demand_calculation_7_node_name.setter
    def demand_calculation_7_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_7_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_7_node_name`')

        self._data["Demand Calculation 7 Node Name"] = value

    @property
    def setpoint_7_node_name(self):
        """Get setpoint_7_node_name

        Returns:
            str: the value of `setpoint_7_node_name` or None if not set
        """
        return self._data["Setpoint 7 Node Name"]

    @setpoint_7_node_name.setter
    def setpoint_7_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_7_node_name`

        Args:
            value (str): value for IDD Field `setpoint_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_7_node_name`')

        self._data["Setpoint 7 Node Name"] = value

    @property
    def component_7_flow_rate(self):
        """Get component_7_flow_rate

        Returns:
            float: the value of `component_7_flow_rate` or None if not set
        """
        return self._data["Component 7 Flow Rate"]

    @component_7_flow_rate.setter
    def component_7_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_7_flow_rate`

        Args:
            value (float): value for IDD Field `component_7_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_7_flow_rate`'.format(value))

        self._data["Component 7 Flow Rate"] = value

    @property
    def operation_7_type(self):
        """Get operation_7_type

        Returns:
            str: the value of `operation_7_type` or None if not set
        """
        return self._data["Operation 7 Type"]

    @operation_7_type.setter
    def operation_7_type(self, value=None):
        """  Corresponds to IDD Field `operation_7_type`

        Args:
            value (str): value for IDD Field `operation_7_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_7_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_7_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_7_type`'.format(value))

        self._data["Operation 7 Type"] = value

    @property
    def equipment_8_object_type(self):
        """Get equipment_8_object_type

        Returns:
            str: the value of `equipment_8_object_type` or None if not set
        """
        return self._data["Equipment 8 Object Type"]

    @equipment_8_object_type.setter
    def equipment_8_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_8_object_type`

        Args:
            value (str): value for IDD Field `equipment_8_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_object_type`')

        self._data["Equipment 8 Object Type"] = value

    @property
    def equipment_8_name(self):
        """Get equipment_8_name

        Returns:
            str: the value of `equipment_8_name` or None if not set
        """
        return self._data["Equipment 8 Name"]

    @equipment_8_name.setter
    def equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `equipment_8_name`

        Args:
            value (str): value for IDD Field `equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_8_name`')

        self._data["Equipment 8 Name"] = value

    @property
    def demand_calculation_8_node_name(self):
        """Get demand_calculation_8_node_name

        Returns:
            str: the value of `demand_calculation_8_node_name` or None if not set
        """
        return self._data["Demand Calculation 8 Node Name"]

    @demand_calculation_8_node_name.setter
    def demand_calculation_8_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_8_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_8_node_name`')

        self._data["Demand Calculation 8 Node Name"] = value

    @property
    def setpoint_8_node_name(self):
        """Get setpoint_8_node_name

        Returns:
            str: the value of `setpoint_8_node_name` or None if not set
        """
        return self._data["Setpoint 8 Node Name"]

    @setpoint_8_node_name.setter
    def setpoint_8_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_8_node_name`

        Args:
            value (str): value for IDD Field `setpoint_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_8_node_name`')

        self._data["Setpoint 8 Node Name"] = value

    @property
    def component_8_flow_rate(self):
        """Get component_8_flow_rate

        Returns:
            float: the value of `component_8_flow_rate` or None if not set
        """
        return self._data["Component 8 Flow Rate"]

    @component_8_flow_rate.setter
    def component_8_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_8_flow_rate`

        Args:
            value (float): value for IDD Field `component_8_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_8_flow_rate`'.format(value))

        self._data["Component 8 Flow Rate"] = value

    @property
    def operation_8_type(self):
        """Get operation_8_type

        Returns:
            str: the value of `operation_8_type` or None if not set
        """
        return self._data["Operation 8 Type"]

    @operation_8_type.setter
    def operation_8_type(self, value=None):
        """  Corresponds to IDD Field `operation_8_type`

        Args:
            value (str): value for IDD Field `operation_8_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_8_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_8_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_8_type`'.format(value))

        self._data["Operation 8 Type"] = value

    @property
    def equipment_9_object_type(self):
        """Get equipment_9_object_type

        Returns:
            str: the value of `equipment_9_object_type` or None if not set
        """
        return self._data["Equipment 9 Object Type"]

    @equipment_9_object_type.setter
    def equipment_9_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_9_object_type`

        Args:
            value (str): value for IDD Field `equipment_9_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_object_type`')

        self._data["Equipment 9 Object Type"] = value

    @property
    def equipment_9_name(self):
        """Get equipment_9_name

        Returns:
            str: the value of `equipment_9_name` or None if not set
        """
        return self._data["Equipment 9 Name"]

    @equipment_9_name.setter
    def equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `equipment_9_name`

        Args:
            value (str): value for IDD Field `equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_9_name`')

        self._data["Equipment 9 Name"] = value

    @property
    def demand_calculation_9_node_name(self):
        """Get demand_calculation_9_node_name

        Returns:
            str: the value of `demand_calculation_9_node_name` or None if not set
        """
        return self._data["Demand Calculation 9 Node Name"]

    @demand_calculation_9_node_name.setter
    def demand_calculation_9_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_9_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_9_node_name`')

        self._data["Demand Calculation 9 Node Name"] = value

    @property
    def setpoint_9_node_name(self):
        """Get setpoint_9_node_name

        Returns:
            str: the value of `setpoint_9_node_name` or None if not set
        """
        return self._data["Setpoint 9 Node Name"]

    @setpoint_9_node_name.setter
    def setpoint_9_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_9_node_name`

        Args:
            value (str): value for IDD Field `setpoint_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_9_node_name`')

        self._data["Setpoint 9 Node Name"] = value

    @property
    def component_9_flow_rate(self):
        """Get component_9_flow_rate

        Returns:
            float: the value of `component_9_flow_rate` or None if not set
        """
        return self._data["Component 9 Flow Rate"]

    @component_9_flow_rate.setter
    def component_9_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_9_flow_rate`

        Args:
            value (float): value for IDD Field `component_9_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_9_flow_rate`'.format(value))

        self._data["Component 9 Flow Rate"] = value

    @property
    def operation_9_type(self):
        """Get operation_9_type

        Returns:
            str: the value of `operation_9_type` or None if not set
        """
        return self._data["Operation 9 Type"]

    @operation_9_type.setter
    def operation_9_type(self, value=None):
        """  Corresponds to IDD Field `operation_9_type`

        Args:
            value (str): value for IDD Field `operation_9_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_9_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_9_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_9_type`'.format(value))

        self._data["Operation 9 Type"] = value

    @property
    def equipment_10_object_type(self):
        """Get equipment_10_object_type

        Returns:
            str: the value of `equipment_10_object_type` or None if not set
        """
        return self._data["Equipment 10 Object Type"]

    @equipment_10_object_type.setter
    def equipment_10_object_type(self, value=None):
        """  Corresponds to IDD Field `equipment_10_object_type`

        Args:
            value (str): value for IDD Field `equipment_10_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_object_type`')

        self._data["Equipment 10 Object Type"] = value

    @property
    def equipment_10_name(self):
        """Get equipment_10_name

        Returns:
            str: the value of `equipment_10_name` or None if not set
        """
        return self._data["Equipment 10 Name"]

    @equipment_10_name.setter
    def equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `equipment_10_name`

        Args:
            value (str): value for IDD Field `equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `equipment_10_name`')

        self._data["Equipment 10 Name"] = value

    @property
    def demand_calculation_10_node_name(self):
        """Get demand_calculation_10_node_name

        Returns:
            str: the value of `demand_calculation_10_node_name` or None if not set
        """
        return self._data["Demand Calculation 10 Node Name"]

    @demand_calculation_10_node_name.setter
    def demand_calculation_10_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_calculation_10_node_name`

        Args:
            value (str): value for IDD Field `demand_calculation_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_calculation_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_calculation_10_node_name`')

        self._data["Demand Calculation 10 Node Name"] = value

    @property
    def setpoint_10_node_name(self):
        """Get setpoint_10_node_name

        Returns:
            str: the value of `setpoint_10_node_name` or None if not set
        """
        return self._data["Setpoint 10 Node Name"]

    @setpoint_10_node_name.setter
    def setpoint_10_node_name(self, value=None):
        """  Corresponds to IDD Field `setpoint_10_node_name`

        Args:
            value (str): value for IDD Field `setpoint_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_10_node_name`')

        self._data["Setpoint 10 Node Name"] = value

    @property
    def component_10_flow_rate(self):
        """Get component_10_flow_rate

        Returns:
            float: the value of `component_10_flow_rate` or None if not set
        """
        return self._data["Component 10 Flow Rate"]

    @component_10_flow_rate.setter
    def component_10_flow_rate(self, value=None):
        """  Corresponds to IDD Field `component_10_flow_rate`

        Args:
            value (float): value for IDD Field `component_10_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `component_10_flow_rate`'.format(value))

        self._data["Component 10 Flow Rate"] = value

    @property
    def operation_10_type(self):
        """Get operation_10_type

        Returns:
            str: the value of `operation_10_type` or None if not set
        """
        return self._data["Operation 10 Type"]

    @operation_10_type.setter
    def operation_10_type(self, value=None):
        """  Corresponds to IDD Field `operation_10_type`

        Args:
            value (str): value for IDD Field `operation_10_type`
                Accepted values are:
                      - Heating
                      - Cooling
                      - Dual
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_10_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_10_type`')
            vals = set()
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("Dual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `operation_10_type`'.format(value))

        self._data["Operation 10 Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.equipment_1_object_type))
        out.append(self._to_str(self.equipment_1_name))
        out.append(self._to_str(self.demand_calculation_1_node_name))
        out.append(self._to_str(self.setpoint_1_node_name))
        out.append(self._to_str(self.component_1_flow_rate))
        out.append(self._to_str(self.operation_1_type))
        out.append(self._to_str(self.equipment_2_object_type))
        out.append(self._to_str(self.equipment_2_name))
        out.append(self._to_str(self.demand_calculation_2_node_name))
        out.append(self._to_str(self.setpoint_2_node_name))
        out.append(self._to_str(self.component_2_flow_rate))
        out.append(self._to_str(self.operation_2_type))
        out.append(self._to_str(self.equipment_3_object_type))
        out.append(self._to_str(self.equipment_3_name))
        out.append(self._to_str(self.demand_calculation_3_node_name))
        out.append(self._to_str(self.setpoint_3_node_name))
        out.append(self._to_str(self.component_3_flow_rate))
        out.append(self._to_str(self.operation_3_type))
        out.append(self._to_str(self.equipment_4_object_type))
        out.append(self._to_str(self.equipment_4_name))
        out.append(self._to_str(self.demand_calculation_4_node_name))
        out.append(self._to_str(self.setpoint_4_node_name))
        out.append(self._to_str(self.component_4_flow_rate))
        out.append(self._to_str(self.operation_4_type))
        out.append(self._to_str(self.equipment_5_object_type))
        out.append(self._to_str(self.equipment_5_name))
        out.append(self._to_str(self.demand_calculation_5_node_name))
        out.append(self._to_str(self.setpoint_5_node_name))
        out.append(self._to_str(self.component_5_flow_rate))
        out.append(self._to_str(self.operation_5_type))
        out.append(self._to_str(self.equipment_6_object_type))
        out.append(self._to_str(self.equipment_6_name))
        out.append(self._to_str(self.demand_calculation_6_node_name))
        out.append(self._to_str(self.setpoint_6_node_name))
        out.append(self._to_str(self.component_6_flow_rate))
        out.append(self._to_str(self.operation_6_type))
        out.append(self._to_str(self.equipment_7_object_type))
        out.append(self._to_str(self.equipment_7_name))
        out.append(self._to_str(self.demand_calculation_7_node_name))
        out.append(self._to_str(self.setpoint_7_node_name))
        out.append(self._to_str(self.component_7_flow_rate))
        out.append(self._to_str(self.operation_7_type))
        out.append(self._to_str(self.equipment_8_object_type))
        out.append(self._to_str(self.equipment_8_name))
        out.append(self._to_str(self.demand_calculation_8_node_name))
        out.append(self._to_str(self.setpoint_8_node_name))
        out.append(self._to_str(self.component_8_flow_rate))
        out.append(self._to_str(self.operation_8_type))
        out.append(self._to_str(self.equipment_9_object_type))
        out.append(self._to_str(self.equipment_9_name))
        out.append(self._to_str(self.demand_calculation_9_node_name))
        out.append(self._to_str(self.setpoint_9_node_name))
        out.append(self._to_str(self.component_9_flow_rate))
        out.append(self._to_str(self.operation_9_type))
        out.append(self._to_str(self.equipment_10_object_type))
        out.append(self._to_str(self.equipment_10_name))
        out.append(self._to_str(self.demand_calculation_10_node_name))
        out.append(self._to_str(self.setpoint_10_node_name))
        out.append(self._to_str(self.component_10_flow_rate))
        out.append(self._to_str(self.operation_10_type))
        return ",".join(out)

class PlantEquipmentOperationOutdoorDryBulbDifference(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorDryBulbDifference`
        Plant equipment operation scheme for outdoor dry-bulb temperature difference
        operation. Specifies one or more groups of equipment which are available to operate
        for successive ranges based the difference between a reference node temperature and
        the outdoor dry-bulb temperature.
    """
    internal_name = "PlantEquipmentOperation:OutdoorDryBulbDifference"
    field_count = 32

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorDryBulbDifference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Temperature Node Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 1 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 2 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 3 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 4 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 5 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 6 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 7 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 8 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 9 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Dry-Bulb Temperature Difference Range 10 Lower Limit"] = None
        self._data["Dry-Bulb Temperature Difference Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_temperature_node_name = None
        else:
            self.reference_temperature_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_1_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_1_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_2_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_2_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_3_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_3_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_4_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_4_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_5_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_5_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_6_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_6_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_7_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_7_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_8_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_8_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_9_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_9_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_10_lower_limit = None
        else:
            self.drybulb_temperature_difference_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drybulb_temperature_difference_range_10_upper_limit = None
        else:
            self.drybulb_temperature_difference_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_temperature_node_name(self):
        """Get reference_temperature_node_name

        Returns:
            str: the value of `reference_temperature_node_name` or None if not set
        """
        return self._data["Reference Temperature Node Name"]

    @reference_temperature_node_name.setter
    def reference_temperature_node_name(self, value=None):
        """  Corresponds to IDD Field `reference_temperature_node_name`

        Args:
            value (str): value for IDD Field `reference_temperature_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reference_temperature_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reference_temperature_node_name`')

        self._data["Reference Temperature Node Name"] = value

    @property
    def drybulb_temperature_difference_range_1_lower_limit(self):
        """Get drybulb_temperature_difference_range_1_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_1_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 1 Lower Limit"]

    @drybulb_temperature_difference_range_1_lower_limit.setter
    def drybulb_temperature_difference_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_1_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_1_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_1_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_1_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 1 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_1_upper_limit(self):
        """Get drybulb_temperature_difference_range_1_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_1_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 1 Upper Limit"]

    @drybulb_temperature_difference_range_1_upper_limit.setter
    def drybulb_temperature_difference_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_1_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_1_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_1_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_1_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_2_lower_limit(self):
        """Get drybulb_temperature_difference_range_2_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_2_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 2 Lower Limit"]

    @drybulb_temperature_difference_range_2_lower_limit.setter
    def drybulb_temperature_difference_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_2_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_2_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_2_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_2_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 2 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_2_upper_limit(self):
        """Get drybulb_temperature_difference_range_2_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_2_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 2 Upper Limit"]

    @drybulb_temperature_difference_range_2_upper_limit.setter
    def drybulb_temperature_difference_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_2_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_2_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_2_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_2_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_3_lower_limit(self):
        """Get drybulb_temperature_difference_range_3_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_3_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 3 Lower Limit"]

    @drybulb_temperature_difference_range_3_lower_limit.setter
    def drybulb_temperature_difference_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_3_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_3_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_3_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_3_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 3 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_3_upper_limit(self):
        """Get drybulb_temperature_difference_range_3_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_3_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 3 Upper Limit"]

    @drybulb_temperature_difference_range_3_upper_limit.setter
    def drybulb_temperature_difference_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_3_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_3_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_3_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_3_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_4_lower_limit(self):
        """Get drybulb_temperature_difference_range_4_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_4_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 4 Lower Limit"]

    @drybulb_temperature_difference_range_4_lower_limit.setter
    def drybulb_temperature_difference_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_4_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_4_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_4_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_4_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 4 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_4_upper_limit(self):
        """Get drybulb_temperature_difference_range_4_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_4_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 4 Upper Limit"]

    @drybulb_temperature_difference_range_4_upper_limit.setter
    def drybulb_temperature_difference_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_4_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_4_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_4_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_4_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_5_lower_limit(self):
        """Get drybulb_temperature_difference_range_5_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_5_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 5 Lower Limit"]

    @drybulb_temperature_difference_range_5_lower_limit.setter
    def drybulb_temperature_difference_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_5_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_5_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_5_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_5_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 5 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_5_upper_limit(self):
        """Get drybulb_temperature_difference_range_5_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_5_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 5 Upper Limit"]

    @drybulb_temperature_difference_range_5_upper_limit.setter
    def drybulb_temperature_difference_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_5_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_5_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_5_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_5_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_6_lower_limit(self):
        """Get drybulb_temperature_difference_range_6_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_6_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 6 Lower Limit"]

    @drybulb_temperature_difference_range_6_lower_limit.setter
    def drybulb_temperature_difference_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_6_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_6_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_6_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_6_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 6 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_6_upper_limit(self):
        """Get drybulb_temperature_difference_range_6_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_6_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 6 Upper Limit"]

    @drybulb_temperature_difference_range_6_upper_limit.setter
    def drybulb_temperature_difference_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_6_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_6_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_6_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_6_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_7_lower_limit(self):
        """Get drybulb_temperature_difference_range_7_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_7_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 7 Lower Limit"]

    @drybulb_temperature_difference_range_7_lower_limit.setter
    def drybulb_temperature_difference_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_7_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_7_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_7_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_7_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 7 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_7_upper_limit(self):
        """Get drybulb_temperature_difference_range_7_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_7_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 7 Upper Limit"]

    @drybulb_temperature_difference_range_7_upper_limit.setter
    def drybulb_temperature_difference_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_7_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_7_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_7_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_7_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_8_lower_limit(self):
        """Get drybulb_temperature_difference_range_8_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_8_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 8 Lower Limit"]

    @drybulb_temperature_difference_range_8_lower_limit.setter
    def drybulb_temperature_difference_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_8_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_8_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_8_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_8_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 8 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_8_upper_limit(self):
        """Get drybulb_temperature_difference_range_8_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_8_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 8 Upper Limit"]

    @drybulb_temperature_difference_range_8_upper_limit.setter
    def drybulb_temperature_difference_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_8_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_8_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_8_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_8_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_9_lower_limit(self):
        """Get drybulb_temperature_difference_range_9_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_9_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 9 Lower Limit"]

    @drybulb_temperature_difference_range_9_lower_limit.setter
    def drybulb_temperature_difference_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_9_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_9_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_9_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_9_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 9 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_9_upper_limit(self):
        """Get drybulb_temperature_difference_range_9_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_9_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 9 Upper Limit"]

    @drybulb_temperature_difference_range_9_upper_limit.setter
    def drybulb_temperature_difference_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_9_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_9_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_9_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_9_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def drybulb_temperature_difference_range_10_lower_limit(self):
        """Get drybulb_temperature_difference_range_10_lower_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_10_lower_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 10 Lower Limit"]

    @drybulb_temperature_difference_range_10_lower_limit.setter
    def drybulb_temperature_difference_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_10_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_10_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_10_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_10_lower_limit`')

        self._data["Dry-Bulb Temperature Difference Range 10 Lower Limit"] = value

    @property
    def drybulb_temperature_difference_range_10_upper_limit(self):
        """Get drybulb_temperature_difference_range_10_upper_limit

        Returns:
            float: the value of `drybulb_temperature_difference_range_10_upper_limit` or None if not set
        """
        return self._data["Dry-Bulb Temperature Difference Range 10 Upper Limit"]

    @drybulb_temperature_difference_range_10_upper_limit.setter
    def drybulb_temperature_difference_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `drybulb_temperature_difference_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `drybulb_temperature_difference_range_10_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drybulb_temperature_difference_range_10_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `drybulb_temperature_difference_range_10_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `drybulb_temperature_difference_range_10_upper_limit`')

        self._data["Dry-Bulb Temperature Difference Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_temperature_node_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_1_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_2_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_3_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_4_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_5_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_6_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_7_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_8_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_9_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.drybulb_temperature_difference_range_10_lower_limit))
        out.append(self._to_str(self.drybulb_temperature_difference_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorWetBulbDifference(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorWetBulbDifference`
        Plant equipment operation scheme for outdoor wet-bulb temperature difference
        operation. Specifies one or more groups of equipment which are available to operate
        for successive ranges based the difference between a reference node temperature and
        the outdoor wet-bulb temperature.
    """
    internal_name = "PlantEquipmentOperation:OutdoorWetBulbDifference"
    field_count = 32

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorWetBulbDifference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Temperature Node Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 1 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 2 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 3 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 4 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 5 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 6 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 7 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 8 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 9 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Wet-Bulb Temperature Difference Range 10 Lower Limit"] = None
        self._data["Wet-Bulb Temperature Difference Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_temperature_node_name = None
        else:
            self.reference_temperature_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_1_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_1_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_2_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_2_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_3_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_3_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_4_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_4_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_5_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_5_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_6_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_6_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_7_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_7_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_8_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_8_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_9_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_9_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_10_lower_limit = None
        else:
            self.wetbulb_temperature_difference_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wetbulb_temperature_difference_range_10_upper_limit = None
        else:
            self.wetbulb_temperature_difference_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_temperature_node_name(self):
        """Get reference_temperature_node_name

        Returns:
            str: the value of `reference_temperature_node_name` or None if not set
        """
        return self._data["Reference Temperature Node Name"]

    @reference_temperature_node_name.setter
    def reference_temperature_node_name(self, value=None):
        """  Corresponds to IDD Field `reference_temperature_node_name`

        Args:
            value (str): value for IDD Field `reference_temperature_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reference_temperature_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reference_temperature_node_name`')

        self._data["Reference Temperature Node Name"] = value

    @property
    def wetbulb_temperature_difference_range_1_lower_limit(self):
        """Get wetbulb_temperature_difference_range_1_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_1_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 1 Lower Limit"]

    @wetbulb_temperature_difference_range_1_lower_limit.setter
    def wetbulb_temperature_difference_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_1_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_1_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_1_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_1_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 1 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_1_upper_limit(self):
        """Get wetbulb_temperature_difference_range_1_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_1_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 1 Upper Limit"]

    @wetbulb_temperature_difference_range_1_upper_limit.setter
    def wetbulb_temperature_difference_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_1_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_1_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_1_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_1_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_2_lower_limit(self):
        """Get wetbulb_temperature_difference_range_2_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_2_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 2 Lower Limit"]

    @wetbulb_temperature_difference_range_2_lower_limit.setter
    def wetbulb_temperature_difference_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_2_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_2_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_2_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_2_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 2 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_2_upper_limit(self):
        """Get wetbulb_temperature_difference_range_2_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_2_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 2 Upper Limit"]

    @wetbulb_temperature_difference_range_2_upper_limit.setter
    def wetbulb_temperature_difference_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_2_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_2_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_2_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_2_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_3_lower_limit(self):
        """Get wetbulb_temperature_difference_range_3_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_3_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 3 Lower Limit"]

    @wetbulb_temperature_difference_range_3_lower_limit.setter
    def wetbulb_temperature_difference_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_3_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_3_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_3_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_3_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 3 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_3_upper_limit(self):
        """Get wetbulb_temperature_difference_range_3_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_3_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 3 Upper Limit"]

    @wetbulb_temperature_difference_range_3_upper_limit.setter
    def wetbulb_temperature_difference_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_3_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_3_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_3_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_3_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_4_lower_limit(self):
        """Get wetbulb_temperature_difference_range_4_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_4_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 4 Lower Limit"]

    @wetbulb_temperature_difference_range_4_lower_limit.setter
    def wetbulb_temperature_difference_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_4_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_4_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_4_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_4_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 4 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_4_upper_limit(self):
        """Get wetbulb_temperature_difference_range_4_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_4_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 4 Upper Limit"]

    @wetbulb_temperature_difference_range_4_upper_limit.setter
    def wetbulb_temperature_difference_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_4_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_4_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_4_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_4_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_5_lower_limit(self):
        """Get wetbulb_temperature_difference_range_5_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_5_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 5 Lower Limit"]

    @wetbulb_temperature_difference_range_5_lower_limit.setter
    def wetbulb_temperature_difference_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_5_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_5_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_5_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_5_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 5 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_5_upper_limit(self):
        """Get wetbulb_temperature_difference_range_5_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_5_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 5 Upper Limit"]

    @wetbulb_temperature_difference_range_5_upper_limit.setter
    def wetbulb_temperature_difference_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_5_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_5_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_5_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_5_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_6_lower_limit(self):
        """Get wetbulb_temperature_difference_range_6_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_6_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 6 Lower Limit"]

    @wetbulb_temperature_difference_range_6_lower_limit.setter
    def wetbulb_temperature_difference_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_6_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_6_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_6_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_6_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 6 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_6_upper_limit(self):
        """Get wetbulb_temperature_difference_range_6_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_6_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 6 Upper Limit"]

    @wetbulb_temperature_difference_range_6_upper_limit.setter
    def wetbulb_temperature_difference_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_6_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_6_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_6_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_6_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_7_lower_limit(self):
        """Get wetbulb_temperature_difference_range_7_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_7_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 7 Lower Limit"]

    @wetbulb_temperature_difference_range_7_lower_limit.setter
    def wetbulb_temperature_difference_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_7_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_7_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_7_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_7_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 7 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_7_upper_limit(self):
        """Get wetbulb_temperature_difference_range_7_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_7_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 7 Upper Limit"]

    @wetbulb_temperature_difference_range_7_upper_limit.setter
    def wetbulb_temperature_difference_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_7_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_7_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_7_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_7_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_8_lower_limit(self):
        """Get wetbulb_temperature_difference_range_8_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_8_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 8 Lower Limit"]

    @wetbulb_temperature_difference_range_8_lower_limit.setter
    def wetbulb_temperature_difference_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_8_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_8_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_8_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_8_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 8 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_8_upper_limit(self):
        """Get wetbulb_temperature_difference_range_8_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_8_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 8 Upper Limit"]

    @wetbulb_temperature_difference_range_8_upper_limit.setter
    def wetbulb_temperature_difference_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_8_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_8_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_8_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_8_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_9_lower_limit(self):
        """Get wetbulb_temperature_difference_range_9_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_9_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 9 Lower Limit"]

    @wetbulb_temperature_difference_range_9_lower_limit.setter
    def wetbulb_temperature_difference_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_9_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_9_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_9_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_9_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 9 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_9_upper_limit(self):
        """Get wetbulb_temperature_difference_range_9_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_9_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 9 Upper Limit"]

    @wetbulb_temperature_difference_range_9_upper_limit.setter
    def wetbulb_temperature_difference_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_9_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_9_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_9_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_9_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def wetbulb_temperature_difference_range_10_lower_limit(self):
        """Get wetbulb_temperature_difference_range_10_lower_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_10_lower_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 10 Lower Limit"]

    @wetbulb_temperature_difference_range_10_lower_limit.setter
    def wetbulb_temperature_difference_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_10_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_10_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_10_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_10_lower_limit`')

        self._data["Wet-Bulb Temperature Difference Range 10 Lower Limit"] = value

    @property
    def wetbulb_temperature_difference_range_10_upper_limit(self):
        """Get wetbulb_temperature_difference_range_10_upper_limit

        Returns:
            float: the value of `wetbulb_temperature_difference_range_10_upper_limit` or None if not set
        """
        return self._data["Wet-Bulb Temperature Difference Range 10 Upper Limit"]

    @wetbulb_temperature_difference_range_10_upper_limit.setter
    def wetbulb_temperature_difference_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `wetbulb_temperature_difference_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `wetbulb_temperature_difference_range_10_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `wetbulb_temperature_difference_range_10_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `wetbulb_temperature_difference_range_10_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `wetbulb_temperature_difference_range_10_upper_limit`')

        self._data["Wet-Bulb Temperature Difference Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_temperature_node_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_1_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_2_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_3_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_4_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_5_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_6_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_7_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_8_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_9_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_10_lower_limit))
        out.append(self._to_str(self.wetbulb_temperature_difference_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationOutdoorDewpointDifference(object):
    """ Corresponds to IDD object `PlantEquipmentOperation:OutdoorDewpointDifference`
        Plant equipment operation scheme for outdoor dewpoint temperature difference
        operation. Specifies one or more groups of equipment which are available to operate
        for successive ranges based the difference between a reference node temperature and
        the outdoor dewpoint temperature.
    """
    internal_name = "PlantEquipmentOperation:OutdoorDewpointDifference"
    field_count = 32

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperation:OutdoorDewpointDifference`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Temperature Node Name"] = None
        self._data["Dewpoint Temperature Difference Range 1 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 1 Upper Limit"] = None
        self._data["Range 1 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 2 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 2 Upper Limit"] = None
        self._data["Range 2 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 3 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 3 Upper Limit"] = None
        self._data["Range 3 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 4 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 4 Upper Limit"] = None
        self._data["Range 4 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 5 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 5 Upper Limit"] = None
        self._data["Range 5 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 6 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 6 Upper Limit"] = None
        self._data["Range 6 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 7 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 7 Upper Limit"] = None
        self._data["Range 7 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 8 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 8 Upper Limit"] = None
        self._data["Range 8 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 9 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 9 Upper Limit"] = None
        self._data["Range 9 Equipment List Name"] = None
        self._data["Dewpoint Temperature Difference Range 10 Lower Limit"] = None
        self._data["Dewpoint Temperature Difference Range 10 Upper Limit"] = None
        self._data["Range 10 Equipment List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_temperature_node_name = None
        else:
            self.reference_temperature_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_1_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_1_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_1_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_1_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_1_equipment_list_name = None
        else:
            self.range_1_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_2_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_2_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_2_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_2_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_2_equipment_list_name = None
        else:
            self.range_2_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_3_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_3_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_3_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_3_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_3_equipment_list_name = None
        else:
            self.range_3_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_4_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_4_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_4_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_4_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_4_equipment_list_name = None
        else:
            self.range_4_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_5_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_5_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_5_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_5_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_5_equipment_list_name = None
        else:
            self.range_5_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_6_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_6_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_6_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_6_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_6_equipment_list_name = None
        else:
            self.range_6_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_7_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_7_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_7_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_7_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_7_equipment_list_name = None
        else:
            self.range_7_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_8_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_8_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_8_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_8_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_8_equipment_list_name = None
        else:
            self.range_8_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_9_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_9_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_9_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_9_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_9_equipment_list_name = None
        else:
            self.range_9_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_10_lower_limit = None
        else:
            self.dewpoint_temperature_difference_range_10_lower_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_difference_range_10_upper_limit = None
        else:
            self.dewpoint_temperature_difference_range_10_upper_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.range_10_equipment_list_name = None
        else:
            self.range_10_equipment_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_temperature_node_name(self):
        """Get reference_temperature_node_name

        Returns:
            str: the value of `reference_temperature_node_name` or None if not set
        """
        return self._data["Reference Temperature Node Name"]

    @reference_temperature_node_name.setter
    def reference_temperature_node_name(self, value=None):
        """  Corresponds to IDD Field `reference_temperature_node_name`

        Args:
            value (str): value for IDD Field `reference_temperature_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reference_temperature_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reference_temperature_node_name`')

        self._data["Reference Temperature Node Name"] = value

    @property
    def dewpoint_temperature_difference_range_1_lower_limit(self):
        """Get dewpoint_temperature_difference_range_1_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_1_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 1 Lower Limit"]

    @dewpoint_temperature_difference_range_1_lower_limit.setter
    def dewpoint_temperature_difference_range_1_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_1_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_1_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_1_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_1_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_1_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 1 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_1_upper_limit(self):
        """Get dewpoint_temperature_difference_range_1_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_1_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 1 Upper Limit"]

    @dewpoint_temperature_difference_range_1_upper_limit.setter
    def dewpoint_temperature_difference_range_1_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_1_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_1_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_1_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_1_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_1_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 1 Upper Limit"] = value

    @property
    def range_1_equipment_list_name(self):
        """Get range_1_equipment_list_name

        Returns:
            str: the value of `range_1_equipment_list_name` or None if not set
        """
        return self._data["Range 1 Equipment List Name"]

    @range_1_equipment_list_name.setter
    def range_1_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_1_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_1_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_1_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_1_equipment_list_name`')

        self._data["Range 1 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_2_lower_limit(self):
        """Get dewpoint_temperature_difference_range_2_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_2_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 2 Lower Limit"]

    @dewpoint_temperature_difference_range_2_lower_limit.setter
    def dewpoint_temperature_difference_range_2_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_2_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_2_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_2_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_2_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_2_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 2 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_2_upper_limit(self):
        """Get dewpoint_temperature_difference_range_2_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_2_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 2 Upper Limit"]

    @dewpoint_temperature_difference_range_2_upper_limit.setter
    def dewpoint_temperature_difference_range_2_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_2_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_2_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_2_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_2_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_2_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 2 Upper Limit"] = value

    @property
    def range_2_equipment_list_name(self):
        """Get range_2_equipment_list_name

        Returns:
            str: the value of `range_2_equipment_list_name` or None if not set
        """
        return self._data["Range 2 Equipment List Name"]

    @range_2_equipment_list_name.setter
    def range_2_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_2_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_2_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_2_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_2_equipment_list_name`')

        self._data["Range 2 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_3_lower_limit(self):
        """Get dewpoint_temperature_difference_range_3_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_3_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 3 Lower Limit"]

    @dewpoint_temperature_difference_range_3_lower_limit.setter
    def dewpoint_temperature_difference_range_3_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_3_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_3_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_3_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_3_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_3_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 3 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_3_upper_limit(self):
        """Get dewpoint_temperature_difference_range_3_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_3_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 3 Upper Limit"]

    @dewpoint_temperature_difference_range_3_upper_limit.setter
    def dewpoint_temperature_difference_range_3_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_3_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_3_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_3_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_3_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_3_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 3 Upper Limit"] = value

    @property
    def range_3_equipment_list_name(self):
        """Get range_3_equipment_list_name

        Returns:
            str: the value of `range_3_equipment_list_name` or None if not set
        """
        return self._data["Range 3 Equipment List Name"]

    @range_3_equipment_list_name.setter
    def range_3_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_3_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_3_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_3_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_3_equipment_list_name`')

        self._data["Range 3 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_4_lower_limit(self):
        """Get dewpoint_temperature_difference_range_4_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_4_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 4 Lower Limit"]

    @dewpoint_temperature_difference_range_4_lower_limit.setter
    def dewpoint_temperature_difference_range_4_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_4_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_4_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_4_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_4_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_4_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 4 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_4_upper_limit(self):
        """Get dewpoint_temperature_difference_range_4_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_4_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 4 Upper Limit"]

    @dewpoint_temperature_difference_range_4_upper_limit.setter
    def dewpoint_temperature_difference_range_4_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_4_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_4_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_4_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_4_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_4_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 4 Upper Limit"] = value

    @property
    def range_4_equipment_list_name(self):
        """Get range_4_equipment_list_name

        Returns:
            str: the value of `range_4_equipment_list_name` or None if not set
        """
        return self._data["Range 4 Equipment List Name"]

    @range_4_equipment_list_name.setter
    def range_4_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_4_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_4_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_4_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_4_equipment_list_name`')

        self._data["Range 4 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_5_lower_limit(self):
        """Get dewpoint_temperature_difference_range_5_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_5_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 5 Lower Limit"]

    @dewpoint_temperature_difference_range_5_lower_limit.setter
    def dewpoint_temperature_difference_range_5_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_5_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_5_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_5_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_5_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_5_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 5 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_5_upper_limit(self):
        """Get dewpoint_temperature_difference_range_5_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_5_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 5 Upper Limit"]

    @dewpoint_temperature_difference_range_5_upper_limit.setter
    def dewpoint_temperature_difference_range_5_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_5_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_5_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_5_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_5_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_5_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 5 Upper Limit"] = value

    @property
    def range_5_equipment_list_name(self):
        """Get range_5_equipment_list_name

        Returns:
            str: the value of `range_5_equipment_list_name` or None if not set
        """
        return self._data["Range 5 Equipment List Name"]

    @range_5_equipment_list_name.setter
    def range_5_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_5_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_5_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_5_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_5_equipment_list_name`')

        self._data["Range 5 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_6_lower_limit(self):
        """Get dewpoint_temperature_difference_range_6_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_6_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 6 Lower Limit"]

    @dewpoint_temperature_difference_range_6_lower_limit.setter
    def dewpoint_temperature_difference_range_6_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_6_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_6_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_6_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_6_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_6_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 6 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_6_upper_limit(self):
        """Get dewpoint_temperature_difference_range_6_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_6_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 6 Upper Limit"]

    @dewpoint_temperature_difference_range_6_upper_limit.setter
    def dewpoint_temperature_difference_range_6_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_6_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_6_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_6_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_6_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_6_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 6 Upper Limit"] = value

    @property
    def range_6_equipment_list_name(self):
        """Get range_6_equipment_list_name

        Returns:
            str: the value of `range_6_equipment_list_name` or None if not set
        """
        return self._data["Range 6 Equipment List Name"]

    @range_6_equipment_list_name.setter
    def range_6_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_6_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_6_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_6_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_6_equipment_list_name`')

        self._data["Range 6 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_7_lower_limit(self):
        """Get dewpoint_temperature_difference_range_7_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_7_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 7 Lower Limit"]

    @dewpoint_temperature_difference_range_7_lower_limit.setter
    def dewpoint_temperature_difference_range_7_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_7_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_7_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_7_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_7_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_7_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 7 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_7_upper_limit(self):
        """Get dewpoint_temperature_difference_range_7_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_7_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 7 Upper Limit"]

    @dewpoint_temperature_difference_range_7_upper_limit.setter
    def dewpoint_temperature_difference_range_7_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_7_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_7_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_7_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_7_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_7_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 7 Upper Limit"] = value

    @property
    def range_7_equipment_list_name(self):
        """Get range_7_equipment_list_name

        Returns:
            str: the value of `range_7_equipment_list_name` or None if not set
        """
        return self._data["Range 7 Equipment List Name"]

    @range_7_equipment_list_name.setter
    def range_7_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_7_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_7_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_7_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_7_equipment_list_name`')

        self._data["Range 7 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_8_lower_limit(self):
        """Get dewpoint_temperature_difference_range_8_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_8_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 8 Lower Limit"]

    @dewpoint_temperature_difference_range_8_lower_limit.setter
    def dewpoint_temperature_difference_range_8_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_8_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_8_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_8_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_8_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_8_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 8 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_8_upper_limit(self):
        """Get dewpoint_temperature_difference_range_8_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_8_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 8 Upper Limit"]

    @dewpoint_temperature_difference_range_8_upper_limit.setter
    def dewpoint_temperature_difference_range_8_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_8_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_8_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_8_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_8_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_8_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 8 Upper Limit"] = value

    @property
    def range_8_equipment_list_name(self):
        """Get range_8_equipment_list_name

        Returns:
            str: the value of `range_8_equipment_list_name` or None if not set
        """
        return self._data["Range 8 Equipment List Name"]

    @range_8_equipment_list_name.setter
    def range_8_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_8_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_8_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_8_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_8_equipment_list_name`')

        self._data["Range 8 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_9_lower_limit(self):
        """Get dewpoint_temperature_difference_range_9_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_9_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 9 Lower Limit"]

    @dewpoint_temperature_difference_range_9_lower_limit.setter
    def dewpoint_temperature_difference_range_9_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_9_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_9_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_9_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_9_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_9_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 9 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_9_upper_limit(self):
        """Get dewpoint_temperature_difference_range_9_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_9_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 9 Upper Limit"]

    @dewpoint_temperature_difference_range_9_upper_limit.setter
    def dewpoint_temperature_difference_range_9_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_9_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_9_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_9_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_9_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_9_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 9 Upper Limit"] = value

    @property
    def range_9_equipment_list_name(self):
        """Get range_9_equipment_list_name

        Returns:
            str: the value of `range_9_equipment_list_name` or None if not set
        """
        return self._data["Range 9 Equipment List Name"]

    @range_9_equipment_list_name.setter
    def range_9_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_9_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_9_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_9_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_9_equipment_list_name`')

        self._data["Range 9 Equipment List Name"] = value

    @property
    def dewpoint_temperature_difference_range_10_lower_limit(self):
        """Get dewpoint_temperature_difference_range_10_lower_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_10_lower_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 10 Lower Limit"]

    @dewpoint_temperature_difference_range_10_lower_limit.setter
    def dewpoint_temperature_difference_range_10_lower_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_10_lower_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_10_lower_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_10_lower_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_10_lower_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_10_lower_limit`')

        self._data["Dewpoint Temperature Difference Range 10 Lower Limit"] = value

    @property
    def dewpoint_temperature_difference_range_10_upper_limit(self):
        """Get dewpoint_temperature_difference_range_10_upper_limit

        Returns:
            float: the value of `dewpoint_temperature_difference_range_10_upper_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Difference Range 10 Upper Limit"]

    @dewpoint_temperature_difference_range_10_upper_limit.setter
    def dewpoint_temperature_difference_range_10_upper_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_difference_range_10_upper_limit`

        Args:
            value (float): value for IDD Field `dewpoint_temperature_difference_range_10_upper_limit`
                Unit: deltaC
                value >= -50.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_difference_range_10_upper_limit`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `dewpoint_temperature_difference_range_10_upper_limit`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `dewpoint_temperature_difference_range_10_upper_limit`')

        self._data["Dewpoint Temperature Difference Range 10 Upper Limit"] = value

    @property
    def range_10_equipment_list_name(self):
        """Get range_10_equipment_list_name

        Returns:
            str: the value of `range_10_equipment_list_name` or None if not set
        """
        return self._data["Range 10 Equipment List Name"]

    @range_10_equipment_list_name.setter
    def range_10_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `range_10_equipment_list_name`

        Args:
            value (str): value for IDD Field `range_10_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `range_10_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `range_10_equipment_list_name`')

        self._data["Range 10 Equipment List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_temperature_node_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_1_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_1_upper_limit))
        out.append(self._to_str(self.range_1_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_2_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_2_upper_limit))
        out.append(self._to_str(self.range_2_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_3_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_3_upper_limit))
        out.append(self._to_str(self.range_3_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_4_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_4_upper_limit))
        out.append(self._to_str(self.range_4_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_5_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_5_upper_limit))
        out.append(self._to_str(self.range_5_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_6_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_6_upper_limit))
        out.append(self._to_str(self.range_6_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_7_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_7_upper_limit))
        out.append(self._to_str(self.range_7_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_8_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_8_upper_limit))
        out.append(self._to_str(self.range_8_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_9_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_9_upper_limit))
        out.append(self._to_str(self.range_9_equipment_list_name))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_10_lower_limit))
        out.append(self._to_str(self.dewpoint_temperature_difference_range_10_upper_limit))
        out.append(self._to_str(self.range_10_equipment_list_name))
        return ",".join(out)

class PlantEquipmentOperationSchemes(object):
    """ Corresponds to IDD object `PlantEquipmentOperationSchemes`
        Operation schemes are listed in "priority" order.  Note that each scheme
        must address the entire load and/or condition ranges for the simulation.
        The actual one selected for use will be the first that is "Scheduled"
        on.  That is, if control scheme 1 is not "on" and control scheme 2
        is -- then control scheme 2 is selected.
        Only plant equipment should be listed on a Control Scheme for this item.
    """
    internal_name = "PlantEquipmentOperationSchemes"
    field_count = 25

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantEquipmentOperationSchemes`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Control Scheme 1 Object Type"] = None
        self._data["Control Scheme 1 Name"] = None
        self._data["Control Scheme 1 Schedule Name"] = None
        self._data["Control Scheme 2 Object Type"] = None
        self._data["Control Scheme 2 Name"] = None
        self._data["Control Scheme 2 Schedule Name"] = None
        self._data["Control Scheme 3 Object Type"] = None
        self._data["Control Scheme 3 Name"] = None
        self._data["Control Scheme 3 Schedule Name"] = None
        self._data["Control Scheme 4 Object Type"] = None
        self._data["Control Scheme 4 Name"] = None
        self._data["Control Scheme 4 Schedule Name"] = None
        self._data["Control Scheme 5 Object Type"] = None
        self._data["Control Scheme 5 Name"] = None
        self._data["Control Scheme 5 Schedule Name"] = None
        self._data["Control Scheme 6 Object Type"] = None
        self._data["Control Scheme 6 Name"] = None
        self._data["Control Scheme 6 Schedule Name"] = None
        self._data["Control Scheme 7 Object Type"] = None
        self._data["Control Scheme 7 Name"] = None
        self._data["Control Scheme 7 Schedule Name"] = None
        self._data["Control Scheme 8 Object Type"] = None
        self._data["Control Scheme 8 Name"] = None
        self._data["Control Scheme 8 Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_object_type = None
        else:
            self.control_scheme_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_name = None
        else:
            self.control_scheme_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_schedule_name = None
        else:
            self.control_scheme_1_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_object_type = None
        else:
            self.control_scheme_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_name = None
        else:
            self.control_scheme_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_schedule_name = None
        else:
            self.control_scheme_2_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_object_type = None
        else:
            self.control_scheme_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_name = None
        else:
            self.control_scheme_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_schedule_name = None
        else:
            self.control_scheme_3_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_object_type = None
        else:
            self.control_scheme_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_name = None
        else:
            self.control_scheme_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_schedule_name = None
        else:
            self.control_scheme_4_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_object_type = None
        else:
            self.control_scheme_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_name = None
        else:
            self.control_scheme_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_schedule_name = None
        else:
            self.control_scheme_5_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_object_type = None
        else:
            self.control_scheme_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_name = None
        else:
            self.control_scheme_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_schedule_name = None
        else:
            self.control_scheme_6_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_object_type = None
        else:
            self.control_scheme_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_name = None
        else:
            self.control_scheme_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_schedule_name = None
        else:
            self.control_scheme_7_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_object_type = None
        else:
            self.control_scheme_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_name = None
        else:
            self.control_scheme_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_schedule_name = None
        else:
            self.control_scheme_8_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def control_scheme_1_object_type(self):
        """Get control_scheme_1_object_type

        Returns:
            str: the value of `control_scheme_1_object_type` or None if not set
        """
        return self._data["Control Scheme 1 Object Type"]

    @control_scheme_1_object_type.setter
    def control_scheme_1_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_1_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_1_object_type`'.format(value))

        self._data["Control Scheme 1 Object Type"] = value

    @property
    def control_scheme_1_name(self):
        """Get control_scheme_1_name

        Returns:
            str: the value of `control_scheme_1_name` or None if not set
        """
        return self._data["Control Scheme 1 Name"]

    @control_scheme_1_name.setter
    def control_scheme_1_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_name`

        Args:
            value (str): value for IDD Field `control_scheme_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_name`')

        self._data["Control Scheme 1 Name"] = value

    @property
    def control_scheme_1_schedule_name(self):
        """Get control_scheme_1_schedule_name

        Returns:
            str: the value of `control_scheme_1_schedule_name` or None if not set
        """
        return self._data["Control Scheme 1 Schedule Name"]

    @control_scheme_1_schedule_name.setter
    def control_scheme_1_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_1_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_schedule_name`')

        self._data["Control Scheme 1 Schedule Name"] = value

    @property
    def control_scheme_2_object_type(self):
        """Get control_scheme_2_object_type

        Returns:
            str: the value of `control_scheme_2_object_type` or None if not set
        """
        return self._data["Control Scheme 2 Object Type"]

    @control_scheme_2_object_type.setter
    def control_scheme_2_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_2_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_2_object_type`'.format(value))

        self._data["Control Scheme 2 Object Type"] = value

    @property
    def control_scheme_2_name(self):
        """Get control_scheme_2_name

        Returns:
            str: the value of `control_scheme_2_name` or None if not set
        """
        return self._data["Control Scheme 2 Name"]

    @control_scheme_2_name.setter
    def control_scheme_2_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_name`

        Args:
            value (str): value for IDD Field `control_scheme_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_name`')

        self._data["Control Scheme 2 Name"] = value

    @property
    def control_scheme_2_schedule_name(self):
        """Get control_scheme_2_schedule_name

        Returns:
            str: the value of `control_scheme_2_schedule_name` or None if not set
        """
        return self._data["Control Scheme 2 Schedule Name"]

    @control_scheme_2_schedule_name.setter
    def control_scheme_2_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_2_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_schedule_name`')

        self._data["Control Scheme 2 Schedule Name"] = value

    @property
    def control_scheme_3_object_type(self):
        """Get control_scheme_3_object_type

        Returns:
            str: the value of `control_scheme_3_object_type` or None if not set
        """
        return self._data["Control Scheme 3 Object Type"]

    @control_scheme_3_object_type.setter
    def control_scheme_3_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_3_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_3_object_type`'.format(value))

        self._data["Control Scheme 3 Object Type"] = value

    @property
    def control_scheme_3_name(self):
        """Get control_scheme_3_name

        Returns:
            str: the value of `control_scheme_3_name` or None if not set
        """
        return self._data["Control Scheme 3 Name"]

    @control_scheme_3_name.setter
    def control_scheme_3_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_name`

        Args:
            value (str): value for IDD Field `control_scheme_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_name`')

        self._data["Control Scheme 3 Name"] = value

    @property
    def control_scheme_3_schedule_name(self):
        """Get control_scheme_3_schedule_name

        Returns:
            str: the value of `control_scheme_3_schedule_name` or None if not set
        """
        return self._data["Control Scheme 3 Schedule Name"]

    @control_scheme_3_schedule_name.setter
    def control_scheme_3_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_3_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_schedule_name`')

        self._data["Control Scheme 3 Schedule Name"] = value

    @property
    def control_scheme_4_object_type(self):
        """Get control_scheme_4_object_type

        Returns:
            str: the value of `control_scheme_4_object_type` or None if not set
        """
        return self._data["Control Scheme 4 Object Type"]

    @control_scheme_4_object_type.setter
    def control_scheme_4_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_4_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_4_object_type`'.format(value))

        self._data["Control Scheme 4 Object Type"] = value

    @property
    def control_scheme_4_name(self):
        """Get control_scheme_4_name

        Returns:
            str: the value of `control_scheme_4_name` or None if not set
        """
        return self._data["Control Scheme 4 Name"]

    @control_scheme_4_name.setter
    def control_scheme_4_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_name`

        Args:
            value (str): value for IDD Field `control_scheme_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_name`')

        self._data["Control Scheme 4 Name"] = value

    @property
    def control_scheme_4_schedule_name(self):
        """Get control_scheme_4_schedule_name

        Returns:
            str: the value of `control_scheme_4_schedule_name` or None if not set
        """
        return self._data["Control Scheme 4 Schedule Name"]

    @control_scheme_4_schedule_name.setter
    def control_scheme_4_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_4_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_schedule_name`')

        self._data["Control Scheme 4 Schedule Name"] = value

    @property
    def control_scheme_5_object_type(self):
        """Get control_scheme_5_object_type

        Returns:
            str: the value of `control_scheme_5_object_type` or None if not set
        """
        return self._data["Control Scheme 5 Object Type"]

    @control_scheme_5_object_type.setter
    def control_scheme_5_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_5_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_5_object_type`'.format(value))

        self._data["Control Scheme 5 Object Type"] = value

    @property
    def control_scheme_5_name(self):
        """Get control_scheme_5_name

        Returns:
            str: the value of `control_scheme_5_name` or None if not set
        """
        return self._data["Control Scheme 5 Name"]

    @control_scheme_5_name.setter
    def control_scheme_5_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_name`

        Args:
            value (str): value for IDD Field `control_scheme_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_name`')

        self._data["Control Scheme 5 Name"] = value

    @property
    def control_scheme_5_schedule_name(self):
        """Get control_scheme_5_schedule_name

        Returns:
            str: the value of `control_scheme_5_schedule_name` or None if not set
        """
        return self._data["Control Scheme 5 Schedule Name"]

    @control_scheme_5_schedule_name.setter
    def control_scheme_5_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_5_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_schedule_name`')

        self._data["Control Scheme 5 Schedule Name"] = value

    @property
    def control_scheme_6_object_type(self):
        """Get control_scheme_6_object_type

        Returns:
            str: the value of `control_scheme_6_object_type` or None if not set
        """
        return self._data["Control Scheme 6 Object Type"]

    @control_scheme_6_object_type.setter
    def control_scheme_6_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_6_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_6_object_type`'.format(value))

        self._data["Control Scheme 6 Object Type"] = value

    @property
    def control_scheme_6_name(self):
        """Get control_scheme_6_name

        Returns:
            str: the value of `control_scheme_6_name` or None if not set
        """
        return self._data["Control Scheme 6 Name"]

    @control_scheme_6_name.setter
    def control_scheme_6_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_name`

        Args:
            value (str): value for IDD Field `control_scheme_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_name`')

        self._data["Control Scheme 6 Name"] = value

    @property
    def control_scheme_6_schedule_name(self):
        """Get control_scheme_6_schedule_name

        Returns:
            str: the value of `control_scheme_6_schedule_name` or None if not set
        """
        return self._data["Control Scheme 6 Schedule Name"]

    @control_scheme_6_schedule_name.setter
    def control_scheme_6_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_6_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_schedule_name`')

        self._data["Control Scheme 6 Schedule Name"] = value

    @property
    def control_scheme_7_object_type(self):
        """Get control_scheme_7_object_type

        Returns:
            str: the value of `control_scheme_7_object_type` or None if not set
        """
        return self._data["Control Scheme 7 Object Type"]

    @control_scheme_7_object_type.setter
    def control_scheme_7_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_7_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_7_object_type`'.format(value))

        self._data["Control Scheme 7 Object Type"] = value

    @property
    def control_scheme_7_name(self):
        """Get control_scheme_7_name

        Returns:
            str: the value of `control_scheme_7_name` or None if not set
        """
        return self._data["Control Scheme 7 Name"]

    @control_scheme_7_name.setter
    def control_scheme_7_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_name`

        Args:
            value (str): value for IDD Field `control_scheme_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_name`')

        self._data["Control Scheme 7 Name"] = value

    @property
    def control_scheme_7_schedule_name(self):
        """Get control_scheme_7_schedule_name

        Returns:
            str: the value of `control_scheme_7_schedule_name` or None if not set
        """
        return self._data["Control Scheme 7 Schedule Name"]

    @control_scheme_7_schedule_name.setter
    def control_scheme_7_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_7_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_schedule_name`')

        self._data["Control Scheme 7 Schedule Name"] = value

    @property
    def control_scheme_8_object_type(self):
        """Get control_scheme_8_object_type

        Returns:
            str: the value of `control_scheme_8_object_type` or None if not set
        """
        return self._data["Control Scheme 8 Object Type"]

    @control_scheme_8_object_type.setter
    def control_scheme_8_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_8_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:ComponentSetpoint
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:ComponentSetpoint")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_8_object_type`'.format(value))

        self._data["Control Scheme 8 Object Type"] = value

    @property
    def control_scheme_8_name(self):
        """Get control_scheme_8_name

        Returns:
            str: the value of `control_scheme_8_name` or None if not set
        """
        return self._data["Control Scheme 8 Name"]

    @control_scheme_8_name.setter
    def control_scheme_8_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_name`

        Args:
            value (str): value for IDD Field `control_scheme_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_name`')

        self._data["Control Scheme 8 Name"] = value

    @property
    def control_scheme_8_schedule_name(self):
        """Get control_scheme_8_schedule_name

        Returns:
            str: the value of `control_scheme_8_schedule_name` or None if not set
        """
        return self._data["Control Scheme 8 Schedule Name"]

    @control_scheme_8_schedule_name.setter
    def control_scheme_8_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_8_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_schedule_name`')

        self._data["Control Scheme 8 Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.control_scheme_1_object_type))
        out.append(self._to_str(self.control_scheme_1_name))
        out.append(self._to_str(self.control_scheme_1_schedule_name))
        out.append(self._to_str(self.control_scheme_2_object_type))
        out.append(self._to_str(self.control_scheme_2_name))
        out.append(self._to_str(self.control_scheme_2_schedule_name))
        out.append(self._to_str(self.control_scheme_3_object_type))
        out.append(self._to_str(self.control_scheme_3_name))
        out.append(self._to_str(self.control_scheme_3_schedule_name))
        out.append(self._to_str(self.control_scheme_4_object_type))
        out.append(self._to_str(self.control_scheme_4_name))
        out.append(self._to_str(self.control_scheme_4_schedule_name))
        out.append(self._to_str(self.control_scheme_5_object_type))
        out.append(self._to_str(self.control_scheme_5_name))
        out.append(self._to_str(self.control_scheme_5_schedule_name))
        out.append(self._to_str(self.control_scheme_6_object_type))
        out.append(self._to_str(self.control_scheme_6_name))
        out.append(self._to_str(self.control_scheme_6_schedule_name))
        out.append(self._to_str(self.control_scheme_7_object_type))
        out.append(self._to_str(self.control_scheme_7_name))
        out.append(self._to_str(self.control_scheme_7_schedule_name))
        out.append(self._to_str(self.control_scheme_8_object_type))
        out.append(self._to_str(self.control_scheme_8_name))
        out.append(self._to_str(self.control_scheme_8_schedule_name))
        return ",".join(out)

class CondenserEquipmentOperationSchemes(object):
    """ Corresponds to IDD object `CondenserEquipmentOperationSchemes`
        Operation schemes are listed in "priority" order.  Note that each scheme
        must address the entire load and/or condition ranges for the simulation.
        The actual one selected for use will be the first that is "Scheduled"
        on.  That is, if control scheme 1 is not "on" and control scheme 2
        is -- then control scheme 2 is selected.
        Only condenser equipment should be listed on a Control Scheme for this item.
    """
    internal_name = "CondenserEquipmentOperationSchemes"
    field_count = 25

    def __init__(self):
        """ Init data dictionary object for IDD  `CondenserEquipmentOperationSchemes`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Control Scheme 1 Object Type"] = None
        self._data["Control Scheme 1 Name"] = None
        self._data["Control Scheme 1 Schedule Name"] = None
        self._data["Control Scheme 2 Object Type"] = None
        self._data["Control Scheme 2 Name"] = None
        self._data["Control Scheme 2 Schedule Name"] = None
        self._data["Control Scheme 3 Object Type"] = None
        self._data["Control Scheme 3 Name"] = None
        self._data["Control Scheme 3 Schedule Name"] = None
        self._data["Control Scheme 4 Object Type"] = None
        self._data["Control Scheme 4 Name"] = None
        self._data["Control Scheme 4 Schedule Name"] = None
        self._data["Control Scheme 5 Object Type"] = None
        self._data["Control Scheme 5 Name"] = None
        self._data["Control Scheme 5 Schedule Name"] = None
        self._data["Control Scheme 6 Object Type"] = None
        self._data["Control Scheme 6 Name"] = None
        self._data["Control Scheme 6 Schedule Name"] = None
        self._data["Control Scheme 7 Object Type"] = None
        self._data["Control Scheme 7 Name"] = None
        self._data["Control Scheme 7 Schedule Name"] = None
        self._data["Control Scheme 8 Object Type"] = None
        self._data["Control Scheme 8 Name"] = None
        self._data["Control Scheme 8 Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_object_type = None
        else:
            self.control_scheme_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_name = None
        else:
            self.control_scheme_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_1_schedule_name = None
        else:
            self.control_scheme_1_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_object_type = None
        else:
            self.control_scheme_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_name = None
        else:
            self.control_scheme_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_2_schedule_name = None
        else:
            self.control_scheme_2_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_object_type = None
        else:
            self.control_scheme_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_name = None
        else:
            self.control_scheme_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_3_schedule_name = None
        else:
            self.control_scheme_3_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_object_type = None
        else:
            self.control_scheme_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_name = None
        else:
            self.control_scheme_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_4_schedule_name = None
        else:
            self.control_scheme_4_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_object_type = None
        else:
            self.control_scheme_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_name = None
        else:
            self.control_scheme_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_5_schedule_name = None
        else:
            self.control_scheme_5_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_object_type = None
        else:
            self.control_scheme_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_name = None
        else:
            self.control_scheme_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_6_schedule_name = None
        else:
            self.control_scheme_6_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_object_type = None
        else:
            self.control_scheme_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_name = None
        else:
            self.control_scheme_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_7_schedule_name = None
        else:
            self.control_scheme_7_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_object_type = None
        else:
            self.control_scheme_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_name = None
        else:
            self.control_scheme_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_scheme_8_schedule_name = None
        else:
            self.control_scheme_8_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def control_scheme_1_object_type(self):
        """Get control_scheme_1_object_type

        Returns:
            str: the value of `control_scheme_1_object_type` or None if not set
        """
        return self._data["Control Scheme 1 Object Type"]

    @control_scheme_1_object_type.setter
    def control_scheme_1_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_1_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_1_object_type`'.format(value))

        self._data["Control Scheme 1 Object Type"] = value

    @property
    def control_scheme_1_name(self):
        """Get control_scheme_1_name

        Returns:
            str: the value of `control_scheme_1_name` or None if not set
        """
        return self._data["Control Scheme 1 Name"]

    @control_scheme_1_name.setter
    def control_scheme_1_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_name`

        Args:
            value (str): value for IDD Field `control_scheme_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_name`')

        self._data["Control Scheme 1 Name"] = value

    @property
    def control_scheme_1_schedule_name(self):
        """Get control_scheme_1_schedule_name

        Returns:
            str: the value of `control_scheme_1_schedule_name` or None if not set
        """
        return self._data["Control Scheme 1 Schedule Name"]

    @control_scheme_1_schedule_name.setter
    def control_scheme_1_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_1_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_1_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_1_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_1_schedule_name`')

        self._data["Control Scheme 1 Schedule Name"] = value

    @property
    def control_scheme_2_object_type(self):
        """Get control_scheme_2_object_type

        Returns:
            str: the value of `control_scheme_2_object_type` or None if not set
        """
        return self._data["Control Scheme 2 Object Type"]

    @control_scheme_2_object_type.setter
    def control_scheme_2_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_2_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_2_object_type`'.format(value))

        self._data["Control Scheme 2 Object Type"] = value

    @property
    def control_scheme_2_name(self):
        """Get control_scheme_2_name

        Returns:
            str: the value of `control_scheme_2_name` or None if not set
        """
        return self._data["Control Scheme 2 Name"]

    @control_scheme_2_name.setter
    def control_scheme_2_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_name`

        Args:
            value (str): value for IDD Field `control_scheme_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_name`')

        self._data["Control Scheme 2 Name"] = value

    @property
    def control_scheme_2_schedule_name(self):
        """Get control_scheme_2_schedule_name

        Returns:
            str: the value of `control_scheme_2_schedule_name` or None if not set
        """
        return self._data["Control Scheme 2 Schedule Name"]

    @control_scheme_2_schedule_name.setter
    def control_scheme_2_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_2_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_2_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_2_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_2_schedule_name`')

        self._data["Control Scheme 2 Schedule Name"] = value

    @property
    def control_scheme_3_object_type(self):
        """Get control_scheme_3_object_type

        Returns:
            str: the value of `control_scheme_3_object_type` or None if not set
        """
        return self._data["Control Scheme 3 Object Type"]

    @control_scheme_3_object_type.setter
    def control_scheme_3_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_3_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_3_object_type`'.format(value))

        self._data["Control Scheme 3 Object Type"] = value

    @property
    def control_scheme_3_name(self):
        """Get control_scheme_3_name

        Returns:
            str: the value of `control_scheme_3_name` or None if not set
        """
        return self._data["Control Scheme 3 Name"]

    @control_scheme_3_name.setter
    def control_scheme_3_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_name`

        Args:
            value (str): value for IDD Field `control_scheme_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_name`')

        self._data["Control Scheme 3 Name"] = value

    @property
    def control_scheme_3_schedule_name(self):
        """Get control_scheme_3_schedule_name

        Returns:
            str: the value of `control_scheme_3_schedule_name` or None if not set
        """
        return self._data["Control Scheme 3 Schedule Name"]

    @control_scheme_3_schedule_name.setter
    def control_scheme_3_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_3_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_3_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_3_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_3_schedule_name`')

        self._data["Control Scheme 3 Schedule Name"] = value

    @property
    def control_scheme_4_object_type(self):
        """Get control_scheme_4_object_type

        Returns:
            str: the value of `control_scheme_4_object_type` or None if not set
        """
        return self._data["Control Scheme 4 Object Type"]

    @control_scheme_4_object_type.setter
    def control_scheme_4_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_4_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_4_object_type`'.format(value))

        self._data["Control Scheme 4 Object Type"] = value

    @property
    def control_scheme_4_name(self):
        """Get control_scheme_4_name

        Returns:
            str: the value of `control_scheme_4_name` or None if not set
        """
        return self._data["Control Scheme 4 Name"]

    @control_scheme_4_name.setter
    def control_scheme_4_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_name`

        Args:
            value (str): value for IDD Field `control_scheme_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_name`')

        self._data["Control Scheme 4 Name"] = value

    @property
    def control_scheme_4_schedule_name(self):
        """Get control_scheme_4_schedule_name

        Returns:
            str: the value of `control_scheme_4_schedule_name` or None if not set
        """
        return self._data["Control Scheme 4 Schedule Name"]

    @control_scheme_4_schedule_name.setter
    def control_scheme_4_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_4_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_4_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_4_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_4_schedule_name`')

        self._data["Control Scheme 4 Schedule Name"] = value

    @property
    def control_scheme_5_object_type(self):
        """Get control_scheme_5_object_type

        Returns:
            str: the value of `control_scheme_5_object_type` or None if not set
        """
        return self._data["Control Scheme 5 Object Type"]

    @control_scheme_5_object_type.setter
    def control_scheme_5_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_5_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_5_object_type`'.format(value))

        self._data["Control Scheme 5 Object Type"] = value

    @property
    def control_scheme_5_name(self):
        """Get control_scheme_5_name

        Returns:
            str: the value of `control_scheme_5_name` or None if not set
        """
        return self._data["Control Scheme 5 Name"]

    @control_scheme_5_name.setter
    def control_scheme_5_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_name`

        Args:
            value (str): value for IDD Field `control_scheme_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_name`')

        self._data["Control Scheme 5 Name"] = value

    @property
    def control_scheme_5_schedule_name(self):
        """Get control_scheme_5_schedule_name

        Returns:
            str: the value of `control_scheme_5_schedule_name` or None if not set
        """
        return self._data["Control Scheme 5 Schedule Name"]

    @control_scheme_5_schedule_name.setter
    def control_scheme_5_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_5_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_5_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_5_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_5_schedule_name`')

        self._data["Control Scheme 5 Schedule Name"] = value

    @property
    def control_scheme_6_object_type(self):
        """Get control_scheme_6_object_type

        Returns:
            str: the value of `control_scheme_6_object_type` or None if not set
        """
        return self._data["Control Scheme 6 Object Type"]

    @control_scheme_6_object_type.setter
    def control_scheme_6_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_6_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_6_object_type`'.format(value))

        self._data["Control Scheme 6 Object Type"] = value

    @property
    def control_scheme_6_name(self):
        """Get control_scheme_6_name

        Returns:
            str: the value of `control_scheme_6_name` or None if not set
        """
        return self._data["Control Scheme 6 Name"]

    @control_scheme_6_name.setter
    def control_scheme_6_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_name`

        Args:
            value (str): value for IDD Field `control_scheme_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_name`')

        self._data["Control Scheme 6 Name"] = value

    @property
    def control_scheme_6_schedule_name(self):
        """Get control_scheme_6_schedule_name

        Returns:
            str: the value of `control_scheme_6_schedule_name` or None if not set
        """
        return self._data["Control Scheme 6 Schedule Name"]

    @control_scheme_6_schedule_name.setter
    def control_scheme_6_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_6_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_6_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_6_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_6_schedule_name`')

        self._data["Control Scheme 6 Schedule Name"] = value

    @property
    def control_scheme_7_object_type(self):
        """Get control_scheme_7_object_type

        Returns:
            str: the value of `control_scheme_7_object_type` or None if not set
        """
        return self._data["Control Scheme 7 Object Type"]

    @control_scheme_7_object_type.setter
    def control_scheme_7_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_7_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_7_object_type`'.format(value))

        self._data["Control Scheme 7 Object Type"] = value

    @property
    def control_scheme_7_name(self):
        """Get control_scheme_7_name

        Returns:
            str: the value of `control_scheme_7_name` or None if not set
        """
        return self._data["Control Scheme 7 Name"]

    @control_scheme_7_name.setter
    def control_scheme_7_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_name`

        Args:
            value (str): value for IDD Field `control_scheme_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_name`')

        self._data["Control Scheme 7 Name"] = value

    @property
    def control_scheme_7_schedule_name(self):
        """Get control_scheme_7_schedule_name

        Returns:
            str: the value of `control_scheme_7_schedule_name` or None if not set
        """
        return self._data["Control Scheme 7 Schedule Name"]

    @control_scheme_7_schedule_name.setter
    def control_scheme_7_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_7_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_7_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_7_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_7_schedule_name`')

        self._data["Control Scheme 7 Schedule Name"] = value

    @property
    def control_scheme_8_object_type(self):
        """Get control_scheme_8_object_type

        Returns:
            str: the value of `control_scheme_8_object_type` or None if not set
        """
        return self._data["Control Scheme 8 Object Type"]

    @control_scheme_8_object_type.setter
    def control_scheme_8_object_type(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_object_type`

        Args:
            value (str): value for IDD Field `control_scheme_8_object_type`
                Accepted values are:
                      - PlantEquipmentOperation:Uncontrolled
                      - PlantEquipmentOperation:CoolingLoad
                      - PlantEquipmentOperation:HeatingLoad
                      - PlantEquipmentOperation:OutdoorDryBulb
                      - PlantEquipmentOperation:OutdoorWetBulb
                      - PlantEquipmentOperation:OutdoorRelativeHumidity
                      - PlantEquipmentOperation:OutdoorDewpoint
                      - PlantEquipmentOperation:OutdoorDryBulbDifference
                      - PlantEquipmentOperation:OutdoorWetBulbDifference
                      - PlantEquipmentOperation:OutdoorDewpointDifference
                      - PlantEquipmentOperation:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_object_type`')
            vals = set()
            vals.add("PlantEquipmentOperation:Uncontrolled")
            vals.add("PlantEquipmentOperation:CoolingLoad")
            vals.add("PlantEquipmentOperation:HeatingLoad")
            vals.add("PlantEquipmentOperation:OutdoorDryBulb")
            vals.add("PlantEquipmentOperation:OutdoorWetBulb")
            vals.add("PlantEquipmentOperation:OutdoorRelativeHumidity")
            vals.add("PlantEquipmentOperation:OutdoorDewpoint")
            vals.add("PlantEquipmentOperation:OutdoorDryBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorWetBulbDifference")
            vals.add("PlantEquipmentOperation:OutdoorDewpointDifference")
            vals.add("PlantEquipmentOperation:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_scheme_8_object_type`'.format(value))

        self._data["Control Scheme 8 Object Type"] = value

    @property
    def control_scheme_8_name(self):
        """Get control_scheme_8_name

        Returns:
            str: the value of `control_scheme_8_name` or None if not set
        """
        return self._data["Control Scheme 8 Name"]

    @control_scheme_8_name.setter
    def control_scheme_8_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_name`

        Args:
            value (str): value for IDD Field `control_scheme_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_name`')

        self._data["Control Scheme 8 Name"] = value

    @property
    def control_scheme_8_schedule_name(self):
        """Get control_scheme_8_schedule_name

        Returns:
            str: the value of `control_scheme_8_schedule_name` or None if not set
        """
        return self._data["Control Scheme 8 Schedule Name"]

    @control_scheme_8_schedule_name.setter
    def control_scheme_8_schedule_name(self, value=None):
        """  Corresponds to IDD Field `control_scheme_8_schedule_name`

        Args:
            value (str): value for IDD Field `control_scheme_8_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_scheme_8_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_scheme_8_schedule_name`')

        self._data["Control Scheme 8 Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.control_scheme_1_object_type))
        out.append(self._to_str(self.control_scheme_1_name))
        out.append(self._to_str(self.control_scheme_1_schedule_name))
        out.append(self._to_str(self.control_scheme_2_object_type))
        out.append(self._to_str(self.control_scheme_2_name))
        out.append(self._to_str(self.control_scheme_2_schedule_name))
        out.append(self._to_str(self.control_scheme_3_object_type))
        out.append(self._to_str(self.control_scheme_3_name))
        out.append(self._to_str(self.control_scheme_3_schedule_name))
        out.append(self._to_str(self.control_scheme_4_object_type))
        out.append(self._to_str(self.control_scheme_4_name))
        out.append(self._to_str(self.control_scheme_4_schedule_name))
        out.append(self._to_str(self.control_scheme_5_object_type))
        out.append(self._to_str(self.control_scheme_5_name))
        out.append(self._to_str(self.control_scheme_5_schedule_name))
        out.append(self._to_str(self.control_scheme_6_object_type))
        out.append(self._to_str(self.control_scheme_6_name))
        out.append(self._to_str(self.control_scheme_6_schedule_name))
        out.append(self._to_str(self.control_scheme_7_object_type))
        out.append(self._to_str(self.control_scheme_7_name))
        out.append(self._to_str(self.control_scheme_7_schedule_name))
        out.append(self._to_str(self.control_scheme_8_object_type))
        out.append(self._to_str(self.control_scheme_8_name))
        out.append(self._to_str(self.control_scheme_8_schedule_name))
        return ",".join(out)